(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/EmitInterval (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketPrefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->AccessLoggingPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy" [& [enabled s-3-bucket-name emit-interval s-3-bucket-prefix]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/Enabled :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/EmitInterval :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketPrefix] [enabled s-3-bucket-name emit-interval s-3-bucket-prefix])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy m__1575651__auto__))))))
(clojure.core/defn map->AccessLoggingPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy" [{:keys [enabled s-3-bucket-name emit-interval s-3-bucket-prefix]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/Enabled :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/EmitInterval :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketPrefix] [enabled s-3-bucket-name emit-interval s-3-bucket-prefix])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/Enabled :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketName] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/EmitInterval :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AccessLoggingPolicy/S3BucketPrefix]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/DeleteOnTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/SnapshotId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance)
(clojure.core/defn ->EbsBlockDevice "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice" [& [delete-on-termination iops snapshot-id volume-size volume-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/Iops :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/SnapshotId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeSize :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeType] [delete-on-termination iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice m__1575651__auto__))))))
(clojure.core/defn map->EbsBlockDevice "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice" [{:keys [delete-on-termination iops snapshot-id volume-size volume-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/Iops :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/SnapshotId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeSize :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeType] [delete-on-termination iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsBlockDevice (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/Iops :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/SnapshotId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeSize :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.EbsBlockDevice/VolumeType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm)
(clojure.core/defn ->Dimension "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension" [& [name value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Name :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension m__1575651__auto__))))))
(clojure.core/defn map->Dimension "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension" [{:keys [name value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Name :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Name :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm.Dimension/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/HardLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/SoftLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->Ulimit "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit" [& [hard-limit name soft-limit]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/HardLimit :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/SoftLimit] [hard-limit name soft-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit m__1575651__auto__))))))
(clojure.core/defn map->Ulimit "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit" [{:keys [hard-limit name soft-limit]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/HardLimit :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/SoftLimit] [hard-limit name soft-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Ulimit (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/HardLimit :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Ulimit/SoftLimit] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/AdjustmentType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/Cooldown (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MetricAggregationType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MinAdjustmentMagnitude (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/StepAdjustments (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/StepAdjustment) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy)
(clojure.core/defn ->StepScalingPolicyConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration" [& [adjustment-type cooldown metric-aggregation-type min-adjustment-magnitude step-adjustments]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/AdjustmentType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/Cooldown :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MetricAggregationType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MinAdjustmentMagnitude :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/StepAdjustments] [adjustment-type cooldown metric-aggregation-type min-adjustment-magnitude step-adjustments])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration m__1575651__auto__))))))
(clojure.core/defn map->StepScalingPolicyConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration" [{:keys [adjustment-type cooldown metric-aggregation-type min-adjustment-magnitude step-adjustments]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/AdjustmentType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/Cooldown :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MetricAggregationType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MinAdjustmentMagnitude :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/StepAdjustments] [adjustment-type cooldown metric-aggregation-type min-adjustment-magnitude step-adjustments])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/AdjustmentType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/Cooldown :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MetricAggregationType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/MinAdjustmentMagnitude :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepScalingPolicyConfiguration/StepAdjustments]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.PlacementType/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->PlacementType "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType" [& [availability-zone]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.PlacementType/AvailabilityZone] [availability-zone])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType m__1575651__auto__))))))
(clojure.core/defn map->PlacementType "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType" [{:keys [availability-zone]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.PlacementType/AvailabilityZone] [availability-zone])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.PlacementType)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/PlacementType (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.PlacementType/AvailabilityZone] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup)
(clojure.core/defn ->TargetDescription "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription" [& [id port]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Id :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Port] [id port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription m__1575651__auto__))))))
(clojure.core/defn map->TargetDescription "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription" [{:keys [id port]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Id :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Port] [id port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Id] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetDescription/Port]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/CommitId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/Repository (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup)
(clojure.core/defn ->GitHubLocation "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation" [& [commit-id repository]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/CommitId :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/Repository] [commit-id repository])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation m__1575651__auto__))))))
(clojure.core/defn map->GitHubLocation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation" [{:keys [commit-id repository]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/CommitId :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/Repository] [commit-id repository])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/GitHubLocation (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/CommitId :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.GitHubLocation/Repository] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple/TextTransformation (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet)
(clojure.core/defn ->SqlInjectionMatchTuple "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple" [& [field-to-match text-transformation]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple/TextTransformation] [field-to-match text-transformation])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple m__1575651__auto__))))))
(clojure.core/defn map->SqlInjectionMatchTuple "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple" [{:keys [field-to-match text-transformation]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple/TextTransformation] [field-to-match text-transformation])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.SqlInjectionMatchTuple/TextTransformation] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/ApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/Stage (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan)
(clojure.core/defn ->ApiStage "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage" [& [api-id stage]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/ApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/Stage] [api-id stage])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage m__1575651__auto__))))))
(clojure.core/defn map->ApiStage "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage" [{:keys [api-id stage]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/ApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/Stage] [api-id stage])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/ApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ApiStage/Stage]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.IPSet)
(clojure.core/defn ->IPSetDescriptor "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor" [& [type value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Type :crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Value] [type value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor m__1575651__auto__))))))
(clojure.core/defn map->IPSetDescriptor "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor" [{:keys [type value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Type :crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Value] [type value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Type :crucible.generated.ap-northeast-1.AWS.WAF.IPSet.IPSetDescriptor/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/ComparisonOperator (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/Size (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/TextTransformation (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet)
(clojure.core/defn ->SizeConstraint "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint" [& [comparison-operator field-to-match size text-transformation]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/ComparisonOperator :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/Size :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/TextTransformation] [comparison-operator field-to-match size text-transformation])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint m__1575651__auto__))))))
(clojure.core/defn map->SizeConstraint "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint" [{:keys [comparison-operator field-to-match size text-transformation]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/ComparisonOperator :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/Size :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/TextTransformation] [comparison-operator field-to-match size text-transformation])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/ComparisonOperator :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/Size :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.SizeConstraint/TextTransformation] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/StageName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey)
(clojure.core/defn ->StageKey "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey" [& [rest-api-id stage-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/StageName] [rest-api-id stage-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey m__1575651__auto__))))))
(clojure.core/defn map->StageKey "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey" [{:keys [rest-api-id stage-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/StageName] [rest-api-id stage-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey.StageKey/StageName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3ObjectVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/ZipFile (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Function)
(clojure.core/defn ->Code "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code" [& [s-3-bucket s-3-key s-3-object-version zip-file]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Bucket :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Key :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3ObjectVersion :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/ZipFile] [s-3-bucket s-3-key s-3-object-version zip-file])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code m__1575651__auto__))))))
(clojure.core/defn map->Code "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code" [{:keys [s-3-bucket s-3-key s-3-object-version zip-file]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Bucket :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Key :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3ObjectVersion :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/ZipFile] [s-3-bucket s-3-key s-3-object-version zip-file])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Bucket :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3Key :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/S3ObjectVersion :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Code/ZipFile]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/LambdaConfigurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/LambdaConfiguration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/QueueConfigurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/QueueConfiguration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/TopicConfigurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/TopicConfiguration) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->NotificationConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration" [& [lambda-configurations queue-configurations topic-configurations]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/LambdaConfigurations :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/QueueConfigurations :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/TopicConfigurations] [lambda-configurations queue-configurations topic-configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration m__1575651__auto__))))))
(clojure.core/defn map->NotificationConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration" [{:keys [lambda-configurations queue-configurations topic-configurations]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/LambdaConfigurations :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/QueueConfigurations :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/TopicConfigurations] [lambda-configurations queue-configurations topic-configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/LambdaConfigurations :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/QueueConfigurations :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationConfiguration/TopicConfigurations]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/CDIRIP (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupOwnerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup)
(clojure.core/defn ->Ingress "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress" [& [cdirip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/CDIRIP :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupOwnerId] [cdirip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress m__1575651__auto__))))))
(clojure.core/defn map->Ingress "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress" [{:keys [cdirip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/CDIRIP :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupOwnerId] [cdirip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/CDIRIP :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup.Ingress/EC2SecurityGroupOwnerId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Endpoint (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Index (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->ElasticsearchAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction" [& [endpoint id index role-arn type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Endpoint :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Id :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Index :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Type] [endpoint id index role-arn type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction m__1575651__auto__))))))
(clojure.core/defn map->ElasticsearchAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction" [{:keys [endpoint id index role-arn type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Endpoint :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Id :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Index :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Type] [endpoint id index role-arn type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/ElasticsearchAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Endpoint :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Id :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Index :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.ElasticsearchAction/Type] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.LambdaAction/FunctionArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->LambdaAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction" [& [function-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.LambdaAction/FunctionArn] [function-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction m__1575651__auto__))))))
(clojure.core/defn map->LambdaAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction" [{:keys [function-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.LambdaAction/FunctionArn] [function-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.LambdaAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/LambdaAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.LambdaAction/FunctionArn] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Build)
(clojure.core/defn ->S3Location "Constructor for a :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location" [& [bucket key role-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Key :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/RoleArn] [bucket key role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location m__1575651__auto__))))))
(clojure.core/defn map->S3Location "Convert a map to a :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location" [{:keys [bucket key role-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Key :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/RoleArn] [bucket key role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Build/S3Location (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/Key :crucible.generated.ap-northeast-1.AWS.GameLift.Build.S3Location/RoleArn] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Category (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Owner (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Provider (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->ActionTypeId "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId" [& [category owner provider version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Category :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Owner :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Provider :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Version] [category owner provider version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId m__1575651__auto__))))))
(clojure.core/defn map->ActionTypeId "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId" [{:keys [category owner provider version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Category :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Owner :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Provider :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Version] [category owner provider version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionTypeId (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Category :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Owner :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Provider :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionTypeId/Version] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Certificate/CertificateArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener)
(clojure.core/defn ->Certificate "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate" [& [certificate-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Certificate/CertificateArn] [certificate-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate m__1575651__auto__))))))
(clojure.core/defn map->Certificate "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate" [{:keys [certificate-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Certificate/CertificateArn] [certificate-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Certificate)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Certificate/CertificateArn]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/Priority (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/RuleId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.WebACL)
(clojure.core/defn ->ActivatedRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule" [& [action priority rule-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/Action :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/Priority :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/RuleId] [action priority rule-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule m__1575651__auto__))))))
(clojure.core/defn map->ActivatedRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule" [{:keys [action priority rule-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/Action :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/Priority :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/RuleId] [action priority rule-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/Action :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/Priority :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.ActivatedRule/RuleId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function.Environment/Variables (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Function)
(clojure.core/defn ->Environment "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment" [& [variables]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.Environment/Variables] [variables])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment m__1575651__auto__))))))
(clojure.core/defn map->Environment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment" [{:keys [variables]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.Environment/Variables] [variables])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Function.Environment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.Environment/Variables]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MaximumCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MinimumCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType)
(clojure.core/defn ->ArtifactDetails "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails" [& [maximum-count minimum-count]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MaximumCount :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MinimumCount] [maximum-count minimum-count])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails m__1575651__auto__))))))
(clojure.core/defn map->ArtifactDetails "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails" [{:keys [maximum-count minimum-count]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MaximumCount :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MinimumCount] [maximum-count minimum-count])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ArtifactDetails (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MaximumCount :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ArtifactDetails/MinimumCount] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/BucketName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->S3Action "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action" [& [bucket-name key role-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/BucketName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/Key :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/RoleArn] [bucket-name key role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action m__1575651__auto__))))))
(clojure.core/defn map->S3Action "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action" [{:keys [bucket-name key role-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/BucketName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/Key :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/RoleArn] [bucket-name key role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/S3Action (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/BucketName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/Key :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.S3Action/RoleArn] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck)
(clojure.core/defn ->HealthCheckTag "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Key :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag m__1575651__auto__))))))
(clojure.core/defn map->HealthCheckTag "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Key :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Key :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckTag/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Namespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/OptionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate)
(clojure.core/defn ->ConfigurationOptionSetting "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting" [& [namespace option-name value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Namespace :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/OptionName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Value] [namespace option-name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting m__1575651__auto__))))))
(clojure.core/defn map->ConfigurationOptionSetting "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting" [{:keys [namespace option-name value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Namespace :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/OptionName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Value] [namespace option-name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Namespace :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/OptionName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.ConfigurationOptionSetting/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstancePort (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstanceProtocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/LoadBalancerPort (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/PolicyNames (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/SSLCertificateId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->Listeners "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners" [& [instance-port load-balancer-port protocol instance-protocol policy-names ssl-certificate-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstancePort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/LoadBalancerPort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/Protocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstanceProtocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/PolicyNames :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/SSLCertificateId] [instance-port load-balancer-port protocol instance-protocol policy-names ssl-certificate-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners m__1575651__auto__))))))
(clojure.core/defn map->Listeners "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners" [{:keys [instance-port load-balancer-port protocol instance-protocol policy-names ssl-certificate-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstancePort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/LoadBalancerPort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/Protocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstanceProtocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/PolicyNames :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/SSLCertificateId] [instance-port load-balancer-port protocol instance-protocol policy-names ssl-certificate-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstancePort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/LoadBalancerPort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/Protocol] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/InstanceProtocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/PolicyNames :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Listeners/SSLCertificateId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/PropagateAtLaunch (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup)
(clojure.core/defn ->TagProperty "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty" [& [key propagate-at-launch value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Key :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/PropagateAtLaunch :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Value] [key propagate-at-launch value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty m__1575651__auto__))))))
(clojure.core/defn map->TagProperty "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty" [{:keys [key propagate-at-launch value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Key :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/PropagateAtLaunch :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Value] [key propagate-at-launch value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Key :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/PropagateAtLaunch :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.TagProperty/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/DeleteOnTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Encrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/SnapshotId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->Ebs "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs" [& [delete-on-termination encrypted iops snapshot-id volume-size volume-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Iops :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeSize :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeType] [delete-on-termination encrypted iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs m__1575651__auto__))))))
(clojure.core/defn map->Ebs "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs" [{:keys [delete-on-termination encrypted iops snapshot-id volume-size volume-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Iops :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeSize :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeType] [delete-on-termination encrypted iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ebs (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/Iops :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeSize :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Ebs/VolumeType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Password (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Revision (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/SshKey (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Url (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Username (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App)
(clojure.core/defn ->Source "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source" [& [password revision ssh-key type url username]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Password :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Revision :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/SshKey :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Url :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Username] [password revision ssh-key type url username])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source m__1575651__auto__))))))
(clojure.core/defn map->Source "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source" [{:keys [password revision ssh-key type url username]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Password :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Revision :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/SshKey :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Url :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Username] [password revision ssh-key type url username])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Source (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Password :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Revision :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/SshKey :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Url :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.Source/Username]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/Primary (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/PrivateIpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface)
(clojure.core/defn ->PrivateIpAddressSpecification "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification" [& [primary private-ip-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/Primary :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/PrivateIpAddress] [primary private-ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification m__1575651__auto__))))))
(clojure.core/defn map->PrivateIpAddressSpecification "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification" [{:keys [primary private-ip-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/Primary :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/PrivateIpAddress] [primary private-ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/Primary :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.PrivateIpAddressSpecification/PrivateIpAddress] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/IndexName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/KeySchema (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/KeySchema) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.core/defn ->GlobalSecondaryIndex "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex" [& [index-name key-schema projection provisioned-throughput]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/IndexName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/Projection :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/ProvisionedThroughput] [index-name key-schema projection provisioned-throughput])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex m__1575651__auto__))))))
(clojure.core/defn map->GlobalSecondaryIndex "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex" [{:keys [index-name key-schema projection provisioned-throughput]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/IndexName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/Projection :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/ProvisionedThroughput] [index-name key-schema projection provisioned-throughput])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/IndexName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/Projection :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.GlobalSecondaryIndex/ProvisionedThroughput] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceTypes (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagKey (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigRule)
(clojure.core/defn ->Scope "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope" [& [compliance-resource-id compliance-resource-types tag-key tag-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceId :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceTypes :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagKey :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagValue] [compliance-resource-id compliance-resource-types tag-key tag-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope m__1575651__auto__))))))
(clojure.core/defn map->Scope "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope" [{:keys [compliance-resource-id compliance-resource-types tag-key tag-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceId :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceTypes :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagKey :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagValue] [compliance-resource-id compliance-resource-types tag-key tag-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceId :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/ComplianceResourceTypes :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagKey :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Scope/TagValue]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/IntervalInSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/SizeInMBs (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->BufferingHints "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints" [& [interval-in-seconds size-in-m-bs]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/IntervalInSeconds :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/SizeInMBs] [interval-in-seconds size-in-m-bs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints m__1575651__auto__))))))
(clojure.core/defn map->BufferingHints "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints" [{:keys [interval-in-seconds size-in-m-bs]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/IntervalInSeconds :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/SizeInMBs] [interval-in-seconds size-in-m-bs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/BufferingHints (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/IntervalInSeconds :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.BufferingHints/SizeInMBs] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple/TextTransformation (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet)
(clojure.core/defn ->XssMatchTuple "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple" [& [field-to-match text-transformation]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple/TextTransformation] [field-to-match text-transformation])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple m__1575651__auto__))))))
(clojure.core/defn map->XssMatchTuple "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple" [{:keys [field-to-match text-transformation]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple/TextTransformation] [field-to-match text-transformation])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.XssMatchTuple/TextTransformation] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/CopyOptions (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableColumns (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->CopyCommand "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand" [& [data-table-name copy-options data-table-columns]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/CopyOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableColumns] [data-table-name copy-options data-table-columns])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand m__1575651__auto__))))))
(clojure.core/defn map->CopyCommand "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand" [{:keys [data-table-name copy-options data-table-columns]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/CopyOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableColumns] [data-table-name copy-options data-table-columns])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CopyCommand (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableName] :opt [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/CopyOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CopyCommand/DataTableColumns]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.InstanceIpv6Address/Ipv6Address (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->InstanceIpv6Address "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address" [& [ipv-6-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.InstanceIpv6Address/Ipv6Address] [ipv-6-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address m__1575651__auto__))))))
(clojure.core/defn map->InstanceIpv6Address "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address" [{:keys [ipv-6-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.InstanceIpv6Address/Ipv6Address] [ipv-6-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.InstanceIpv6Address)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.InstanceIpv6Address/Ipv6Address] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/DeleteOnTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Encrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/SnapshotId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeSize (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration)
(clojure.core/defn ->BlockDevice "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice" [& [delete-on-termination encrypted iops snapshot-id volume-size volume-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Encrypted :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Iops :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/SnapshotId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeType] [delete-on-termination encrypted iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice m__1575651__auto__))))))
(clojure.core/defn map->BlockDevice "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice" [{:keys [delete-on-termination encrypted iops snapshot-id volume-size volume-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Encrypted :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Iops :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/SnapshotId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeType] [delete-on-termination encrypted iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDevice (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Encrypted :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/Iops :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/SnapshotId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDevice/VolumeType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig/VolumesPerInstance (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->EbsBlockDeviceConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig" [& [volume-specification volumes-per-instance]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig/VolumeSpecification :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig/VolumesPerInstance] [volume-specification volumes-per-instance])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig m__1575651__auto__))))))
(clojure.core/defn map->EbsBlockDeviceConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig" [{:keys [volume-specification volumes-per-instance]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig/VolumeSpecification :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig/VolumesPerInstance] [volume-specification volumes-per-instance])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsBlockDeviceConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig/VolumeSpecification] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsBlockDeviceConfig/VolumesPerInstance]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/Device (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/VolumeId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->Volume "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume" [& [device volume-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/Device :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/VolumeId] [device volume-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume m__1575651__auto__))))))
(clojure.core/defn map->Volume "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume" [{:keys [device volume-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/Device :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/VolumeId] [device volume-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/Device :crucible.generated.ap-northeast-1.AWS.EC2.Instance.Volume/VolumeId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/PositionalConstraint (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetString (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetStringBase64 (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TextTransformation (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet)
(clojure.core/defn ->ByteMatchTuple "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple" [& [field-to-match positional-constraint text-transformation target-string target-string-base-64]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/PositionalConstraint :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TextTransformation :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetString :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetStringBase64] [field-to-match positional-constraint text-transformation target-string target-string-base-64])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple m__1575651__auto__))))))
(clojure.core/defn map->ByteMatchTuple "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple" [{:keys [field-to-match positional-constraint text-transformation target-string target-string-base-64]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/PositionalConstraint :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TextTransformation :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetString :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetStringBase64] [field-to-match positional-constraint text-transformation target-string target-string-base-64])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/FieldToMatch :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/PositionalConstraint :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TextTransformation] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetString :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.ByteMatchTuple/TargetStringBase64]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/AdditionalInfo (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Args (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->Application "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application" [& [additional-info args name version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Args :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Version] [additional-info args name version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application m__1575651__auto__))))))
(clojure.core/defn map->Application "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application" [{:keys [additional-info args name version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Args :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Version] [additional-info args name version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Args :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Application/Version]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/Attributes (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/InstancePorts (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/LoadBalancerPorts (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->Policies "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies" [& [attributes policy-name policy-type instance-ports load-balancer-ports]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/Attributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyType :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/InstancePorts :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/LoadBalancerPorts] [attributes policy-name policy-type instance-ports load-balancer-ports])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies m__1575651__auto__))))))
(clojure.core/defn map->Policies "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies" [{:keys [attributes policy-name policy-type instance-ports load-balancer-ports]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/Attributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyType :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/InstancePorts :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/LoadBalancerPorts] [attributes policy-name policy-type instance-ports load-balancer-ports])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/Attributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/PolicyType] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/InstancePorts :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.Policies/LoadBalancerPorts]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Code (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Type (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry)
(clojure.core/defn ->Icmp "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp" [& [code type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Code :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Type] [code type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp m__1575651__auto__))))))
(clojure.core/defn map->Icmp "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp" [{:keys [code type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Code :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Type] [code type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Code :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.Icmp/Type]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/Primary (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/PrivateIpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->PrivateIpAddresses "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses" [& [private-ip-address primary]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/Primary] [private-ip-address primary])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses m__1575651__auto__))))))
(clojure.core/defn map->PrivateIpAddresses "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses" [{:keys [private-ip-address primary]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/Primary] [private-ip-address primary])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/PrivateIpAddresses (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/PrivateIpAddress] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.PrivateIpAddresses/Primary]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/Headers (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryString (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryStringCacheKeys (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->ForwardedValues "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues" [& [query-string cookies headers query-string-cache-keys]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryString :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/Cookies :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/Headers :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryStringCacheKeys] [query-string cookies headers query-string-cache-keys])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues m__1575651__auto__))))))
(clojure.core/defn map->ForwardedValues "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues" [{:keys [query-string cookies headers query-string-cache-keys]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryString :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/Cookies :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/Headers :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryStringCacheKeys] [query-string cookies headers query-string-cache-keys])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ForwardedValues (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryString] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/Cookies :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/Headers :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ForwardedValues/QueryStringCacheKeys]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Arn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/DatabaseName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App)
(clojure.core/defn ->DataSource "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource" [& [arn database-name type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Arn :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/DatabaseName :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Type] [arn database-name type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource m__1575651__auto__))))))
(clojure.core/defn map->DataSource "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource" [{:keys [arn database-name type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Arn :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/DatabaseName :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Type] [arn database-name type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Arn :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/DatabaseName :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.DataSource/Type]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Fields (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Field) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline)
(clojure.core/defn ->PipelineObject "Constructor for a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject" [& [fields id name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Fields :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Id :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Name] [fields id name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject m__1575651__auto__))))))
(clojure.core/defn map->PipelineObject "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject" [{:keys [fields id name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Fields :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Id :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Name] [fields id name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Fields :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Id :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineObject/Name] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedSlaveSecurityGroup (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/HadoopVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2KeyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/ServiceAccessSecurityGroup (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalSlaveSecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedMasterSecurityGroup (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/TerminationProtected (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalMasterSecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->JobFlowInstancesConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig" [& [core-instance-group master-instance-group additional-master-security-groups additional-slave-security-groups ec-2-key-name ec-2-subnet-id emr-managed-master-security-group emr-managed-slave-security-group hadoop-version placement service-access-security-group termination-protected]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/CoreInstanceGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/MasterInstanceGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalMasterSecurityGroups :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalSlaveSecurityGroups :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2KeyName :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2SubnetId :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedMasterSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedSlaveSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/HadoopVersion :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Placement :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/ServiceAccessSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/TerminationProtected] [core-instance-group master-instance-group additional-master-security-groups additional-slave-security-groups ec-2-key-name ec-2-subnet-id emr-managed-master-security-group emr-managed-slave-security-group hadoop-version placement service-access-security-group termination-protected])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig m__1575651__auto__))))))
(clojure.core/defn map->JobFlowInstancesConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig" [{:keys [core-instance-group master-instance-group additional-master-security-groups additional-slave-security-groups ec-2-key-name ec-2-subnet-id emr-managed-master-security-group emr-managed-slave-security-group hadoop-version placement service-access-security-group termination-protected]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/CoreInstanceGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/MasterInstanceGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalMasterSecurityGroups :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalSlaveSecurityGroups :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2KeyName :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2SubnetId :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedMasterSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedSlaveSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/HadoopVersion :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Placement :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/ServiceAccessSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/TerminationProtected] [core-instance-group master-instance-group additional-master-security-groups additional-slave-security-groups ec-2-key-name ec-2-subnet-id emr-managed-master-security-group emr-managed-slave-security-group hadoop-version placement service-access-security-group termination-protected])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowInstancesConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/CoreInstanceGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/MasterInstanceGroup] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalMasterSecurityGroups :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/AdditionalSlaveSecurityGroups :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2KeyName :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Ec2SubnetId :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedMasterSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/EmrManagedSlaveSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/HadoopVersion :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/Placement :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/ServiceAccessSecurityGroup :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.JobFlowInstancesConfig/TerminationProtected]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Field (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Values (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule)
(clojure.core/defn ->RuleCondition "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition" [& [field values]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Field :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Values] [field values])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition m__1575651__auto__))))))
(clojure.core/defn map->RuleCondition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition" [{:keys [field values]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Field :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Values] [field values])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Field :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.RuleCondition/Values]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/IndexName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/KeySchema (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/KeySchema) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.core/defn ->LocalSecondaryIndex "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex" [& [index-name key-schema projection]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/IndexName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/Projection] [index-name key-schema projection])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex m__1575651__auto__))))))
(clojure.core/defn map->LocalSecondaryIndex "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex" [{:keys [index-name key-schema projection]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/IndexName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/Projection] [index-name key-schema projection])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/IndexName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.LocalSecondaryIndex/Projection] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy)
(clojure.core/defn ->StepAdjustment "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment" [& [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound] [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__))))))
(clojure.core/defn map->StepAdjustment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment" [{:keys [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound] [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepAdjustment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment] :opt [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/BurstLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/RateLimit (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan)
(clojure.core/defn ->ThrottleSettings "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings" [& [burst-limit rate-limit]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/BurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/RateLimit] [burst-limit rate-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings m__1575651__auto__))))))
(clojure.core/defn map->ThrottleSettings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings" [{:keys [burst-limit rate-limit]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/BurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/RateLimit] [burst-limit rate-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ThrottleSettings (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/BurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.ThrottleSettings/RateLimit]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionSettings/IdleTimeout (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->ConnectionSettings "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings" [& [idle-timeout]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionSettings/IdleTimeout] [idle-timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings m__1575651__auto__))))))
(clojure.core/defn map->ConnectionSettings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings" [{:keys [idle-timeout]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionSettings/IdleTimeout] [idle-timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionSettings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionSettings/IdleTimeout] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Namespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/OptionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment)
(clojure.core/defn ->OptionSettings "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings" [& [namespace option-name value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Namespace :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/OptionName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Value] [namespace option-name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings m__1575651__auto__))))))
(clojure.core/defn map->OptionSettings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings" [{:keys [namespace option-name value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Namespace :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/OptionName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Value] [namespace option-name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Namespace :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/OptionName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.OptionSettings/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/StringValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline)
(clojure.core/defn ->ParameterAttribute "Constructor for a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute" [& [key string-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/StringValue] [key string-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute m__1575651__auto__))))))
(clojure.core/defn map->ParameterAttribute "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute" [{:keys [key string-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/StringValue] [key string-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterAttribute (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterAttribute/StringValue] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Value (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->AssociationParameter "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Key :crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter m__1575651__auto__))))))
(clojure.core/defn map->AssociationParameter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Key :crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AssociationParameter (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Key :crucible.generated.ap-northeast-1.AWS.EC2.Instance.AssociationParameter/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/DNSName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/EvaluateTargetHealth (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/HostedZoneId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSet)
(clojure.core/defn ->AliasTarget "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget" [& [dns-name hosted-zone-id evaluate-target-health]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/DNSName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/EvaluateTargetHealth] [dns-name hosted-zone-id evaluate-target-health])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget m__1575651__auto__))))))
(clojure.core/defn map->AliasTarget "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget" [{:keys [dns-name hosted-zone-id evaluate-target-health]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/DNSName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/EvaluateTargetHealth] [dns-name hosted-zone-id evaluate-target-health])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/DNSName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/HostedZoneId] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.AliasTarget/EvaluateTargetHealth]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.Matcher/HttpCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup)
(clojure.core/defn ->Matcher "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher" [& [http-code]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.Matcher/HttpCode] [http-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher m__1575651__auto__))))))
(clojure.core/defn map->Matcher "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher" [{:keys [http-code]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.Matcher/HttpCode] [http-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.Matcher)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.Matcher/HttpCode] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association.ParameterValues/ParameterValues (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM.Association)
(clojure.core/defn ->ParameterValues "Constructor for a :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues" [& [parameter-values]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Association.ParameterValues/ParameterValues] [parameter-values])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues m__1575651__auto__))))))
(clojure.core/defn map->ParameterValues "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues" [{:keys [parameter-values]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Association.ParameterValues/ParameterValues] [parameter-values])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM.Association.ParameterValues)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.SSM.Association.ParameterValues/ParameterValues] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogStreamName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->CloudWatchLoggingOptions "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions" [& [enabled log-group-name log-stream-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/Enabled :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogGroupName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogStreamName] [enabled log-group-name log-stream-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions m__1575651__auto__))))))
(clojure.core/defn map->CloudWatchLoggingOptions "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions" [{:keys [enabled log-group-name log-stream-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/Enabled :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogGroupName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogStreamName] [enabled log-group-name log-stream-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/CloudWatchLoggingOptions (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/Enabled :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogGroupName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.CloudWatchLoggingOptions/LogStreamName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.S3KeyFilter/Rules (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.S3KeyFilter/FilterRule) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->S3KeyFilter "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter" [& [rules]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.S3KeyFilter/Rules] [rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter m__1575651__auto__))))))
(clojure.core/defn map->S3KeyFilter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter" [{:keys [rules]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.S3KeyFilter/Rules] [rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.S3KeyFilter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/S3KeyFilter (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.S3KeyFilter/Rules] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Friday (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Monday (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Saturday (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Sunday (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Thursday (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Tuesday (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Wednesday (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance)
(clojure.core/defn ->TimeBasedAutoScaling "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling" [& [friday monday saturday sunday thursday tuesday wednesday]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Friday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Monday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Saturday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Sunday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Thursday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Tuesday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Wednesday] [friday monday saturday sunday thursday tuesday wednesday])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling m__1575651__auto__))))))
(clojure.core/defn map->TimeBasedAutoScaling "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling" [{:keys [friday monday saturday sunday thursday tuesday wednesday]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Friday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Monday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Saturday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Sunday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Thursday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Tuesday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Wednesday] [friday monday saturday sunday thursday tuesday wednesday])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Friday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Monday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Saturday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Sunday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Thursday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Tuesday :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.TimeBasedAutoScaling/Wednesday]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/DelayUntilElbConnectionsDrained (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/ExecutionTimeout (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer)
(clojure.core/defn ->ShutdownEventConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration" [& [delay-until-elb-connections-drained execution-timeout]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/DelayUntilElbConnectionsDrained :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/ExecutionTimeout] [delay-until-elb-connections-drained execution-timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration m__1575651__auto__))))))
(clojure.core/defn map->ShutdownEventConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration" [{:keys [delay-until-elb-connections-drained execution-timeout]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/DelayUntilElbConnectionsDrained :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/ExecutionTimeout] [delay-until-elb-connections-drained execution-timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/ShutdownEventConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/DelayUntilElbConnectionsDrained :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.ShutdownEventConfiguration/ExecutionTimeout]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.Role)
(clojure.core/defn ->Policy "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy" [& [policy-document policy-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy m__1575651__auto__))))))
(clojure.core/defn map->Policy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy" [{:keys [policy-document policy-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Role.Policy/PolicyName] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/From (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/To (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry)
(clojure.core/defn ->PortRange "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange" [& [from to]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/From :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/To] [from to])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange m__1575651__auto__))))))
(clojure.core/defn map->PortRange "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange" [{:keys [from to]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/From :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/To] [from to])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/From :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry.PortRange/To]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/DefaultRootObject (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Comment (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/WebACLId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CacheBehaviors (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CacheBehavior) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CustomErrorResponses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CustomErrorResponse) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Aliases (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/PriceClass (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Origins (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Origin) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/HttpVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->DistributionConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig" [& [default-cache-behavior enabled origins aliases cache-behaviors comment custom-error-responses default-root-object http-version logging price-class restrictions viewer-certificate web-acl-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/DefaultCacheBehavior :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Enabled :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Origins :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Aliases :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CacheBehaviors :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Comment :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CustomErrorResponses :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/DefaultRootObject :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/HttpVersion :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Logging :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/PriceClass :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Restrictions :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/ViewerCertificate :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/WebACLId] [default-cache-behavior enabled origins aliases cache-behaviors comment custom-error-responses default-root-object http-version logging price-class restrictions viewer-certificate web-acl-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig m__1575651__auto__))))))
(clojure.core/defn map->DistributionConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig" [{:keys [default-cache-behavior enabled origins aliases cache-behaviors comment custom-error-responses default-root-object http-version logging price-class restrictions viewer-certificate web-acl-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/DefaultCacheBehavior :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Enabled :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Origins :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Aliases :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CacheBehaviors :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Comment :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CustomErrorResponses :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/DefaultRootObject :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/HttpVersion :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Logging :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/PriceClass :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Restrictions :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/ViewerCertificate :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/WebACLId] [default-cache-behavior enabled origins aliases cache-behaviors comment custom-error-responses default-root-object http-version logging price-class restrictions viewer-certificate web-acl-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/DefaultCacheBehavior :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Enabled :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Origins] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Aliases :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CacheBehaviors :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Comment :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/CustomErrorResponses :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/DefaultRootObject :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/HttpVersion :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Logging :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/PriceClass :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/Restrictions :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/ViewerCertificate :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DistributionConfig/WebACLId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/EventSource (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/MessageType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigRule)
(clojure.core/defn ->SourceDetail "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail" [& [event-source message-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/EventSource :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/MessageType] [event-source message-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail m__1575651__auto__))))))
(clojure.core/defn map->SourceDetail "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail" [{:keys [event-source message-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/EventSource :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/MessageType] [event-source message-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/SourceDetail (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/EventSource :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.SourceDetail/MessageType] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/SizeInGB (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig)
(clojure.core/defn ->VolumeSpecification "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification" [& [size-in-gb volume-type iops]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/SizeInGB :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/VolumeType :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/Iops] [size-in-gb volume-type iops])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification m__1575651__auto__))))))
(clojure.core/defn map->VolumeSpecification "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification" [{:keys [size-in-gb volume-type iops]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/SizeInGB :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/VolumeType :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/Iops] [size-in-gb volume-type iops])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/VolumeSpecification (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/SizeInGB :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/VolumeType] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.VolumeSpecification/Iops]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline)
(clojure.core/defn ->PipelineTag "Constructor for a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag m__1575651__auto__))))))
(clojure.core/defn map->PipelineTag "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.PipelineTag/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/Owner (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceDetails (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceDetail) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigRule)
(clojure.core/defn ->Source "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source" [& [owner source-identifier source-details]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/Owner :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceIdentifier :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceDetails] [owner source-identifier source-details])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source m__1575651__auto__))))))
(clojure.core/defn map->Source "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source" [{:keys [owner source-identifier source-details]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/Owner :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceIdentifier :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceDetails] [owner source-identifier source-details])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/Owner :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceIdentifier] :opt [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule.Source/SourceDetails]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseModels (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseParameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/boolean?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/StatusCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Method)
(clojure.core/defn ->MethodResponse "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse" [& [response-models response-parameters status-code]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseModels :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/StatusCode] [response-models response-parameters status-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse m__1575651__auto__))))))
(clojure.core/defn map->MethodResponse "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse" [{:keys [response-models response-parameters status-code]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseModels :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/StatusCode] [response-models response-parameters status-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseModels :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/ResponseParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.MethodResponse/StatusCode]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Granularity (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Metrics (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup)
(clojure.core/defn ->MetricsCollection "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection" [& [granularity metrics]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Granularity :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Metrics] [granularity metrics])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection m__1575651__auto__))))))
(clojure.core/defn map->MetricsCollection "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection" [{:keys [granularity metrics]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Granularity :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Metrics] [granularity metrics])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Granularity] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.MetricsCollection/Metrics]))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->Action "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action" [& [cloudwatch-alarm cloudwatch-metric dynamo-db elasticsearch firehose kinesis lambda republish s-3 sns sqs]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/CloudwatchAlarm :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/CloudwatchMetric :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/DynamoDB :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Elasticsearch :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Firehose :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Kinesis :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Lambda :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Republish :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/S3 :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Sns :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Sqs] [cloudwatch-alarm cloudwatch-metric dynamo-db elasticsearch firehose kinesis lambda republish s-3 sns sqs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action m__1575651__auto__))))))
(clojure.core/defn map->Action "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action" [{:keys [cloudwatch-alarm cloudwatch-metric dynamo-db elasticsearch firehose kinesis lambda republish s-3 sns sqs]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/CloudwatchAlarm :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/CloudwatchMetric :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/DynamoDB :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Elasticsearch :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Firehose :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Kinesis :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Lambda :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Republish :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/S3 :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Sns :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Sqs] [cloudwatch-alarm cloudwatch-metric dynamo-db elasticsearch firehose kinesis lambda republish s-3 sns sqs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/Action (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/CloudwatchAlarm :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/CloudwatchMetric :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/DynamoDB :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Elasticsearch :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Firehose :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Kinesis :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Lambda :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Republish :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/S3 :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Sns :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.Action/Sqs]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/Topic (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->RepublishAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction" [& [role-arn topic]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/Topic] [role-arn topic])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction m__1575651__auto__))))))
(clojure.core/defn map->RepublishAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction" [{:keys [role-arn topic]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/Topic] [role-arn topic])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RepublishAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.RepublishAction/Topic] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->KeyValuePair "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair" [& [name value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair m__1575651__auto__))))))
(clojure.core/defn map->KeyValuePair "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair" [{:keys [name value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/KeyValuePair (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.KeyValuePair/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/DeliveryStreamName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/Separator (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->FirehoseAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction" [& [delivery-stream-name role-arn separator]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/DeliveryStreamName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/Separator] [delivery-stream-name role-arn separator])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction m__1575651__auto__))))))
(clojure.core/defn map->FirehoseAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction" [{:keys [delivery-stream-name role-arn separator]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/DeliveryStreamName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/Separator] [delivery-stream-name role-arn separator])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/FirehoseAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/DeliveryStreamName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/RoleArn] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.FirehoseAction/Separator]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HostedZone)
(clojure.core/defn ->HostedZoneTag "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Key :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag m__1575651__auto__))))))
(clojure.core/defn map->HostedZoneTag "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Key :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Key :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneTag/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->BootstrapActionConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig" [& [name script-bootstrap-action]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig/ScriptBootstrapAction] [name script-bootstrap-action])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig m__1575651__auto__))))))
(clojure.core/defn map->BootstrapActionConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig" [{:keys [name script-bootstrap-action]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig/ScriptBootstrapAction] [name script-bootstrap-action])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.BootstrapActionConfig/ScriptBootstrapAction] :opt []))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->RoutingRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule" [& [redirect-rule routing-rule-condition]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRule/RedirectRule :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRule/RoutingRuleCondition] [redirect-rule routing-rule-condition])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule m__1575651__auto__))))))
(clojure.core/defn map->RoutingRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule" [{:keys [redirect-rule routing-rule-condition]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRule/RedirectRule :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRule/RoutingRuleCondition] [redirect-rule routing-rule-condition])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRule/RedirectRule] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRule/RoutingRuleCondition]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/DataId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Negated (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.Rule)
(clojure.core/defn ->Predicate "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate" [& [data-id negated type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/DataId :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Negated :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Type] [data-id negated type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate m__1575651__auto__))))))
(clojure.core/defn map->Predicate "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate" [{:keys [data-id negated type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/DataId :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Negated :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Type] [data-id negated type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/DataId :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Negated :crucible.generated.ap-northeast-1.AWS.WAF.Rule.Predicate/Type] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MaximumPercent (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MinimumHealthyPercent (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.Service)
(clojure.core/defn ->DeploymentConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration" [& [maximum-percent minimum-healthy-percent]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MaximumPercent :crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MinimumHealthyPercent] [maximum-percent minimum-healthy-percent])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration m__1575651__auto__))))))
(clojure.core/defn map->DeploymentConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration" [{:keys [maximum-percent minimum-healthy-percent]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MaximumPercent :crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MinimumHealthyPercent] [maximum-percent minimum-healthy-percent])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MaximumPercent :crucible.generated.ap-northeast-1.AWS.ECS.Service.DeploymentConfiguration/MinimumHealthyPercent]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.OutputArtifact/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->OutputArtifact "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact" [& [name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.OutputArtifact/Name] [name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact m__1575651__auto__))))))
(clojure.core/defn map->OutputArtifact "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact" [{:keys [name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.OutputArtifact/Name] [name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.OutputArtifact)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/OutputArtifact (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.OutputArtifact/Name] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneConfig/Comment (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HostedZone)
(clojure.core/defn ->HostedZoneConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig" [& [comment]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneConfig/Comment] [comment])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig m__1575651__auto__))))))
(clojure.core/defn map->HostedZoneConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig" [{:keys [comment]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneConfig/Comment] [comment])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.HostedZoneConfig/Comment]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Values (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM.Association)
(clojure.core/defn ->Target "Constructor for a :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target" [& [key values]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Key :crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Values] [key values])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target m__1575651__auto__))))))
(clojure.core/defn map->Target "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target" [{:keys [key values]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Key :crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Values] [key values])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM.Association.Target)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Key :crucible.generated.ap-northeast-1.AWS.SSM.Association.Target/Values] :opt []))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->NotificationFilter "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter" [& [s-3-key]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationFilter/S3Key] [s-3-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter m__1575651__auto__))))))
(clojure.core/defn map->NotificationFilter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter" [{:keys [s-3-key]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationFilter/S3Key] [s-3-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationFilter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationFilter (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NotificationFilter/S3Key] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/EntityUrlTemplate (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ExecutionUrlTemplate (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/RevisionUrlTemplate (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ThirdPartyConfigurationUrl (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType)
(clojure.core/defn ->Settings "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings" [& [entity-url-template execution-url-template revision-url-template third-party-configuration-url]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/EntityUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ExecutionUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/RevisionUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ThirdPartyConfigurationUrl] [entity-url-template execution-url-template revision-url-template third-party-configuration-url])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings m__1575651__auto__))))))
(clojure.core/defn map->Settings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings" [{:keys [entity-url-template execution-url-template revision-url-template third-party-configuration-url]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/EntityUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ExecutionUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/RevisionUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ThirdPartyConfigurationUrl] [entity-url-template execution-url-template revision-url-template third-party-configuration-url])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/EntityUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ExecutionUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/RevisionUrlTemplate :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.Settings/ThirdPartyConfigurationUrl]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/DBSecurityGroupMemberships (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/OptionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/VpcSecurityGroupMemberships (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup)
(clojure.core/defn ->OptionConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration" [& [option-name db-security-group-memberships option-settings port vpc-security-group-memberships]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/OptionName :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/DBSecurityGroupMemberships :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/OptionSettings :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/Port :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/VpcSecurityGroupMemberships] [option-name db-security-group-memberships option-settings port vpc-security-group-memberships])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration m__1575651__auto__))))))
(clojure.core/defn map->OptionConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration" [{:keys [option-name db-security-group-memberships option-settings port vpc-security-group-memberships]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/OptionName :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/DBSecurityGroupMemberships :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/OptionSettings :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/Port :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/VpcSecurityGroupMemberships] [option-name db-security-group-memberships option-settings port vpc-security-group-memberships])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/OptionName] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/DBSecurityGroupMemberships :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/OptionSettings :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/Port :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionConfiguration/VpcSecurityGroupMemberships]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig/VolumesPerInstance (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig)
(clojure.core/defn ->EbsBlockDeviceConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig" [& [volume-specification volumes-per-instance]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig/VolumeSpecification :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig/VolumesPerInstance] [volume-specification volumes-per-instance])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig m__1575651__auto__))))))
(clojure.core/defn map->EbsBlockDeviceConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig" [{:keys [volume-specification volumes-per-instance]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig/VolumeSpecification :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig/VolumesPerInstance] [volume-specification volumes-per-instance])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsBlockDeviceConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig/VolumeSpecification] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsBlockDeviceConfig/VolumesPerInstance]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/DNSName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/EvaluateTargetHealth (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/HostedZoneId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup)
(clojure.core/defn ->AliasTarget "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget" [& [dns-name hosted-zone-id evaluate-target-health]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/DNSName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/EvaluateTargetHealth] [dns-name hosted-zone-id evaluate-target-health])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget m__1575651__auto__))))))
(clojure.core/defn map->AliasTarget "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget" [{:keys [dns-name hosted-zone-id evaluate-target-health]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/DNSName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/EvaluateTargetHealth] [dns-name hosted-zone-id evaluate-target-health])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/AliasTarget (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/DNSName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/HostedZoneId] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.AliasTarget/EvaluateTargetHealth]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/BidPrice (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Configurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Configuration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Market (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->InstanceGroupConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig" [& [instance-count instance-type bid-price configurations ebs-configuration market name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/BidPrice :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/EbsConfiguration :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Market :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Name] [instance-count instance-type bid-price configurations ebs-configuration market name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig m__1575651__auto__))))))
(clojure.core/defn map->InstanceGroupConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig" [{:keys [instance-count instance-type bid-price configurations ebs-configuration market name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/BidPrice :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/EbsConfiguration :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Market :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Name] [instance-count instance-type bid-price configurations ebs-configuration market name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/InstanceGroupConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/InstanceType] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/BidPrice :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/EbsConfiguration :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Market :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.InstanceGroupConfig/Name]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/RevisionType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup)
(clojure.core/defn ->Revision "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision" [& [git-hub-location revision-type s-3-location]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/GitHubLocation :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/RevisionType :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/S3Location] [git-hub-location revision-type s-3-location])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision m__1575651__auto__))))))
(clojure.core/defn map->Revision "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision" [{:keys [git-hub-location revision-type s-3-location]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/GitHubLocation :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/RevisionType :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/S3Location] [git-hub-location revision-type s-3-location])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Revision (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/GitHubLocation :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/RevisionType :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Revision/S3Location]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/Hostname (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/IpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->HostEntry "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry" [& [hostname ip-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/Hostname :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/IpAddress] [hostname ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry m__1575651__auto__))))))
(clojure.core/defn map->HostEntry "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry" [{:keys [hostname ip-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/Hostname :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/IpAddress] [hostname ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostEntry (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/Hostname :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostEntry/IpAddress] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Prefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Status (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->ReplicationRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule" [& [destination prefix status id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Destination :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Prefix :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Status :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Id] [destination prefix status id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule m__1575651__auto__))))))
(clojure.core/defn map->ReplicationRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule" [{:keys [destination prefix status id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Destination :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Prefix :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Status :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Id] [destination prefix status id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Destination :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Prefix :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Status] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationRule/Id]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/Reason (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/StageName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->StageTransition "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition" [& [reason stage-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/Reason :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/StageName] [reason stage-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition m__1575651__auto__))))))
(clojure.core/defn map->StageTransition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition" [{:keys [reason stage-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/Reason :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/StageName] [reason stage-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/Reason :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageTransition/StageName] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/AssociationParameters (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/AssociationParameter) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/DocumentName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->SsmAssociation "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation" [& [document-name association-parameters]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/DocumentName :crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/AssociationParameters] [document-name association-parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation m__1575651__auto__))))))
(clojure.core/defn map->SsmAssociation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation" [{:keys [document-name association-parameters]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/DocumentName :crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/AssociationParameters] [document-name association-parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/DocumentName] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.SsmAssociation/AssociationParameters]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/EBSEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain)
(clojure.core/defn ->EBSOptions "Constructor for a :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions" [& [ebs-enabled iops volume-size volume-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/EBSEnabled :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/Iops :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeSize :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeType] [ebs-enabled iops volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions m__1575651__auto__))))))
(clojure.core/defn map->EBSOptions "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions" [{:keys [ebs-enabled iops volume-size volume-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/EBSEnabled :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/Iops :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeSize :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeType] [ebs-enabled iops volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/EBSEnabled :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/Iops :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeSize :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.EBSOptions/VolumeType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Data (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet)
(clojure.core/defn ->FieldToMatch "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch" [& [type data]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/defn map->FieldToMatch "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch" [{:keys [type data]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/FieldToMatch (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Type] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet.FieldToMatch/Data]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/GroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->Placement "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement" [& [availability-zone group-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/GroupName] [availability-zone group-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement m__1575651__auto__))))))
(clojure.core/defn map->Placement "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement" [{:keys [availability-zone group-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/GroupName] [availability-zone group-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Placement (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Placement/GroupName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/ContinentCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/CountryCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/SubdivisionCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup)
(clojure.core/defn ->GeoLocation "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation" [& [continent-code country-code subdivision-code]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/ContinentCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/CountryCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/SubdivisionCode] [continent-code country-code subdivision-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation m__1575651__auto__))))))
(clojure.core/defn map->GeoLocation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation" [{:keys [continent-code country-code subdivision-code]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/ContinentCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/CountryCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/SubdivisionCode] [continent-code country-code subdivision-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/GeoLocation (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/ContinentCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/CountryCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.GeoLocation/SubdivisionCode]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.S3OriginConfig/OriginAccessIdentity (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->S3OriginConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig" [& [origin-access-identity]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.S3OriginConfig/OriginAccessIdentity] [origin-access-identity])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig m__1575651__auto__))))))
(clojure.core/defn map->S3OriginConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig" [{:keys [origin-access-identity]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.S3OriginConfig/OriginAccessIdentity] [origin-access-identity])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.S3OriginConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/S3OriginConfig (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.S3OriginConfig/OriginAccessIdentity]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/DeviceName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/VirtualName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->BlockDeviceMapping "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping" [& [device-name ebs no-device virtual-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/DeviceName :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping m__1575651__auto__))))))
(clojure.core/defn map->BlockDeviceMapping "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping" [{:keys [device-name ebs no-device virtual-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/DeviceName :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/DeviceName] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.EC2.Instance.BlockDeviceMapping/VirtualName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/Locations (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/RestrictionType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->GeoRestriction "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction" [& [restriction-type locations]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/RestrictionType :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/Locations] [restriction-type locations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction m__1575651__auto__))))))
(clojure.core/defn map->GeoRestriction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction" [{:keys [restriction-type locations]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/RestrictionType :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/Locations] [restriction-type locations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/GeoRestriction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/RestrictionType] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.GeoRestriction/Locations]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Limit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Offset (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Period (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan)
(clojure.core/defn ->QuotaSettings "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings" [& [limit offset period]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Limit :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Offset :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Period] [limit offset period])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings m__1575651__auto__))))))
(clojure.core/defn map->QuotaSettings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings" [{:keys [limit offset period]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Limit :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Offset :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Period] [limit offset period])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/QuotaSettings (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Limit :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Offset :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan.QuotaSettings/Period]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/StorageClass (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionDate (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionInDays (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->Transition "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition" [& [storage-class transition-date transition-in-days]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/StorageClass :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionDate :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionInDays] [storage-class transition-date transition-in-days])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition m__1575651__auto__))))))
(clojure.core/defn map->Transition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition" [{:keys [storage-class transition-date transition-in-days]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/StorageClass :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionDate :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionInDays] [storage-class transition-date transition-in-days])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Transition (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/StorageClass] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionDate :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Transition/TransitionInDays]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricNamespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter)
(clojure.core/defn ->MetricTransformation "Constructor for a :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation" [& [metric-name metric-namespace metric-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricName :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricNamespace :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricValue] [metric-name metric-namespace metric-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation m__1575651__auto__))))))
(clojure.core/defn map->MetricTransformation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation" [{:keys [metric-name metric-namespace metric-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricName :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricNamespace :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricValue] [metric-name metric-namespace metric-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricName :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricNamespace :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter.MetricTransformation/MetricValue] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.Thing.AttributePayload/Attributes (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.Thing)
(clojure.core/defn ->AttributePayload "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload" [& [attributes]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Thing.AttributePayload/Attributes] [attributes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload m__1575651__auto__))))))
(clojure.core/defn map->AttributePayload "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload" [{:keys [attributes]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Thing.AttributePayload/Attributes] [attributes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.Thing.AttributePayload)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.Thing.AttributePayload/Attributes]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/BucketARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/CompressionFormat (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/Prefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/RoleARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->S3DestinationConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration" [& [bucket-arn buffering-hints compression-format prefix role-arn cloud-watch-logging-options encryption-configuration]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/BucketARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/BufferingHints :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/CompressionFormat :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/Prefix :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/CloudWatchLoggingOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/EncryptionConfiguration] [bucket-arn buffering-hints compression-format prefix role-arn cloud-watch-logging-options encryption-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration m__1575651__auto__))))))
(clojure.core/defn map->S3DestinationConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration" [{:keys [bucket-arn buffering-hints compression-format prefix role-arn cloud-watch-logging-options encryption-configuration]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/BucketARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/BufferingHints :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/CompressionFormat :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/Prefix :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/CloudWatchLoggingOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/EncryptionConfiguration] [bucket-arn buffering-hints compression-format prefix role-arn cloud-watch-logging-options encryption-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/BucketARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/BufferingHints :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/CompressionFormat :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/Prefix :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/RoleARN] :opt [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/CloudWatchLoggingOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.S3DestinationConfiguration/EncryptionConfiguration]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Comment (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/TTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/SetIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Weight (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HealthCheckId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/ResourceRecords (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Failover (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Region (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup)
(clojure.core/defn ->RecordSet "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet" [& [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Name :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Type :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/AliasTarget :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Failover :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/GeoLocation :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HealthCheckId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Region :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/ResourceRecords :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/SetIdentifier :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/TTL :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Weight] [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet m__1575651__auto__))))))
(clojure.core/defn map->RecordSet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet" [{:keys [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Name :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Type :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/AliasTarget :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Failover :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/GeoLocation :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HealthCheckId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Region :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/ResourceRecords :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/SetIdentifier :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/TTL :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Weight] [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Name :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Type] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/AliasTarget :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Failover :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/GeoLocation :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HealthCheckId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Region :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/ResourceRecords :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/SetIdentifier :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/TTL :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup.RecordSet/Weight]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Value (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig)
(clojure.core/defn ->MinimumHealthyHosts "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts" [& [type value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Value] [type value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts m__1575651__auto__))))))
(clojure.core/defn map->MinimumHealthyHosts "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts" [{:keys [type value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Value] [type value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig.MinimumHealthyHosts/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Key (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Queryable (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Required (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Secret (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType)
(clojure.core/defn ->ConfigurationProperties "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties" [& [key name required secret description queryable type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Key :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Required :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Secret :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Description :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Queryable :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Type] [key name required secret description queryable type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties m__1575651__auto__))))))
(clojure.core/defn map->ConfigurationProperties "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties" [{:keys [key name required secret description queryable type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Key :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Required :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Secret :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Description :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Queryable :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Type] [key name required secret description queryable type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Key :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Required :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Secret] :opt [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Description :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Queryable :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType.ConfigurationProperties/Type]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCachingMinTTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCode (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponseCode (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponsePagePath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->CustomErrorResponse "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse" [& [error-code error-caching-min-ttl response-code response-page-path]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCode :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCachingMinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponseCode :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponsePagePath] [error-code error-caching-min-ttl response-code response-page-path])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse m__1575651__auto__))))))
(clojure.core/defn map->CustomErrorResponse "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse" [{:keys [error-code error-caching-min-ttl response-code response-page-path]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCode :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCachingMinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponseCode :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponsePagePath] [error-code error-caching-min-ttl response-code response-page-path])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomErrorResponse (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCode] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ErrorCachingMinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponseCode :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomErrorResponse/ResponsePagePath]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/DeviceName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/NoDevice (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/VirtualName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance)
(clojure.core/defn ->BlockDeviceMapping "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping" [& [device-name ebs no-device virtual-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/DeviceName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping m__1575651__auto__))))))
(clojure.core/defn map->BlockDeviceMapping "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping" [{:keys [device-name ebs no-device virtual-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/DeviceName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/DeviceName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance.BlockDeviceMapping/VirtualName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel.ConfigSnapshotDeliveryProperties/DeliveryFrequency (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel)
(clojure.core/defn ->ConfigSnapshotDeliveryProperties "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties" [& [delivery-frequency]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel.ConfigSnapshotDeliveryProperties/DeliveryFrequency] [delivery-frequency])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties m__1575651__auto__))))))
(clojure.core/defn map->ConfigSnapshotDeliveryProperties "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties" [{:keys [delivery-frequency]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel.ConfigSnapshotDeliveryProperties/DeliveryFrequency] [delivery-frequency])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel.ConfigSnapshotDeliveryProperties)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel.ConfigSnapshotDeliveryProperties/DeliveryFrequency]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/AllSupported (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/IncludeGlobalResourceTypes (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/ResourceTypes (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder)
(clojure.core/defn ->RecordingGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup" [& [all-supported include-global-resource-types resource-types]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/AllSupported :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/IncludeGlobalResourceTypes :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/ResourceTypes] [all-supported include-global-resource-types resource-types])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup m__1575651__auto__))))))
(clojure.core/defn map->RecordingGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup" [{:keys [all-supported include-global-resource-types resource-types]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/AllSupported :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/IncludeGlobalResourceTypes :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/ResourceTypes] [all-supported include-global-resource-types resource-types])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/AllSupported :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/IncludeGlobalResourceTypes :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder.RecordingGroup/ResourceTypes]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Args (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Path (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->ScriptBootstrapActionConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig" [& [path args]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Path :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Args] [path args])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig m__1575651__auto__))))))
(clojure.core/defn map->ScriptBootstrapActionConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig" [{:keys [path args]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Path :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Args] [path args])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ScriptBootstrapActionConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Path] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.ScriptBootstrapActionConfig/Args]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/MountPoint (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/NumberOfDisks (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/RaidLevel (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Size (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer)
(clojure.core/defn ->VolumeConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration" [& [iops mount-point number-of-disks raid-level size volume-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Iops :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/MountPoint :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/NumberOfDisks :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/RaidLevel :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Size :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/VolumeType] [iops mount-point number-of-disks raid-level size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration m__1575651__auto__))))))
(clojure.core/defn map->VolumeConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration" [{:keys [iops mount-point number-of-disks raid-level size volume-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Iops :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/MountPoint :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/NumberOfDisks :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/RaidLevel :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Size :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/VolumeType] [iops mount-point number-of-disks raid-level size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Iops :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/MountPoint :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/NumberOfDisks :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/RaidLevel :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/Size :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.VolumeConfiguration/VolumeType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup)
(clojure.core/defn ->OptionSetting "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting" [& [name value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Name :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting m__1575651__auto__))))))
(clojure.core/defn map->OptionSetting "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting" [{:keys [name value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Name :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionSetting (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Name :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup.OptionSetting/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/BundleType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/ETag (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup)
(clojure.core/defn ->S3Location "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location" [& [bucket bundle-type key e-tag version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/BundleType :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/ETag :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Version] [bucket bundle-type key e-tag version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location m__1575651__auto__))))))
(clojure.core/defn map->S3Location "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location" [{:keys [bucket bundle-type key e-tag version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/BundleType :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/ETag :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Version] [bucket bundle-type key e-tag version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/S3Location (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/BundleType :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Key] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/ETag :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.S3Location/Version]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.core/defn ->AttributeDefinition "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition" [& [attribute-name attribute-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeType] [attribute-name attribute-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition m__1575651__auto__))))))
(clojure.core/defn map->AttributeDefinition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition" [{:keys [attribute-name attribute-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeType] [attribute-name attribute-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.AttributeDefinition/AttributeType] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->FilterRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule" [& [name value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Name :crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule m__1575651__auto__))))))
(clojure.core/defn map->FilterRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule" [{:keys [name value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Name :crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Value] [name value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/FilterRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Name :crucible.generated.ap-northeast-1.AWS.S3.Bucket.FilterRule/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup)
(clojure.core/defn ->TargetGroupAttribute "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Key :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute m__1575651__auto__))))))
(clojure.core/defn map->TargetGroupAttribute "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Key :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Key :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup.TargetGroupAttribute/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack)
(clojure.core/defn ->StackConfigurationManager "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager" [& [name version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Version] [name version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager m__1575651__auto__))))))
(clojure.core/defn map->StackConfigurationManager "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager" [{:keys [name version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Version] [name version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/StackConfigurationManager (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.StackConfigurationManager/Version]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL.WafAction/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.WebACL)
(clojure.core/defn ->WafAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction" [& [type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL.WafAction/Type] [type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction m__1575651__auto__))))))
(clojure.core/defn map->WafAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction" [{:keys [type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL.WafAction/Type] [type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.WebACL.WafAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/WafAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL.WafAction/Type] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/PrimaryAvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaAvailabilityZones (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/Slots (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup)
(clojure.core/defn ->NodeGroupConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration" [& [primary-availability-zone replica-availability-zones replica-count slots]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/PrimaryAvailabilityZone :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaAvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaCount :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/Slots] [primary-availability-zone replica-availability-zones replica-count slots])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration m__1575651__auto__))))))
(clojure.core/defn map->NodeGroupConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration" [{:keys [primary-availability-zone replica-availability-zones replica-count slots]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/PrimaryAvailabilityZone :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaAvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaCount :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/Slots] [primary-availability-zone replica-availability-zones replica-count slots])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/PrimaryAvailabilityZone :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaAvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/ReplicaCount :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup.NodeGroupConfiguration/Slots]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostVolumeProperties/SourcePath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->HostVolumeProperties "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties" [& [source-path]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostVolumeProperties/SourcePath] [source-path])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties m__1575651__auto__))))))
(clojure.core/defn map->HostVolumeProperties "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties" [{:keys [source-path]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostVolumeProperties/SourcePath] [source-path])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostVolumeProperties)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/HostVolumeProperties (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.HostVolumeProperties/SourcePath]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/HttpErrorCodeReturnedEquals (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/KeyPrefixEquals (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->RoutingRuleCondition "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition" [& [http-error-code-returned-equals key-prefix-equals]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/HttpErrorCodeReturnedEquals :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/KeyPrefixEquals] [http-error-code-returned-equals key-prefix-equals])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition m__1575651__auto__))))))
(clojure.core/defn map->RoutingRuleCondition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition" [{:keys [http-error-code-returned-equals key-prefix-equals]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/HttpErrorCodeReturnedEquals :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/KeyPrefixEquals] [http-error-code-returned-equals key-prefix-equals])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RoutingRuleCondition (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/HttpErrorCodeReturnedEquals :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RoutingRuleCondition/KeyPrefixEquals]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FailureThreshold (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FullyQualifiedDomainName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/IPAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/RequestInterval (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/ResourcePath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/SearchString (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck)
(clojure.core/defn ->HealthCheckConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig" [& [type failure-threshold fully-qualified-domain-name ip-address port request-interval resource-path search-string]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Type :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FailureThreshold :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FullyQualifiedDomainName :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/IPAddress :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Port :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/RequestInterval :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/ResourcePath :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/SearchString] [type failure-threshold fully-qualified-domain-name ip-address port request-interval resource-path search-string])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig m__1575651__auto__))))))
(clojure.core/defn map->HealthCheckConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig" [{:keys [type failure-threshold fully-qualified-domain-name ip-address port request-interval resource-path search-string]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Type :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FailureThreshold :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FullyQualifiedDomainName :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/IPAddress :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Port :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/RequestInterval :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/ResourcePath :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/SearchString] [type failure-threshold fully-qualified-domain-name ip-address port request-interval resource-path search-string])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Type] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FailureThreshold :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/FullyQualifiedDomainName :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/IPAddress :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/Port :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/RequestInterval :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/ResourcePath :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck.HealthCheckConfig/SearchString]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KernelId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/ImageId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SecurityGroups) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/EbsOptimized (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KeyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SpotPrice (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/WeightedCapacity (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/BlockDeviceMappings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/BlockDeviceMappings) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/RamdiskId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/UserData (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/NetworkInterfaces (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/NetworkInterfaces) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->LaunchSpecifications "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications" [& [image-id instance-type block-device-mappings ebs-optimized iam-instance-profile kernel-id key-name monitoring network-interfaces placement ramdisk-id security-groups spot-price subnet-id user-data weighted-capacity]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/ImageId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/InstanceType :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/EbsOptimized :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KernelId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KeyName :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/Monitoring :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/NetworkInterfaces :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/Placement :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/RamdiskId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SpotPrice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/UserData :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/WeightedCapacity] [image-id instance-type block-device-mappings ebs-optimized iam-instance-profile kernel-id key-name monitoring network-interfaces placement ramdisk-id security-groups spot-price subnet-id user-data weighted-capacity])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications m__1575651__auto__))))))
(clojure.core/defn map->LaunchSpecifications "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications" [{:keys [image-id instance-type block-device-mappings ebs-optimized iam-instance-profile kernel-id key-name monitoring network-interfaces placement ramdisk-id security-groups spot-price subnet-id user-data weighted-capacity]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/ImageId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/InstanceType :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/EbsOptimized :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KernelId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KeyName :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/Monitoring :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/NetworkInterfaces :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/Placement :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/RamdiskId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SpotPrice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/UserData :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/WeightedCapacity] [image-id instance-type block-device-mappings ebs-optimized iam-instance-profile kernel-id key-name monitoring network-interfaces placement ramdisk-id security-groups spot-price subnet-id user-data weighted-capacity])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/LaunchSpecifications (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/ImageId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/InstanceType] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/EbsOptimized :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KernelId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/KeyName :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/Monitoring :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/NetworkInterfaces :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/Placement :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/RamdiskId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SpotPrice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/UserData :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.LaunchSpecifications/WeightedCapacity]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/ZoneAwarenessEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain)
(clojure.core/defn ->ElasticsearchClusterConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig" [& [dedicated-master-count dedicated-master-enabled dedicated-master-type instance-count instance-type zone-awareness-enabled]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterCount :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterEnabled :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterType :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/ZoneAwarenessEnabled] [dedicated-master-count dedicated-master-enabled dedicated-master-type instance-count instance-type zone-awareness-enabled])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig m__1575651__auto__))))))
(clojure.core/defn map->ElasticsearchClusterConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig" [{:keys [dedicated-master-count dedicated-master-enabled dedicated-master-type instance-count instance-type zone-awareness-enabled]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterCount :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterEnabled :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterType :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/ZoneAwarenessEnabled] [dedicated-master-count dedicated-master-enabled dedicated-master-type instance-count instance-type zone-awareness-enabled])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterCount :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterEnabled :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/DedicatedMasterType :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.ElasticsearchClusterConfig/ZoneAwarenessEnabled]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPSPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginProtocolPolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginSSLProtocols (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->CustomOriginConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig" [& [origin-protocol-policy http-port https-port origin-ssl-protocols]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginProtocolPolicy :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPPort :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPSPort :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginSSLProtocols] [origin-protocol-policy http-port https-port origin-ssl-protocols])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig m__1575651__auto__))))))
(clojure.core/defn map->CustomOriginConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig" [{:keys [origin-protocol-policy http-port https-port origin-ssl-protocols]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginProtocolPolicy :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPPort :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPSPort :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginSSLProtocols] [origin-protocol-policy http-port https-port origin-ssl-protocols])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CustomOriginConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginProtocolPolicy] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPPort :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/HTTPSPort :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CustomOriginConfig/OriginSSLProtocols]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup)
(clojure.core/defn ->OnPremisesInstanceTagFilter "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter" [& [key type value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Value] [key type value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter m__1575651__auto__))))))
(clojure.core/defn map->OnPremisesInstanceTagFilter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter" [{:keys [key type value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Value] [key type value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.OnPremisesInstanceTagFilter/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/SizeInGB (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->VolumeSpecification "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification" [& [size-in-gb volume-type iops]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/SizeInGB :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/VolumeType :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/Iops] [size-in-gb volume-type iops])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification m__1575651__auto__))))))
(clojure.core/defn map->VolumeSpecification "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification" [{:keys [size-in-gb volume-type iops]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/SizeInGB :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/VolumeType :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/Iops] [size-in-gb volume-type iops])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VolumeSpecification (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/SizeInGB :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/VolumeType] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.VolumeSpecification/Iops]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/AlarmName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateReason (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->CloudwatchAlarmAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction" [& [alarm-name role-arn state-reason state-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/AlarmName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateReason :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateValue] [alarm-name role-arn state-reason state-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction m__1575651__auto__))))))
(clojure.core/defn map->CloudwatchAlarmAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction" [{:keys [alarm-name role-arn state-reason state-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/AlarmName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateReason :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateValue] [alarm-name role-arn state-reason state-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchAlarmAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/AlarmName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateReason :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchAlarmAction/StateValue] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Ip (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack)
(clojure.core/defn ->ElasticIp "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp" [& [ip name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Ip :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Name] [ip name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp m__1575651__auto__))))))
(clojure.core/defn map->ElasticIp "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp" [{:keys [ip name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Ip :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Name] [ip name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Ip] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ElasticIp/Name]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->BlockerDeclaration "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration" [& [name type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Type] [name type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration m__1575651__auto__))))))
(clojure.core/defn map->BlockerDeclaration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration" [{:keys [name type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Type] [name type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/BlockerDeclaration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.BlockerDeclaration/Type] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/ContainerPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/HostPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->PortMapping "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping" [& [container-port host-port protocol]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/ContainerPort :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/HostPort :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/Protocol] [container-port host-port protocol])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping m__1575651__auto__))))))
(clojure.core/defn map->PortMapping "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping" [{:keys [container-port host-port protocol]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/ContainerPort :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/HostPort :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/Protocol] [container-port host-port protocol])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/PortMapping (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/ContainerPort :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/HostPort :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.PortMapping/Protocol]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/IntervalInSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/SizeInMBs (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->ElasticsearchBufferingHints "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints" [& [interval-in-seconds size-in-m-bs]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/IntervalInSeconds :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/SizeInMBs] [interval-in-seconds size-in-m-bs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints m__1575651__auto__))))))
(clojure.core/defn map->ElasticsearchBufferingHints "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints" [{:keys [interval-in-seconds size-in-m-bs]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/IntervalInSeconds :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/SizeInMBs] [interval-in-seconds size-in-m-bs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchBufferingHints (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/IntervalInSeconds :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchBufferingHints/SizeInMBs] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Arn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Input (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/InputPath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Events.Rule)
(clojure.core/defn ->Target "Constructor for a :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target" [& [arn id input input-path]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Arn :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Id :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Input :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/InputPath] [arn id input input-path])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target m__1575651__auto__))))))
(clojure.core/defn map->Target "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target" [{:keys [arn id input input-path]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Arn :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Id :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Input :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/InputPath] [arn id input input-path])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Events.Rule.Target)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Arn :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Id] :opt [:crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/Input :crucible.generated.ap-northeast-1.AWS.Events.Rule.Target/InputPath]))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer)
(clojure.core/defn ->LifecycleEventConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration" [& [shutdown-event-configuration]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LifecycleEventConfiguration/ShutdownEventConfiguration] [shutdown-event-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration m__1575651__auto__))))))
(clojure.core/defn map->LifecycleEventConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration" [{:keys [shutdown-event-configuration]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LifecycleEventConfiguration/ShutdownEventConfiguration] [shutdown-event-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LifecycleEventConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LifecycleEventConfiguration/ShutdownEventConfiguration]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.IamInstanceProfile/Arn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->IamInstanceProfile "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile" [& [arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.IamInstanceProfile/Arn] [arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile m__1575651__auto__))))))
(clojure.core/defn map->IamInstanceProfile "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile" [{:keys [arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.IamInstanceProfile/Arn] [arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.IamInstanceProfile)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/IamInstanceProfile (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.IamInstanceProfile/Arn]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Step)
(clojure.core/defn ->KeyValue "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Key :crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue m__1575651__auto__))))))
(clojure.core/defn map->KeyValue "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Key :crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step/KeyValue (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Key :crucible.generated.ap-northeast-1.AWS.EMR.Step.KeyValue/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Certificate (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Chain (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/PrivateKey (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App)
(clojure.core/defn ->SslConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration" [& [certificate chain private-key]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Certificate :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Chain :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/PrivateKey] [certificate chain private-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration m__1575651__auto__))))))
(clojure.core/defn map->SslConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration" [{:keys [certificate chain private-key]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Certificate :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Chain :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/PrivateKey] [certificate chain private-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Certificate :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/Chain :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.SslConfiguration/PrivateKey]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/ReadCapacityUnits (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/WriteCapacityUnits (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.core/defn ->ProvisionedThroughput "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput" [& [read-capacity-units write-capacity-units]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/ReadCapacityUnits :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/WriteCapacityUnits] [read-capacity-units write-capacity-units])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput m__1575651__auto__))))))
(clojure.core/defn map->ProvisionedThroughput "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput" [{:keys [read-capacity-units write-capacity-units]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/ReadCapacityUnits :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/WriteCapacityUnits] [read-capacity-units write-capacity-units])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/ReadCapacityUnits :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.ProvisionedThroughput/WriteCapacityUnits] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/NotificationTypes (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/TopicARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup)
(clojure.core/defn ->NotificationConfigurations "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations" [& [topic-arn notification-types]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/TopicARN :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/NotificationTypes] [topic-arn notification-types])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations m__1575651__auto__))))))
(clojure.core/defn map->NotificationConfigurations "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations" [{:keys [topic-arn notification-types]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/TopicARN :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/NotificationTypes] [topic-arn notification-types])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/TopicARN] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup.NotificationConfigurations/NotificationTypes]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/SubnetIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD)
(clojure.core/defn ->VpcSettings "Constructor for a :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings" [& [subnet-ids vpc-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/SubnetIds :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/VpcId] [subnet-ids vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings m__1575651__auto__))))))
(clojure.core/defn map->VpcSettings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings" [{:keys [subnet-ids vpc-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/SubnetIds :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/VpcId] [subnet-ids vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/SubnetIds :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD.VpcSettings/VpcId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Data (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet)
(clojure.core/defn ->FieldToMatch "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch" [& [type data]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/defn map->FieldToMatch "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch" [{:keys [type data]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/FieldToMatch (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Type] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet.FieldToMatch/Data]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Role (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Rules (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/ReplicationRule) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->ReplicationConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration" [& [role rules]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Role :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Rules] [role rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration m__1575651__auto__))))))
(clojure.core/defn map->ReplicationConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration" [{:keys [role rules]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Role :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Rules] [role rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Role :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationConfiguration/Rules] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Timeout (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->ConnectionDrainingPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy" [& [enabled timeout]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Enabled :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Timeout] [enabled timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy m__1575651__auto__))))))
(clojure.core/defn map->ConnectionDrainingPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy" [{:keys [enabled timeout]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Enabled :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Timeout] [enabled timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Enabled] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.ConnectionDrainingPolicy/Timeout]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.InputArtifact/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->InputArtifact "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact" [& [name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.InputArtifact/Name] [name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact m__1575651__auto__))))))
(clojure.core/defn map->InputArtifact "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact" [{:keys [name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.InputArtifact/Name] [name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.InputArtifact)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/InputArtifact (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.InputArtifact/Name] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/SubnetIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD)
(clojure.core/defn ->VpcSettings "Constructor for a :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings" [& [subnet-ids vpc-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/SubnetIds :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/VpcId] [subnet-ids vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings m__1575651__auto__))))))
(clojure.core/defn map->VpcSettings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings" [{:keys [subnet-ids vpc-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/SubnetIds :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/VpcId] [subnet-ids vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/SubnetIds :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD.VpcSettings/VpcId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/PartitionKey (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/StreamName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->KinesisAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction" [& [role-arn stream-name partition-key]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/StreamName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/PartitionKey] [role-arn stream-name partition-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction m__1575651__auto__))))))
(clojure.core/defn map->KinesisAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction" [{:keys [role-arn stream-name partition-key]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/StreamName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/PartitionKey] [role-arn stream-name partition-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/KinesisAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/StreamName] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.KinesisAction/PartitionKey]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsBlockDeviceConfigs (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsBlockDeviceConfig) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsOptimized (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig)
(clojure.core/defn ->EbsConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration" [& [ebs-block-device-configs ebs-optimized]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsBlockDeviceConfigs :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsOptimized] [ebs-block-device-configs ebs-optimized])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration m__1575651__auto__))))))
(clojure.core/defn map->EbsConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration" [{:keys [ebs-block-device-configs ebs-optimized]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsBlockDeviceConfigs :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsOptimized] [ebs-block-device-configs ebs-optimized])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsBlockDeviceConfigs :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.EbsConfiguration/EbsOptimized]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SecurityGroupIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SubnetIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Function)
(clojure.core/defn ->VpcConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig" [& [security-group-ids subnet-ids]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SubnetIds] [security-group-ids subnet-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig m__1575651__auto__))))))
(clojure.core/defn map->VpcConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig" [{:keys [security-group-ids subnet-ids]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SubnetIds] [security-group-ids subnet-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.Lambda.Function.VpcConfig/SubnetIds] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/Password (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/PasswordResetRequired (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.User)
(clojure.core/defn ->LoginProfile "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile" [& [password password-reset-required]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/Password :crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/PasswordResetRequired] [password password-reset-required])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile m__1575651__auto__))))))
(clojure.core/defn map->LoginProfile "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile" [{:keys [password password-reset-required]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/Password :crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/PasswordResetRequired] [password password-reset-required])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/Password] :opt [:crucible.generated.ap-northeast-1.AWS.IAM.User.LoginProfile/PasswordResetRequired]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerSecurityOptions (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/VolumesFrom (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/VolumeFrom) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Cpu (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/PortMappings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/PortMapping) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/User (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Privileged (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Hostname (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DisableNetworking (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Environment (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/KeyValuePair) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Command (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/EntryPoint (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Memory (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Ulimits (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Ulimit) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ReadonlyRootFilesystem (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ExtraHosts (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/HostEntry) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Image (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerLabels (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Essential (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/WorkingDirectory (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MountPoints (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MountPoint) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsServers (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MemoryReservation (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Links (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsSearchDomains (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->ContainerDefinition "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition" [& [command cpu disable-networking dns-search-domains dns-servers docker-labels docker-security-options entry-point environment essential extra-hosts hostname image links log-configuration memory memory-reservation mount-points name port-mappings privileged readonly-root-filesystem ulimits user volumes-from working-directory]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Command :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Cpu :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DisableNetworking :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsSearchDomains :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsServers :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerLabels :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerSecurityOptions :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/EntryPoint :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Environment :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Essential :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ExtraHosts :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Hostname :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Image :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Links :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/LogConfiguration :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Memory :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MemoryReservation :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MountPoints :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/PortMappings :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Privileged :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ReadonlyRootFilesystem :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Ulimits :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/User :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/VolumesFrom :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/WorkingDirectory] [command cpu disable-networking dns-search-domains dns-servers docker-labels docker-security-options entry-point environment essential extra-hosts hostname image links log-configuration memory memory-reservation mount-points name port-mappings privileged readonly-root-filesystem ulimits user volumes-from working-directory])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition m__1575651__auto__))))))
(clojure.core/defn map->ContainerDefinition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition" [{:keys [command cpu disable-networking dns-search-domains dns-servers docker-labels docker-security-options entry-point environment essential extra-hosts hostname image links log-configuration memory memory-reservation mount-points name port-mappings privileged readonly-root-filesystem ulimits user volumes-from working-directory]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Command :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Cpu :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DisableNetworking :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsSearchDomains :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsServers :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerLabels :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerSecurityOptions :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/EntryPoint :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Environment :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Essential :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ExtraHosts :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Hostname :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Image :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Links :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/LogConfiguration :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Memory :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MemoryReservation :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MountPoints :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/PortMappings :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Privileged :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ReadonlyRootFilesystem :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Ulimits :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/User :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/VolumesFrom :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/WorkingDirectory] [command cpu disable-networking dns-search-domains dns-servers docker-labels docker-security-options entry-point environment essential extra-hosts hostname image links log-configuration memory memory-reservation mount-points name port-mappings privileged readonly-root-filesystem ulimits user volumes-from working-directory])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Command :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Cpu :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DisableNetworking :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsSearchDomains :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DnsServers :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerLabels :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/DockerSecurityOptions :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/EntryPoint :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Environment :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Essential :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ExtraHosts :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Hostname :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Image :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Links :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/LogConfiguration :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Memory :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MemoryReservation :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/MountPoints :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Name :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/PortMappings :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Privileged :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/ReadonlyRootFilesystem :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/Ulimits :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/User :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/VolumesFrom :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.ContainerDefinition/WorkingDirectory]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsBlockDeviceConfigs (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsBlockDeviceConfig) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsOptimized (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->EbsConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration" [& [ebs-block-device-configs ebs-optimized]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsBlockDeviceConfigs :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsOptimized] [ebs-block-device-configs ebs-optimized])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration m__1575651__auto__))))))
(clojure.core/defn map->EbsConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration" [{:keys [ebs-block-device-configs ebs-optimized]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsBlockDeviceConfigs :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsOptimized] [ebs-block-device-configs ebs-optimized])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/EbsConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsBlockDeviceConfigs :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.EbsConfiguration/EbsOptimized]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/StringValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline)
(clojure.core/defn ->ParameterValue "Constructor for a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue" [& [id string-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/Id :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/StringValue] [id string-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue m__1575651__auto__))))))
(clojure.core/defn map->ParameterValue "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue" [{:keys [id string-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/Id :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/StringValue] [id string-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/Id :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterValue/StringValue] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.SnapshotOptions/AutomatedSnapshotStartHour (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain)
(clojure.core/defn ->SnapshotOptions "Constructor for a :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions" [& [automated-snapshot-start-hour]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.SnapshotOptions/AutomatedSnapshotStartHour] [automated-snapshot-start-hour])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions m__1575651__auto__))))))
(clojure.core/defn map->SnapshotOptions "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions" [{:keys [automated-snapshot-start-hour]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.SnapshotOptions/AutomatedSnapshotStartHour] [automated-snapshot-start-hour])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.SnapshotOptions)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain.SnapshotOptions/AutomatedSnapshotStartHour]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Secure (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App)
(clojure.core/defn ->EnvironmentVariable "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable" [& [key value secure]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Key :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Value :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Secure] [key value secure])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable m__1575651__auto__))))))
(clojure.core/defn map->EnvironmentVariable "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable" [{:keys [key value secure]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Key :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Value :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Secure] [key value secure])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Key :crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Value] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App.EnvironmentVariable/Secure]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SecurityGroups/GroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->SecurityGroups "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups" [& [group-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SecurityGroups/GroupId] [group-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups m__1575651__auto__))))))
(clojure.core/defn map->SecurityGroups "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups" [{:keys [group-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SecurityGroups/GroupId] [group-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SecurityGroups)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SecurityGroups (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SecurityGroups/GroupId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/Enable (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer)
(clojure.core/defn ->LoadBasedAutoScaling "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling" [& [down-scaling enable up-scaling]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/DownScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/Enable :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/UpScaling] [down-scaling enable up-scaling])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling m__1575651__auto__))))))
(clojure.core/defn map->LoadBasedAutoScaling "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling" [{:keys [down-scaling enable up-scaling]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/DownScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/Enable :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/UpScaling] [down-scaling enable up-scaling])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/DownScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/Enable :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.LoadBasedAutoScaling/UpScaling]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestTemplates (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Uri (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheNamespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestParameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/PassthroughBehavior (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheKeyParameters (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationResponses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationResponse) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Credentials (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationHttpMethod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Method)
(clojure.core/defn ->Integration "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration" [& [cache-key-parameters cache-namespace credentials integration-http-method integration-responses passthrough-behavior request-parameters request-templates type uri]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheKeyParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheNamespace :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Credentials :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationHttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationResponses :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/PassthroughBehavior :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestTemplates :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Type :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Uri] [cache-key-parameters cache-namespace credentials integration-http-method integration-responses passthrough-behavior request-parameters request-templates type uri])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration m__1575651__auto__))))))
(clojure.core/defn map->Integration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration" [{:keys [cache-key-parameters cache-namespace credentials integration-http-method integration-responses passthrough-behavior request-parameters request-templates type uri]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheKeyParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheNamespace :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Credentials :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationHttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationResponses :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/PassthroughBehavior :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestTemplates :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Type :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Uri] [cache-key-parameters cache-namespace credentials integration-http-method integration-responses passthrough-behavior request-parameters request-templates type uri])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheKeyParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/CacheNamespace :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Credentials :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationHttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/IntegrationResponses :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/PassthroughBehavior :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/RequestTemplates :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Type :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.Integration/Uri]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/AttributeName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/KeyType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.core/defn ->KeySchema "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema" [& [attribute-name key-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/AttributeName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/KeyType] [attribute-name key-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema m__1575651__auto__))))))
(clojure.core/defn map->KeySchema "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema" [{:keys [attribute-name key-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/AttributeName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/KeyType] [attribute-name key-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/AttributeName :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.KeySchema/KeyType] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/LoadBalancerName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/TargetGroupArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.Service)
(clojure.core/defn ->LoadBalancer "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer" [& [container-port container-name load-balancer-name target-group-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerPort :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerName :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/LoadBalancerName :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/TargetGroupArn] [container-port container-name load-balancer-name target-group-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer m__1575651__auto__))))))
(clojure.core/defn map->LoadBalancer "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer" [{:keys [container-port container-name load-balancer-name target-group-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerPort :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerName :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/LoadBalancerName :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/TargetGroupArn] [container-port container-name load-balancer-name target-group-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerPort] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/ContainerName :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/LoadBalancerName :crucible.generated.ap-northeast-1.AWS.ECS.Service.LoadBalancer/TargetGroupArn]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CachingEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheTtlInSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/MetricsEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingBurstLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/DataTraceEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ResourcePath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/HttpMethod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheDataEncrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingRateLimit (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/LoggingLevel (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage)
(clojure.core/defn ->MethodSetting "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting" [& [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ResourcePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingRateLimit] [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting m__1575651__auto__))))))
(clojure.core/defn map->MethodSetting "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting" [{:keys [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ResourcePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingRateLimit] [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ResourcePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage.MethodSetting/ThrottlingRateLimit]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.InstanceIpv6Address/Ipv6Address (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->InstanceIpv6Address "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address" [& [ipv-6-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.InstanceIpv6Address/Ipv6Address] [ipv-6-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address m__1575651__auto__))))))
(clojure.core/defn map->InstanceIpv6Address "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address" [{:keys [ipv-6-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.InstanceIpv6Address/Ipv6Address] [ipv-6-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.InstanceIpv6Address)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/InstanceIpv6Address (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.InstanceIpv6Address/Ipv6Address] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/IgnoreApplicationStopFailures (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup)
(clojure.core/defn ->Deployment "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment" [& [revision description ignore-application-stop-failures]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/Revision :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/Description :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/IgnoreApplicationStopFailures] [revision description ignore-application-stop-failures])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment m__1575651__auto__))))))
(clojure.core/defn map->Deployment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment" [{:keys [revision description ignore-application-stop-failures]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/Revision :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/Description :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/IgnoreApplicationStopFailures] [revision description ignore-application-stop-failures])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/Revision] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/Description :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Deployment/IgnoreApplicationStopFailures]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.Group)
(clojure.core/defn ->Policy "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy" [& [policy-document policy-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy m__1575651__auto__))))))
(clojure.core/defn map->Policy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy" [{:keys [policy-document policy-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Group.Policy/PolicyName] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Args (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Jar (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/MainClass (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/StepProperties (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/KeyValue) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Step)
(clojure.core/defn ->HadoopJarStepConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig" [& [jar args main-class step-properties]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Jar :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Args :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/MainClass :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/StepProperties] [jar args main-class step-properties])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig m__1575651__auto__))))))
(clojure.core/defn map->HadoopJarStepConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig" [{:keys [jar args main-class step-properties]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Jar :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Args :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/MainClass :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/StepProperties] [jar args main-class step-properties])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStepConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Jar] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/Args :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/MainClass :crucible.generated.ap-northeast-1.AWS.EMR.Step.HadoopJarStepConfig/StepProperties]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/CookieExpirationPeriod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->LBCookieStickinessPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy" [& [cookie-expiration-period policy-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/CookieExpirationPeriod :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/PolicyName] [cookie-expiration-period policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy m__1575651__auto__))))))
(clojure.core/defn map->LBCookieStickinessPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy" [{:keys [cookie-expiration-period policy-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/CookieExpirationPeriod :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/PolicyName] [cookie-expiration-period policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/CookieExpirationPeriod :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.LBCookieStickinessPolicy/PolicyName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/QueueUrl (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/UseBase64 (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->SqsAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction" [& [queue-url role-arn use-base-64]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/QueueUrl :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/UseBase64] [queue-url role-arn use-base-64])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction m__1575651__auto__))))))
(clojure.core/defn map->SqsAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction" [{:keys [queue-url role-arn use-base-64]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/QueueUrl :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/UseBase64] [queue-url role-arn use-base-64])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SqsAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/QueueUrl :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/RoleArn] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SqsAction/UseBase64]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer)
(clojure.core/defn ->LoadBalancerAttribute "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Key :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute m__1575651__auto__))))))
(clojure.core/defn map->LoadBalancerAttribute "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Key :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Key :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer.LoadBalancerAttribute/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HostName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HttpRedirectCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyPrefixWith (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyWith (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->RedirectRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule" [& [host-name http-redirect-code protocol replace-key-prefix-with replace-key-with]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HostName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HttpRedirectCode :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/Protocol :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyPrefixWith :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyWith] [host-name http-redirect-code protocol replace-key-prefix-with replace-key-with])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule m__1575651__auto__))))))
(clojure.core/defn map->RedirectRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule" [{:keys [host-name http-redirect-code protocol replace-key-prefix-with replace-key-with]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HostName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HttpRedirectCode :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/Protocol :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyPrefixWith :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyWith] [host-name http-redirect-code protocol replace-key-prefix-with replace-key-with])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectRule (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HostName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/HttpRedirectCode :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/Protocol :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyPrefixWith :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectRule/ReplaceKeyWith]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/BerkshelfVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/ManageBerkshelf (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack)
(clojure.core/defn ->ChefConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration" [& [berkshelf-version manage-berkshelf]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/BerkshelfVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/ManageBerkshelf] [berkshelf-version manage-berkshelf])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration m__1575651__auto__))))))
(clojure.core/defn map->ChefConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration" [{:keys [berkshelf-version manage-berkshelf]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/BerkshelfVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/ManageBerkshelf] [berkshelf-version manage-berkshelf])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/BerkshelfVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.ChefConfiguration/ManageBerkshelf]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.InstanceIpv6Address/Ipv6Address (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface)
(clojure.core/defn ->InstanceIpv6Address "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address" [& [ipv-6-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.InstanceIpv6Address/Ipv6Address] [ipv-6-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address m__1575651__auto__))))))
(clojure.core/defn map->InstanceIpv6Address "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address" [{:keys [ipv-6-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.InstanceIpv6Address/Ipv6Address] [ipv-6-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.InstanceIpv6Address)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/InstanceIpv6Address (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface.InstanceIpv6Address/Ipv6Address] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/DomainName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/ValidationDomain (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate)
(clojure.core/defn ->DomainValidationOption "Constructor for a :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption" [& [domain-name validation-domain]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/DomainName :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/ValidationDomain] [domain-name validation-domain])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption m__1575651__auto__))))))
(clojure.core/defn map->DomainValidationOption "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption" [{:keys [domain-name validation-domain]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/DomainName :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/ValidationDomain] [domain-name validation-domain])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/DomainName :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate.DomainValidationOption/ValidationDomain] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LifecycleConfiguration/Rules (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LifecycleConfiguration/Rule) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->LifecycleConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration" [& [rules]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LifecycleConfiguration/Rules] [rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration m__1575651__auto__))))))
(clojure.core/defn map->LifecycleConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration" [{:keys [rules]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LifecycleConfiguration/Rules] [rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.LifecycleConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LifecycleConfiguration/Rules] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Configure (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Deploy (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Setup (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Shutdown (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Undeploy (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer)
(clojure.core/defn ->Recipes "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes" [& [configure deploy setup shutdown undeploy]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Configure :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Deploy :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Setup :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Shutdown :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Undeploy] [configure deploy setup shutdown undeploy])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes m__1575651__auto__))))))
(clojure.core/defn map->Recipes "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes" [{:keys [configure deploy setup shutdown undeploy]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Configure :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Deploy :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Setup :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Shutdown :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Undeploy] [configure deploy setup shutdown undeploy])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Recipes (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Configure :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Deploy :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Setup :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Shutdown :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.Recipes/Undeploy]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/ErrorDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/IndexDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RoutingRules (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RoutingRule) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->WebsiteConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration" [& [error-document index-document redirect-all-requests-to routing-rules]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/ErrorDocument :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/IndexDocument :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RedirectAllRequestsTo :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RoutingRules] [error-document index-document redirect-all-requests-to routing-rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration m__1575651__auto__))))))
(clojure.core/defn map->WebsiteConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration" [{:keys [error-document index-document redirect-all-requests-to routing-rules]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/ErrorDocument :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/IndexDocument :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RedirectAllRequestsTo :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RoutingRules] [error-document index-document redirect-all-requests-to routing-rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/ErrorDocument :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/IndexDocument :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RedirectAllRequestsTo :crucible.generated.ap-northeast-1.AWS.S3.Bucket.WebsiteConfiguration/RoutingRules]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup)
(clojure.core/defn ->Ec2TagFilter "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter" [& [type key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Value] [type key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter m__1575651__auto__))))))
(clojure.core/defn map->Ec2TagFilter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter" [{:keys [type key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Type :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Value] [type key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Type] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Key :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup.Ec2TagFilter/Value]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricNamespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricTimestamp (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricUnit (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->CloudwatchMetricAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction" [& [metric-name metric-namespace metric-unit metric-value role-arn metric-timestamp]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricNamespace :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricUnit :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricTimestamp] [metric-name metric-namespace metric-unit metric-value role-arn metric-timestamp])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction m__1575651__auto__))))))
(clojure.core/defn map->CloudwatchMetricAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction" [{:keys [metric-name metric-namespace metric-unit metric-value role-arn metric-timestamp]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricNamespace :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricUnit :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricTimestamp] [metric-name metric-namespace metric-unit metric-value role-arn metric-timestamp])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/CloudwatchMetricAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricNamespace :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricUnit :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/RoleArn] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.CloudwatchMetricAction/MetricTimestamp]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Attributes (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/ParameterAttribute) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline)
(clojure.core/defn ->ParameterObject "Constructor for a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject" [& [attributes id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Attributes :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Id] [attributes id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject m__1575651__auto__))))))
(clojure.core/defn map->ParameterObject "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject" [{:keys [attributes id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Attributes :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Id] [attributes id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Attributes :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.ParameterObject/Id] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/RoleARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/TypeName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexRotationPeriod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/S3BackupMode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/DomainARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->ElasticsearchDestinationConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration" [& [buffering-hints domain-arn index-name index-rotation-period retry-options role-arn s-3-backup-mode s-3-configuration type-name cloud-watch-logging-options]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/BufferingHints :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/DomainARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexRotationPeriod :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/RetryOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/S3BackupMode :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/S3Configuration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/TypeName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/CloudWatchLoggingOptions] [buffering-hints domain-arn index-name index-rotation-period retry-options role-arn s-3-backup-mode s-3-configuration type-name cloud-watch-logging-options])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration m__1575651__auto__))))))
(clojure.core/defn map->ElasticsearchDestinationConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration" [{:keys [buffering-hints domain-arn index-name index-rotation-period retry-options role-arn s-3-backup-mode s-3-configuration type-name cloud-watch-logging-options]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/BufferingHints :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/DomainARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexRotationPeriod :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/RetryOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/S3BackupMode :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/S3Configuration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/TypeName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/CloudWatchLoggingOptions] [buffering-hints domain-arn index-name index-rotation-period retry-options role-arn s-3-backup-mode s-3-configuration type-name cloud-watch-logging-options])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/BufferingHints :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/DomainARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/IndexRotationPeriod :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/RetryOptions :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/S3BackupMode :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/S3Configuration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/TypeName] :opt [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchDestinationConfiguration/CloudWatchLoggingOptions]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/AssociatePublicIpAddress (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6Addresses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/InstanceIpv6Address) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/GroupSet (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/NetworkInterfaceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeviceIndex (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeleteOnTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddresses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddressSpecification) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SecondaryPrivateIpAddressCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6AddressCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->NetworkInterface "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface" [& [device-index associate-public-ip-address delete-on-termination description group-set ipv-6-address-count ipv-6-addresses network-interface-id private-ip-address private-ip-addresses secondary-private-ip-address-count subnet-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeviceIndex :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Description :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/GroupSet :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SubnetId] [device-index associate-public-ip-address delete-on-termination description group-set ipv-6-address-count ipv-6-addresses network-interface-id private-ip-address private-ip-addresses secondary-private-ip-address-count subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface m__1575651__auto__))))))
(clojure.core/defn map->NetworkInterface "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface" [{:keys [device-index associate-public-ip-address delete-on-termination description group-set ipv-6-address-count ipv-6-addresses network-interface-id private-ip-address private-ip-addresses secondary-private-ip-address-count subnet-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeviceIndex :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Description :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/GroupSet :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SubnetId] [device-index associate-public-ip-address delete-on-termination description group-set ipv-6-address-count ipv-6-addresses network-interface-id private-ip-address private-ip-addresses secondary-private-ip-address-count subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeviceIndex] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Description :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/GroupSet :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance.NetworkInterface/SubnetId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/NonKeyAttributes (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/ProjectionType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.core/defn ->Projection "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection" [& [non-key-attributes projection-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/NonKeyAttributes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/ProjectionType] [non-key-attributes projection-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection m__1575651__auto__))))))
(clojure.core/defn map->Projection "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection" [{:keys [non-key-attributes projection-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/NonKeyAttributes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/ProjectionType] [non-key-attributes projection-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/Projection (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/NonKeyAttributes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.Projection/ProjectionType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/MessageFormat (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/TargetArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->SnsAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction" [& [role-arn target-arn message-format]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/TargetArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/MessageFormat] [role-arn target-arn message-format])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction m__1575651__auto__))))))
(clojure.core/defn map->SnsAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction" [{:keys [role-arn target-arn message-format]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/TargetArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/MessageFormat] [role-arn target-arn message-format])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/SnsAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/TargetArn] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.SnsAction/MessageFormat]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/StorageClass (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->ReplicationDestination "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination" [& [bucket storage-class]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/Bucket :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/StorageClass] [bucket storage-class])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination m__1575651__auto__))))))
(clojure.core/defn map->ReplicationDestination "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination" [{:keys [bucket storage-class]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/Bucket :crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/StorageClass] [bucket storage-class])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationDestination (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/Bucket] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.ReplicationDestination/StorageClass]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EFS.FileSystem)
(clojure.core/defn ->ElasticFileSystemTag "Constructor for a :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Key :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag m__1575651__auto__))))))
(clojure.core/defn map->ElasticFileSystemTag "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Key :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Key :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem.ElasticFileSystemTag/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/FromPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/IpRange (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/ToPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Fleet)
(clojure.core/defn ->IpPermission "Constructor for a :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission" [& [from-port ip-range protocol to-port]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/FromPort :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/IpRange :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/Protocol :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/ToPort] [from-port ip-range protocol to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission m__1575651__auto__))))))
(clojure.core/defn map->IpPermission "Convert a map to a :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission" [{:keys [from-port ip-range protocol to-port]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/FromPort :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/IpRange :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/Protocol :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/ToPort] [from-port ip-range protocol to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/FromPort :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/IpRange :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/Protocol :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet.IpPermission/ToPort] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CachingEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheTtlInSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/MetricsEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingBurstLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/DataTraceEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ResourcePath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/HttpMethod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheDataEncrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingRateLimit (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/LoggingLevel (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment)
(clojure.core/defn ->MethodSetting "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting" [& [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ResourcePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingRateLimit] [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting m__1575651__auto__))))))
(clojure.core/defn map->MethodSetting "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting" [{:keys [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ResourcePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingRateLimit] [cache-data-encrypted cache-ttl-in-seconds caching-enabled data-trace-enabled http-method logging-level metrics-enabled resource-path throttling-burst-limit throttling-rate-limit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/MethodSetting (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ResourcePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.MethodSetting/ThrottlingRateLimit]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/StorageClass (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/TransitionInDays (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->NoncurrentVersionTransition "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition" [& [storage-class transition-in-days]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/StorageClass :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/TransitionInDays] [storage-class transition-in-days])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition m__1575651__auto__))))))
(clojure.core/defn map->NoncurrentVersionTransition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition" [{:keys [storage-class transition-in-days]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/StorageClass :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/TransitionInDays] [storage-class transition-in-days])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NoncurrentVersionTransition (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/StorageClass :crucible.generated.ap-northeast-1.AWS.S3.Bucket.NoncurrentVersionTransition/TransitionInDays] :opt []))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->NoDevice "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice" [& []] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [] [])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice m__1575651__auto__))))))
(clojure.core/defn map->NoDevice "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice" [{:keys []}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [] [])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.NoDevice)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NoDevice (clojure.spec/keys :req [] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/AssociatePublicIpAddress (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/NetworkInterfaceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeviceIndex (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Groups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeleteOnTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/PrivateIpAddresses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/PrivateIpAddresses) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SecondaryPrivateIpAddressCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Ipv6AddressCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->NetworkInterfaces "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces" [& [device-index associate-public-ip-address delete-on-termination description groups ipv-6-address-count ipv-6-addresses network-interface-id private-ip-addresses secondary-private-ip-address-count subnet-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeviceIndex :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Description :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Groups :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SubnetId] [device-index associate-public-ip-address delete-on-termination description groups ipv-6-address-count ipv-6-addresses network-interface-id private-ip-addresses secondary-private-ip-address-count subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces m__1575651__auto__))))))
(clojure.core/defn map->NetworkInterfaces "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces" [{:keys [device-index associate-public-ip-address delete-on-termination description groups ipv-6-address-count ipv-6-addresses network-interface-id private-ip-addresses secondary-private-ip-address-count subnet-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeviceIndex :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Description :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Groups :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SubnetId] [device-index associate-public-ip-address delete-on-termination description groups ipv-6-address-count ipv-6-addresses network-interface-id private-ip-addresses secondary-private-ip-address-count subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/NetworkInterfaces (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeviceIndex] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Description :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Groups :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.NetworkInterfaces/SubnetId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.VersioningConfiguration/Status (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->VersioningConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration" [& [status]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.VersioningConfiguration/Status] [status])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration m__1575651__auto__))))))
(clojure.core/defn map->VersioningConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration" [{:keys [status]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.VersioningConfiguration/Status] [status])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.VersioningConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.VersioningConfiguration/Status] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Configuration (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/InputArtifacts (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/InputArtifact) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/OutputArtifacts (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/OutputArtifact) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RunOrder (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->ActionDeclaration "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration" [& [action-type-id name configuration input-artifacts output-artifacts role-arn run-order]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/ActionTypeId :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Configuration :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/InputArtifacts :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/OutputArtifacts :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RoleArn :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RunOrder] [action-type-id name configuration input-artifacts output-artifacts role-arn run-order])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration m__1575651__auto__))))))
(clojure.core/defn map->ActionDeclaration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration" [{:keys [action-type-id name configuration input-artifacts output-artifacts role-arn run-order]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/ActionTypeId :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Configuration :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/InputArtifacts :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/OutputArtifacts :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RoleArn :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RunOrder] [action-type-id name configuration input-artifacts output-artifacts role-arn run-order])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ActionDeclaration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/ActionTypeId :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Name] :opt [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/Configuration :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/InputArtifacts :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/OutputArtifacts :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RoleArn :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ActionDeclaration/RunOrder]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Classification (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/ConfigurationProperties (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Configurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Configuration) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig)
(clojure.core/defn ->Configuration "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration" [& [classification configuration-properties configurations]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Classification :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Configurations] [classification configuration-properties configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration m__1575651__auto__))))))
(clojure.core/defn map->Configuration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration" [{:keys [classification configuration-properties configurations]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Classification :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Configurations] [classification configuration-properties configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Classification :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig.Configuration/Configurations]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Location (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->ArtifactStore "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore" [& [location type encryption-key]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Location :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Type :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/EncryptionKey] [location type encryption-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore m__1575651__auto__))))))
(clojure.core/defn map->ArtifactStore "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore" [{:keys [location type encryption-key]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Location :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Type :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/EncryptionKey] [location type encryption-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Location :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/Type] :opt [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.ArtifactStore/EncryptionKey]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Monitoring/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->Monitoring "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring" [& [enabled]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Monitoring/Enabled] [enabled])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring m__1575651__auto__))))))
(clojure.core/defn map->Monitoring "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring" [{:keys [enabled]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Monitoring/Enabled] [enabled])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Monitoring)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Monitoring (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Monitoring/Enabled]))
(clojure.spec/def :crucible.generated.ap-northeast-1.Tag/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.Tag/Value (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1)
(clojure.core/defn ->Tag "Constructor for a :crucible.generated.ap-northeast-1/Tag" [& [key value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.Tag/Key :crucible.generated.ap-northeast-1.Tag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1/Tag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1/Tag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1/Tag m__1575651__auto__))))))
(clojure.core/defn map->Tag "Convert a map to a :crucible.generated.ap-northeast-1/Tag" [{:keys [key value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.Tag/Key :crucible.generated.ap-northeast-1.Tag/Value] [key value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1/Tag m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1/Tag) (clojure.spec/explain-data :crucible.generated.ap-northeast-1/Tag m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.Tag)
(clojure.spec/def :crucible.generated.ap-northeast-1/Tag (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.Tag/Key :crucible.generated.ap-northeast-1.Tag/Value] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup)
(clojure.core/defn ->Parameter "Constructor for a :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter" [& [parameter-name parameter-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterValue] [parameter-name parameter-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter m__1575651__auto__))))))
(clojure.core/defn map->Parameter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter" [{:keys [parameter-name parameter-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterValue] [parameter-name parameter-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup.Parameter/ParameterValue] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/DestinationBucketName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/LogFilePrefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->LoggingConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration" [& [destination-bucket-name log-file-prefix]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/DestinationBucketName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/LogFilePrefix] [destination-bucket-name log-file-prefix])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration m__1575651__auto__))))))
(clojure.core/defn map->LoggingConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration" [{:keys [destination-bucket-name log-file-prefix]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/DestinationBucketName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/LogFilePrefix] [destination-bucket-name log-file-prefix])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/DestinationBucketName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LoggingConfiguration/LogFilePrefix]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchRetryOptions/DurationInSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->ElasticsearchRetryOptions "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions" [& [duration-in-seconds]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchRetryOptions/DurationInSeconds] [duration-in-seconds])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions m__1575651__auto__))))))
(clojure.core/defn map->ElasticsearchRetryOptions "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions" [{:keys [duration-in-seconds]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchRetryOptions/DurationInSeconds] [duration-in-seconds])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchRetryOptions)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchRetryOptions (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.ElasticsearchRetryOptions/DurationInSeconds] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/IncludeCookies (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Prefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->Logging "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging" [& [bucket include-cookies prefix]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Bucket :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/IncludeCookies :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Prefix] [bucket include-cookies prefix])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging m__1575651__auto__))))))
(clojure.core/defn map->Logging "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging" [{:keys [bucket include-cookies prefix]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Bucket :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/IncludeCookies :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Prefix] [bucket include-cookies prefix])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Logging (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Bucket] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/IncludeCookies :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Logging/Prefix]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedHeaders (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedMethods (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedOrigins (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/ExposedHeaders (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/MaxAge (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->CorsRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule" [& [allowed-methods allowed-origins allowed-headers exposed-headers id max-age]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedMethods :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedOrigins :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedHeaders :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/ExposedHeaders :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/Id :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/MaxAge] [allowed-methods allowed-origins allowed-headers exposed-headers id max-age])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule m__1575651__auto__))))))
(clojure.core/defn map->CorsRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule" [{:keys [allowed-methods allowed-origins allowed-headers exposed-headers id max-age]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedMethods :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedOrigins :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedHeaders :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/ExposedHeaders :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/Id :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/MaxAge] [allowed-methods allowed-origins allowed-headers exposed-headers id max-age])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedMethods :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedOrigins] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/AllowedHeaders :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/ExposedHeaders :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/Id :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsRule/MaxAge]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/RefValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/StringValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline)
(clojure.core/defn ->Field "Constructor for a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field" [& [key ref-value string-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/RefValue :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/StringValue] [key ref-value string-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field m__1575651__auto__))))))
(clojure.core/defn map->Field "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field" [{:keys [key ref-value string-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/Key :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/RefValue :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/StringValue] [key ref-value string-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Field (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/Key] :opt [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/RefValue :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline.Field/StringValue]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/ReadOnly (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/SourceContainer (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->VolumeFrom "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom" [& [read-only source-container]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/ReadOnly :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/SourceContainer] [read-only source-container])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom m__1575651__auto__))))))
(clojure.core/defn map->VolumeFrom "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom" [{:keys [read-only source-container]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/ReadOnly :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/SourceContainer] [read-only source-container])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/VolumeFrom (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/ReadOnly :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.VolumeFrom/SourceContainer]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/Primary (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/PrivateIpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.core/defn ->PrivateIpAddressSpecification "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification" [& [primary private-ip-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/Primary :crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/PrivateIpAddress] [primary private-ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification m__1575651__auto__))))))
(clojure.core/defn map->PrivateIpAddressSpecification "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification" [{:keys [primary private-ip-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/Primary :crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/PrivateIpAddress] [primary private-ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddressSpecification (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/Primary :crucible.generated.ap-northeast-1.AWS.EC2.Instance.PrivateIpAddressSpecification/PrivateIpAddress] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Endpoint (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS.Topic)
(clojure.core/defn ->Subscription "Constructor for a :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription" [& [endpoint protocol]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Endpoint :crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Protocol] [endpoint protocol])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription m__1575651__auto__))))))
(clojure.core/defn map->Subscription "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription" [{:keys [endpoint protocol]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Endpoint :crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Protocol] [endpoint protocol])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Endpoint :crucible.generated.ap-northeast-1.AWS.SNS.Topic.Subscription/Protocol] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Actions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/ActionDeclaration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Blockers (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/BlockerDeclaration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->StageDeclaration "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration" [& [actions name blockers]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Actions :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Blockers] [actions name blockers])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration m__1575651__auto__))))))
(clojure.core/defn map->StageDeclaration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration" [{:keys [actions name blockers]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Actions :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Blockers] [actions name blockers])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Actions :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Name] :opt [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.StageDeclaration/Blockers]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/DeleteOnTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Encrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/SnapshotId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->Ebs "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs" [& [delete-on-termination encrypted iops snapshot-id volume-size volume-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Iops :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeSize :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeType] [delete-on-termination encrypted iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs m__1575651__auto__))))))
(clojure.core/defn map->Ebs "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs" [{:keys [delete-on-termination encrypted iops snapshot-id volume-size volume-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Iops :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeSize :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeType] [delete-on-termination encrypted iops snapshot-id volume-size volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/Ebs (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/DeleteOnTermination :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/Iops :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeSize :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.Ebs/VolumeType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/CidrIp (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/FromPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/IpProtocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupOwnerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/ToPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup)
(clojure.core/defn ->Rule "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule" [& [ip-protocol cidr-ip from-port source-security-group-id source-security-group-name source-security-group-owner-id to-port]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/IpProtocol :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupOwnerId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/ToPort] [ip-protocol cidr-ip from-port source-security-group-id source-security-group-name source-security-group-owner-id to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule m__1575651__auto__))))))
(clojure.core/defn map->Rule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule" [{:keys [ip-protocol cidr-ip from-port source-security-group-id source-security-group-name source-security-group-owner-id to-port]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/IpProtocol :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupOwnerId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/ToPort] [ip-protocol cidr-ip from-port source-security-group-id source-security-group-name source-security-group-owner-id to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/IpProtocol] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/SourceSecurityGroupOwnerId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup.Rule/ToPort]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/ContinentCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/CountryCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/SubdivisionCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSet)
(clojure.core/defn ->GeoLocation "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation" [& [continent-code country-code subdivision-code]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/ContinentCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/CountryCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/SubdivisionCode] [continent-code country-code subdivision-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation m__1575651__auto__))))))
(clojure.core/defn map->GeoLocation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation" [{:keys [continent-code country-code subdivision-code]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/ContinentCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/CountryCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/SubdivisionCode] [continent-code country-code subdivision-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/ContinentCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/CountryCode :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet.GeoLocation/SubdivisionCode]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment)
(clojure.core/defn ->Tier "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier" [& [name type version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Name :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Type :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Version] [name type version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier m__1575651__auto__))))))
(clojure.core/defn map->Tier "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier" [{:keys [name type version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Name :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Type :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Version] [name type version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Name :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Type :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment.Tier/Version]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsConfiguration/CorsRules (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsConfiguration/CorsRule) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->CorsConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration" [& [cors-rules]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsConfiguration/CorsRules] [cors-rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration m__1575651__auto__))))))
(clojure.core/defn map->CorsConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration" [{:keys [cors-rules]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsConfiguration/CorsRules] [cors-rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.CorsConfiguration/CorsRules] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/FleetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Message (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Alias)
(clojure.core/defn ->RoutingStrategy "Constructor for a :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy" [& [type fleet-id message]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Type :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/FleetId :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Message] [type fleet-id message])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy m__1575651__auto__))))))
(clojure.core/defn map->RoutingStrategy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy" [{:keys [type fleet-id message]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Type :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/FleetId :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Message] [type fleet-id message])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Type] :opt [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/FleetId :crucible.generated.ap-northeast-1.AWS.GameLift.Alias.RoutingStrategy/Message]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/ApplicationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/TemplateName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate)
(clojure.core/defn ->SourceConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration" [& [application-name template-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/TemplateName] [application-name template-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration m__1575651__auto__))))))
(clojure.core/defn map->SourceConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration" [{:keys [application-name template-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/TemplateName] [application-name template-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate.SourceConfiguration/TemplateName] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/SmoothStreaming (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/Compress (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TargetOriginId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/ViewerProtocolPolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MinTTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/CachedMethods (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MaxTTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/AllowedMethods (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/DefaultTTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TrustedSigners (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->DefaultCacheBehavior "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior" [& [forwarded-values target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/ForwardedValues :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TargetOriginId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/ViewerProtocolPolicy :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/AllowedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/CachedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/Compress :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/DefaultTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MaxTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/SmoothStreaming :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TrustedSigners] [forwarded-values target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior m__1575651__auto__))))))
(clojure.core/defn map->DefaultCacheBehavior "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior" [{:keys [forwarded-values target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/ForwardedValues :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TargetOriginId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/ViewerProtocolPolicy :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/AllowedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/CachedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/Compress :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/DefaultTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MaxTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/SmoothStreaming :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TrustedSigners] [forwarded-values target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DefaultCacheBehavior (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/ForwardedValues :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TargetOriginId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/ViewerProtocolPolicy] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/AllowedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/CachedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/Compress :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/DefaultTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MaxTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/MinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/SmoothStreaming :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.DefaultCacheBehavior/TrustedSigners]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Event (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Queue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->QueueConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration" [& [event queue filter]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Queue :crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Filter] [event queue filter])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration m__1575651__auto__))))))
(clojure.core/defn map->QueueConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration" [{:keys [event queue filter]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Queue :crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Filter] [event queue filter])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/QueueConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Queue] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.QueueConfiguration/Filter]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/TargetGroupArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule)
(clojure.core/defn ->Action "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action" [& [target-group-arn type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/TargetGroupArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/Type] [target-group-arn type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action m__1575651__auto__))))))
(clojure.core/defn map->Action "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action" [{:keys [target-group-arn type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/TargetGroupArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/Type] [target-group-arn type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/TargetGroupArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule.Action/Type] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Classification (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/ConfigurationProperties (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Configurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Configuration) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.core/defn ->Configuration "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration" [& [classification configuration-properties configurations]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Classification :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Configurations] [classification configuration-properties configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration m__1575651__auto__))))))
(clojure.core/defn map->Configuration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration" [{:keys [classification configuration-properties configurations]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Classification :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Configurations] [classification configuration-properties configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Classification :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.EMR.Cluster.Configuration/Configurations]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->Volume "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume" [& [host name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume/Host :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume/Name] [host name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume m__1575651__auto__))))))
(clojure.core/defn map->Volume "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume" [{:keys [host name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume/Host :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume/Name] [host name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume/Host :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.Volume/Name]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Password (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Revision (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/SshKey (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Url (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Username (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack)
(clojure.core/defn ->Source "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source" [& [password revision ssh-key type url username]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Password :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Revision :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/SshKey :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Url :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Username] [password revision ssh-key type url username])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source m__1575651__auto__))))))
(clojure.core/defn map->Source "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source" [{:keys [password revision ssh-key type url username]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Password :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Revision :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/SshKey :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Url :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Username] [password revision ssh-key type url username])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Source (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Password :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Revision :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/SshKey :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Url :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.Source/Username]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/SmoothStreaming (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/Compress (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TargetOriginId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/ViewerProtocolPolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MinTTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/CachedMethods (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/PathPattern (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MaxTTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/AllowedMethods (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/DefaultTTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TrustedSigners (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->CacheBehavior "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior" [& [forwarded-values path-pattern target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/ForwardedValues :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/PathPattern :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TargetOriginId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/ViewerProtocolPolicy :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/AllowedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/CachedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/Compress :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/DefaultTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MaxTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/SmoothStreaming :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TrustedSigners] [forwarded-values path-pattern target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior m__1575651__auto__))))))
(clojure.core/defn map->CacheBehavior "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior" [{:keys [forwarded-values path-pattern target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/ForwardedValues :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/PathPattern :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TargetOriginId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/ViewerProtocolPolicy :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/AllowedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/CachedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/Compress :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/DefaultTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MaxTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/SmoothStreaming :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TrustedSigners] [forwarded-values path-pattern target-origin-id viewer-protocol-policy allowed-methods cached-methods compress default-ttl max-ttl min-ttl smooth-streaming trusted-signers])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/CacheBehavior (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/ForwardedValues :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/PathPattern :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TargetOriginId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/ViewerProtocolPolicy] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/AllowedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/CachedMethods :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/Compress :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/DefaultTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MaxTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/MinTTL :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/SmoothStreaming :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.CacheBehavior/TrustedSigners]))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->Restrictions "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions" [& [geo-restriction]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Restrictions/GeoRestriction] [geo-restriction])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions m__1575651__auto__))))))
(clojure.core/defn map->Restrictions "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions" [{:keys [geo-restriction]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Restrictions/GeoRestriction] [geo-restriction])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Restrictions)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Restrictions (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Restrictions/GeoRestriction] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/LogDriver (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/Options (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->LogConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration" [& [log-driver options]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/LogDriver :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/Options] [log-driver options])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration m__1575651__auto__))))))
(clojure.core/defn map->LogConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration" [{:keys [log-driver options]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/LogDriver :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/Options] [log-driver options])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/LogConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/LogDriver] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.LogConfiguration/Options]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/HostName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->RedirectAllRequestsTo "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo" [& [host-name protocol]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/HostName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/Protocol] [host-name protocol])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo m__1575651__auto__))))))
(clojure.core/defn map->RedirectAllRequestsTo "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo" [{:keys [host-name protocol]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/HostName :crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/Protocol] [host-name protocol])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/RedirectAllRequestsTo (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/HostName] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.RedirectAllRequestsTo/Protocol]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.User)
(clojure.core/defn ->Policy "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy" [& [policy-document policy-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy m__1575651__auto__))))))
(clojure.core/defn map->Policy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy" [{:keys [policy-document policy-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.User.Policy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.User.Policy/PolicyName] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidFrom (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ExcessCapacityTerminationPolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/SpotPrice (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/AllocationStrategy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/IamFleetRole (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TargetCapacity (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TerminateInstancesWithExpiration (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/LaunchSpecifications (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/LaunchSpecifications) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidUntil (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->SpotFleetRequestConfigData "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData" [& [iam-fleet-role launch-specifications spot-price target-capacity allocation-strategy excess-capacity-termination-policy terminate-instances-with-expiration valid-from valid-until]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/IamFleetRole :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/LaunchSpecifications :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/SpotPrice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TargetCapacity :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/AllocationStrategy :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ExcessCapacityTerminationPolicy :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TerminateInstancesWithExpiration :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidFrom :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidUntil] [iam-fleet-role launch-specifications spot-price target-capacity allocation-strategy excess-capacity-termination-policy terminate-instances-with-expiration valid-from valid-until])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData m__1575651__auto__))))))
(clojure.core/defn map->SpotFleetRequestConfigData "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData" [{:keys [iam-fleet-role launch-specifications spot-price target-capacity allocation-strategy excess-capacity-termination-policy terminate-instances-with-expiration valid-from valid-until]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/IamFleetRole :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/LaunchSpecifications :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/SpotPrice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TargetCapacity :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/AllocationStrategy :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ExcessCapacityTerminationPolicy :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TerminateInstancesWithExpiration :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidFrom :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidUntil] [iam-fleet-role launch-specifications spot-price target-capacity allocation-strategy excess-capacity-termination-policy terminate-instances-with-expiration valid-from valid-until])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/IamFleetRole :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/LaunchSpecifications :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/SpotPrice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TargetCapacity] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/AllocationStrategy :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ExcessCapacityTerminationPolicy :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/TerminateInstancesWithExpiration :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidFrom :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.SpotFleetRequestConfigData/ValidUntil]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.StreamSpecification/StreamViewType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.core/defn ->StreamSpecification "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification" [& [stream-view-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.StreamSpecification/StreamViewType] [stream-view-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification m__1575651__auto__))))))
(clojure.core/defn map->StreamSpecification "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification" [{:keys [stream-view-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.StreamSpecification/StreamViewType] [stream-view-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.StreamSpecification)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table.StreamSpecification/StreamViewType] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ContainerPath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ReadOnly (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/SourceVolume (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.core/defn ->MountPoint "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint" [& [container-path read-only source-volume]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ContainerPath :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ReadOnly :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/SourceVolume] [container-path read-only source-volume])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint m__1575651__auto__))))))
(clojure.core/defn map->MountPoint "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint" [{:keys [container-path read-only source-volume]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ContainerPath :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ReadOnly :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/SourceVolume] [container-path read-only source-volume])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/MountPoint (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ContainerPath :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/ReadOnly :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition.MountPoint/SourceVolume]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/Forward (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/WhitelistedNames (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->Cookies "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies" [& [forward whitelisted-names]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/Forward :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/WhitelistedNames] [forward whitelisted-names])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies m__1575651__auto__))))))
(clojure.core/defn map->Cookies "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies" [{:keys [forward whitelisted-names]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/Forward :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/WhitelistedNames] [forward whitelisted-names])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Cookies (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/Forward] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Cookies/WhitelistedNames]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/DeviceName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/NoDevice (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/VirtualName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration)
(clojure.core/defn ->BlockDeviceMapping "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping" [& [device-name ebs no-device virtual-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/DeviceName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping m__1575651__auto__))))))
(clojure.core/defn map->BlockDeviceMapping "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping" [{:keys [device-name ebs no-device virtual-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/DeviceName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/DeviceName] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/Ebs :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/NoDevice :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration.BlockDeviceMapping/VirtualName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Event (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Topic (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->TopicConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration" [& [event topic filter]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Topic :crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Filter] [event topic filter])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration m__1575651__auto__))))))
(clojure.core/defn map->TopicConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration" [{:keys [event topic filter]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Topic :crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Filter] [event topic filter])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/TopicConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Topic] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.TopicConfiguration/Filter]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/AcmCertificateArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/CloudFrontDefaultCertificate (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/IamCertificateId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/MinimumProtocolVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/SslSupportMethod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->ViewerCertificate "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate" [& [acm-certificate-arn cloud-front-default-certificate iam-certificate-id minimum-protocol-version ssl-support-method]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/AcmCertificateArn :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/CloudFrontDefaultCertificate :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/IamCertificateId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/MinimumProtocolVersion :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/SslSupportMethod] [acm-certificate-arn cloud-front-default-certificate iam-certificate-id minimum-protocol-version ssl-support-method])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate m__1575651__auto__))))))
(clojure.core/defn map->ViewerCertificate "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate" [{:keys [acm-certificate-arn cloud-front-default-certificate iam-certificate-id minimum-protocol-version ssl-support-method]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/AcmCertificateArn :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/CloudFrontDefaultCertificate :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/IamCertificateId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/MinimumProtocolVersion :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/SslSupportMethod] [acm-certificate-arn cloud-front-default-certificate iam-certificate-id minimum-protocol-version ssl-support-method])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/ViewerCertificate (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/AcmCertificateArn :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/CloudFrontDefaultCertificate :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/IamCertificateId :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/MinimumProtocolVersion :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.ViewerCertificate/SslSupportMethod]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/DomainName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginCustomHeaders (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginCustomHeader) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginPath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->Origin "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin" [& [domain-name id custom-origin-config origin-custom-headers origin-path s-3-origin-config]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/DomainName :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/Id :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/CustomOriginConfig :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginCustomHeaders :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginPath :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/S3OriginConfig] [domain-name id custom-origin-config origin-custom-headers origin-path s-3-origin-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin m__1575651__auto__))))))
(clojure.core/defn map->Origin "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin" [{:keys [domain-name id custom-origin-config origin-custom-headers origin-path s-3-origin-config]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/DomainName :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/Id :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/CustomOriginConfig :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginCustomHeaders :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginPath :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/S3OriginConfig] [domain-name id custom-origin-config origin-custom-headers origin-path s-3-origin-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/Origin (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/DomainName :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/Id] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/CustomOriginConfig :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginCustomHeaders :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/OriginPath :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.Origin/S3OriginConfig]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Data (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet)
(clojure.core/defn ->FieldToMatch "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch" [& [type data]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/defn map->FieldToMatch "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch" [{:keys [type data]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/FieldToMatch (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Type] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet.FieldToMatch/Data]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.KMSEncryptionConfig/AWSKMSKeyARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->KMSEncryptionConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig" [& [awskms-key-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.KMSEncryptionConfig/AWSKMSKeyARN] [awskms-key-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig m__1575651__auto__))))))
(clojure.core/defn map->KMSEncryptionConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig" [{:keys [awskms-key-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.KMSEncryptionConfig/AWSKMSKeyARN] [awskms-key-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.KMSEncryptionConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/KMSEncryptionConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.KMSEncryptionConfig/AWSKMSKeyARN] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/ClusterJDBCURL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Password (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/RoleARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Username (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->RedshiftDestinationConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration" [& [cluster-jdbcurl copy-command password role-arn s-3-configuration username cloud-watch-logging-options]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/ClusterJDBCURL :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/CopyCommand :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Password :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/S3Configuration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Username :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/CloudWatchLoggingOptions] [cluster-jdbcurl copy-command password role-arn s-3-configuration username cloud-watch-logging-options])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration m__1575651__auto__))))))
(clojure.core/defn map->RedshiftDestinationConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration" [{:keys [cluster-jdbcurl copy-command password role-arn s-3-configuration username cloud-watch-logging-options]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/ClusterJDBCURL :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/CopyCommand :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Password :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/S3Configuration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Username :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/CloudWatchLoggingOptions] [cluster-jdbcurl copy-command password role-arn s-3-configuration username cloud-watch-logging-options])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/ClusterJDBCURL :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/CopyCommand :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Password :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/RoleARN :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/S3Configuration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/Username] :opt [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.RedshiftDestinationConfiguration/CloudWatchLoggingOptions]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Data (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet)
(clojure.core/defn ->FieldToMatch "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch" [& [type data]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/defn map->FieldToMatch "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch" [{:keys [type data]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Type :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Data] [type data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/FieldToMatch (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Type] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet.FieldToMatch/Data]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseParameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseTemplates (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/SelectionPattern (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/StatusCode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Method)
(clojure.core/defn ->IntegrationResponse "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse" [& [response-parameters response-templates selection-pattern status-code]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseTemplates :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/SelectionPattern :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/StatusCode] [response-parameters response-templates selection-pattern status-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse m__1575651__auto__))))))
(clojure.core/defn map->IntegrationResponse "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse" [{:keys [response-parameters response-templates selection-pattern status-code]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseTemplates :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/SelectionPattern :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/StatusCode] [response-parameters response-templates selection-pattern status-code])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/IntegrationResponse (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/ResponseTemplates :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/SelectionPattern :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method.IntegrationResponse/StatusCode]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCRegion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HostedZone)
(clojure.core/defn ->VPC "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC" [& [vpc-id vpc-region]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCId :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCRegion] [vpc-id vpc-region])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC m__1575651__auto__))))))
(clojure.core/defn map->VPC "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC" [{:keys [vpc-id vpc-region]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCId :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCRegion] [vpc-id vpc-region])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCId :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone.VPC/VPCRegion] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbPassword (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbUser (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/RdsDbInstanceArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack)
(clojure.core/defn ->RdsDbInstance "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance" [& [db-password db-user rds-db-instance-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbPassword :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbUser :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/RdsDbInstanceArn] [db-password db-user rds-db-instance-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance m__1575651__auto__))))))
(clojure.core/defn map->RdsDbInstance "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance" [{:keys [db-password db-user rds-db-instance-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbPassword :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbUser :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/RdsDbInstanceArn] [db-password db-user rds-db-instance-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbPassword :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/DbUser :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack.RdsDbInstance/RdsDbInstanceArn] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/CpuThreshold (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/IgnoreMetricsTime (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/InstanceCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/LoadThreshold (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/MemoryThreshold (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/ThresholdsWaitTime (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer)
(clojure.core/defn ->AutoScalingThresholds "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds" [& [cpu-threshold ignore-metrics-time instance-count load-threshold memory-threshold thresholds-wait-time]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/CpuThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/IgnoreMetricsTime :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/InstanceCount :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/LoadThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/MemoryThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/ThresholdsWaitTime] [cpu-threshold ignore-metrics-time instance-count load-threshold memory-threshold thresholds-wait-time])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds m__1575651__auto__))))))
(clojure.core/defn map->AutoScalingThresholds "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds" [{:keys [cpu-threshold ignore-metrics-time instance-count load-threshold memory-threshold thresholds-wait-time]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/CpuThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/IgnoreMetricsTime :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/InstanceCount :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/LoadThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/MemoryThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/ThresholdsWaitTime] [cpu-threshold ignore-metrics-time instance-count load-threshold memory-threshold thresholds-wait-time])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoScalingThresholds (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/CpuThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/IgnoreMetricsTime :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/InstanceCount :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/LoadThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/MemoryThreshold :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer.AutoScalingThresholds/ThresholdsWaitTime]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Event (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Function (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->LambdaConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration" [& [event function filter]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Function :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Filter] [event function filter])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration m__1575651__auto__))))))
(clojure.core/defn map->LambdaConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration" [{:keys [event function filter]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Function :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Filter] [event function filter])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LambdaConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Event :crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Function] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.LambdaConfiguration/Filter]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Actions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Action) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/AwsIotSqlVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/RuleDisabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Sql (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->TopicRulePayload "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload" [& [actions rule-disabled sql aws-iot-sql-version description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Actions :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/RuleDisabled :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Sql :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/AwsIotSqlVersion :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Description] [actions rule-disabled sql aws-iot-sql-version description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload m__1575651__auto__))))))
(clojure.core/defn map->TopicRulePayload "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload" [{:keys [actions rule-disabled sql aws-iot-sql-version description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Actions :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/RuleDisabled :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Sql :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/AwsIotSqlVersion :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Description] [actions rule-disabled sql aws-iot-sql-version description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Actions :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/RuleDisabled :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Sql] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/AwsIotSqlVersion :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.TopicRulePayload/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.core/defn ->EncryptionKey "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey" [& [id type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Id :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Type] [id type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey m__1575651__auto__))))))
(clojure.core/defn map->EncryptionKey "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey" [{:keys [id type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Id :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Type] [id type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/EncryptionKey (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Id :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline.EncryptionKey/Type] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/DeviceName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/NoDevice (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/VirtualName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.core/defn ->BlockDeviceMappings "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings" [& [device-name ebs no-device virtual-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/DeviceName :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/Ebs :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/NoDevice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings m__1575651__auto__))))))
(clojure.core/defn map->BlockDeviceMappings "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings" [{:keys [device-name ebs no-device virtual-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/DeviceName :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/Ebs :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/NoDevice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/VirtualName] [device-name ebs no-device virtual-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/BlockDeviceMappings (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/DeviceName] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/Ebs :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/NoDevice :crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet.BlockDeviceMappings/VirtualName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy)
(clojure.core/defn ->StepAdjustment "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment" [& [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound] [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__))))))
(clojure.core/defn map->StepAdjustment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment" [{:keys [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound] [scaling-adjustment metric-interval-lower-bound metric-interval-upper-bound])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/ScalingAdjustment] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalLowerBound :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy.StepAdjustment/MetricIntervalUpperBound]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/TargetGroupArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener)
(clojure.core/defn ->Action "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action" [& [target-group-arn type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/TargetGroupArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/Type] [target-group-arn type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action m__1575651__auto__))))))
(clojure.core/defn map->Action "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action" [{:keys [target-group-arn type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/TargetGroupArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/Type] [target-group-arn type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/TargetGroupArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener.Action/Type] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.core/defn ->OriginCustomHeader "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader" [& [header-name header-value]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderName :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderValue] [header-name header-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader m__1575651__auto__))))))
(clojure.core/defn map->OriginCustomHeader "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader" [{:keys [header-name header-value]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderName :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderValue] [header-name header-value])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/OriginCustomHeader (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderName :crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution.OriginCustomHeader/HeaderValue] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyField (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/PayloadField (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyField (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyValue (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/TableName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.core/defn ->DynamoDBAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction" [& [hash-key-field hash-key-value range-key-field range-key-value role-arn table-name payload-field]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyField :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyField :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/TableName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/PayloadField] [hash-key-field hash-key-value range-key-field range-key-value role-arn table-name payload-field])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction m__1575651__auto__))))))
(clojure.core/defn map->DynamoDBAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction" [{:keys [hash-key-field hash-key-value range-key-field range-key-value role-arn table-name payload-field]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyField :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyField :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/TableName :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/PayloadField] [hash-key-field hash-key-value range-key-field range-key-value role-arn table-name payload-field])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/DynamoDBAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyField :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/HashKeyValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyField :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RangeKeyValue :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/RoleArn :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/TableName] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule.DynamoDBAction/PayloadField]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion)
(clojure.core/defn ->SourceBundle "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle" [& [s-3-bucket s-3-key]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Bucket :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Key] [s-3-bucket s-3-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle m__1575651__auto__))))))
(clojure.core/defn map->SourceBundle "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle" [{:keys [s-3-bucket s-3-key]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Bucket :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Key] [s-3-bucket s-3-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Bucket :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion.SourceBundle/S3Key] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration/NoEncryptionConfig (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.core/defn ->EncryptionConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration" [& [kms-encryption-config no-encryption-config]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration/KMSEncryptionConfig :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration/NoEncryptionConfig] [kms-encryption-config no-encryption-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration m__1575651__auto__))))))
(clojure.core/defn map->EncryptionConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration" [{:keys [kms-encryption-config no-encryption-config]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration/KMSEncryptionConfig :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration/NoEncryptionConfig] [kms-encryption-config no-encryption-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/EncryptionConfiguration (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration/KMSEncryptionConfig :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream.EncryptionConfiguration/NoEncryptionConfig]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/CookieName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->AppCookieStickinessPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy" [& [cookie-name policy-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/CookieName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/PolicyName] [cookie-name policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy m__1575651__auto__))))))
(clojure.core/defn map->AppCookieStickinessPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy" [{:keys [cookie-name policy-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/CookieName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/PolicyName] [cookie-name policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/CookieName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.AppCookieStickinessPolicy/PolicyName] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/ETag (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Key (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi)
(clojure.core/defn ->S3Location "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location" [& [bucket e-tag key version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/ETag :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Key :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Version] [bucket e-tag key version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location m__1575651__auto__))))))
(clojure.core/defn map->S3Location "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location" [{:keys [bucket e-tag key version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/ETag :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Key :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Version] [bucket e-tag key version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/S3Location (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Bucket :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/ETag :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Key :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi.S3Location/Version]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Prefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionExpirationInDays (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationInDays (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Status (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationDate (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Id (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.core/defn ->Rule "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule" [& [status expiration-date expiration-in-days id noncurrent-version-expiration-in-days noncurrent-version-transition noncurrent-version-transitions prefix transition transitions]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Status :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationDate :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationInDays :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Id :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionExpirationInDays :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionTransition :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionTransitions :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Prefix :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Transition :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Transitions] [status expiration-date expiration-in-days id noncurrent-version-expiration-in-days noncurrent-version-transition noncurrent-version-transitions prefix transition transitions])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule m__1575651__auto__))))))
(clojure.core/defn map->Rule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule" [{:keys [status expiration-date expiration-in-days id noncurrent-version-expiration-in-days noncurrent-version-transition noncurrent-version-transitions prefix transition transitions]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Status :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationDate :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationInDays :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Id :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionExpirationInDays :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionTransition :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionTransitions :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Prefix :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Transition :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Transitions] [status expiration-date expiration-in-days id noncurrent-version-expiration-in-days noncurrent-version-transition noncurrent-version-transitions prefix transition transitions])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Rule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Status] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationDate :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/ExpirationInDays :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Id :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionExpirationInDays :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionTransition :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/NoncurrentVersionTransitions :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Prefix :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Transition :crucible.generated.ap-northeast-1.AWS.S3.Bucket.Rule/Transitions]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/HealthyThreshold (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Interval (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Target (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Timeout (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/UnhealthyThreshold (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.core/defn ->HealthCheck "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck" [& [healthy-threshold interval target timeout unhealthy-threshold]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/HealthyThreshold :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Interval :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Target :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Timeout :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/UnhealthyThreshold] [healthy-threshold interval target timeout unhealthy-threshold])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck m__1575651__auto__))))))
(clojure.core/defn map->HealthCheck "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck" [{:keys [healthy-threshold interval target timeout unhealthy-threshold]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/HealthyThreshold :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Interval :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Target :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Timeout :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/UnhealthyThreshold] [healthy-threshold interval target timeout unhealthy-threshold])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/HealthyThreshold :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Interval :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Target :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/Timeout :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer.HealthCheck/UnhealthyThreshold] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CachingEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Variables (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheTtlInSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ClientCertificateId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MetricsEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingBurstLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterSize (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/DataTraceEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheDataEncrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MethodSettings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MethodSetting) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingRateLimit (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/StageName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/LoggingLevel (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment)
(clojure.core/defn ->StageDescription "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription" [& [cache-cluster-enabled cache-cluster-size cache-data-encrypted cache-ttl-in-seconds caching-enabled client-certificate-id data-trace-enabled description logging-level method-settings metrics-enabled stage-name throttling-burst-limit throttling-rate-limit variables]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterSize :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ClientCertificateId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MethodSettings :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/StageName :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingRateLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Variables] [cache-cluster-enabled cache-cluster-size cache-data-encrypted cache-ttl-in-seconds caching-enabled client-certificate-id data-trace-enabled description logging-level method-settings metrics-enabled stage-name throttling-burst-limit throttling-rate-limit variables])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription m__1575651__auto__))))))
(clojure.core/defn map->StageDescription "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription" [{:keys [cache-cluster-enabled cache-cluster-size cache-data-encrypted cache-ttl-in-seconds caching-enabled client-certificate-id data-trace-enabled description logging-level method-settings metrics-enabled stage-name throttling-burst-limit throttling-rate-limit variables]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterSize :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ClientCertificateId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MethodSettings :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/StageName :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingRateLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Variables] [cache-cluster-enabled cache-cluster-size cache-data-encrypted cache-ttl-in-seconds caching-enabled client-certificate-id data-trace-enabled description logging-level method-settings metrics-enabled stage-name throttling-burst-limit throttling-rate-limit variables])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheClusterSize :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheDataEncrypted :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CacheTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/CachingEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ClientCertificateId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/DataTraceEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/LoggingLevel :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MethodSettings :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/MetricsEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/StageName :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingBurstLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/ThrottlingRateLimit :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment.StageDescription/Variables]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/BatchSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/EventSourceArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/FunctionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/StartingPosition (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda)
(clojure.core/defn ->EventSourceMapping "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping" [& [event-source-arn function-name starting-position batch-size enabled]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/EventSourceArn :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/StartingPosition :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/BatchSize :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/Enabled] [event-source-arn function-name starting-position batch-size enabled])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping m__1575651__auto__))))))
(clojure.core/defn map->EventSourceMapping "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping" [{:keys [event-source-arn function-name starting-position batch-size enabled]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/EventSourceArn :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/StartingPosition :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/BatchSize :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/Enabled] [event-source-arn function-name starting-position batch-size enabled])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda/EventSourceMapping (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/EventSourceArn :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/StartingPosition] :opt [:crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/BatchSize :crucible.generated.ap-northeast-1.AWS.Lambda.EventSourceMapping/Enabled]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheNodeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSubnetGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumNodeGroups (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotArns (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SecurityGroupIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredMaintenanceWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutoMinorVersionUpgrade (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicasPerNodeGroup (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredCacheClusterAZs (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PrimaryClusterId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/EngineVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NotificationTopicArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshottingClusterId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheParameterGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotRetentionLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutomaticFailoverEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumCacheClusters (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Engine (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupDescription (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSecurityGroupNames (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache)
(clojure.core/defn ->ReplicationGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup" [& [replication-group-description auto-minor-version-upgrade automatic-failover-enabled cache-node-type cache-parameter-group-name cache-security-group-names cache-subnet-group-name engine engine-version node-group-configuration notification-topic-arn num-cache-clusters num-node-groups port preferred-cache-cluster-a-zs preferred-maintenance-window primary-cluster-id replicas-per-node-group replication-group-id security-group-ids snapshot-arns snapshot-name snapshot-retention-limit snapshot-window snapshotting-cluster-id tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupDescription :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutomaticFailoverEnabled :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheNodeType :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheParameterGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSecurityGroupNames :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSubnetGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Engine :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/EngineVersion :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NotificationTopicArn :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumCacheClusters :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumNodeGroups :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Port :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredCacheClusterAZs :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PrimaryClusterId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicasPerNodeGroup :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotArns :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotRetentionLimit :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshottingClusterId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Tags] [replication-group-description auto-minor-version-upgrade automatic-failover-enabled cache-node-type cache-parameter-group-name cache-security-group-names cache-subnet-group-name engine engine-version node-group-configuration notification-topic-arn num-cache-clusters num-node-groups port preferred-cache-cluster-a-zs preferred-maintenance-window primary-cluster-id replicas-per-node-group replication-group-id security-group-ids snapshot-arns snapshot-name snapshot-retention-limit snapshot-window snapshotting-cluster-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup m__1575651__auto__))))))
(clojure.core/defn map->ReplicationGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup" [{:keys [replication-group-description auto-minor-version-upgrade automatic-failover-enabled cache-node-type cache-parameter-group-name cache-security-group-names cache-subnet-group-name engine engine-version node-group-configuration notification-topic-arn num-cache-clusters num-node-groups port preferred-cache-cluster-a-zs preferred-maintenance-window primary-cluster-id replicas-per-node-group replication-group-id security-group-ids snapshot-arns snapshot-name snapshot-retention-limit snapshot-window snapshotting-cluster-id tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupDescription :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutomaticFailoverEnabled :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheNodeType :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheParameterGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSecurityGroupNames :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSubnetGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Engine :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/EngineVersion :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NotificationTopicArn :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumCacheClusters :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumNodeGroups :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Port :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredCacheClusterAZs :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PrimaryClusterId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicasPerNodeGroup :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotArns :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotRetentionLimit :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshottingClusterId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Tags] [replication-group-description auto-minor-version-upgrade automatic-failover-enabled cache-node-type cache-parameter-group-name cache-security-group-names cache-subnet-group-name engine engine-version node-group-configuration notification-topic-arn num-cache-clusters num-node-groups port preferred-cache-cluster-a-zs preferred-maintenance-window primary-cluster-id replicas-per-node-group replication-group-id security-group-ids snapshot-arns snapshot-name snapshot-retention-limit snapshot-window snapshotting-cluster-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache/ReplicationGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupDescription] :opt [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/AutomaticFailoverEnabled :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheNodeType :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheParameterGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSecurityGroupNames :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/CacheSubnetGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Engine :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/EngineVersion :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NodeGroupConfiguration :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NotificationTopicArn :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumCacheClusters :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/NumNodeGroups :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Port :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredCacheClusterAZs :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/PrimaryClusterId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicasPerNodeGroup :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/ReplicationGroupId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotArns :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotName :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotRetentionLimit :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshotWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/SnapshottingClusterId :crucible.generated.ap-northeast-1.AWS.ElastiCache.ReplicationGroup/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/ApplicationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk)
(clojure.core/defn ->Application "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application" [& [application-name description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/Description] [application-name description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application m__1575651__auto__))))))
(clojure.core/defn map->Application "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application" [{:keys [application-name description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/Description] [application-name description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Application (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Application/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/Comment (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSets (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSet) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53)
(clojure.core/defn ->RecordSetGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup" [& [comment hosted-zone-id hosted-zone-name record-sets]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSets] [comment hosted-zone-id hosted-zone-name record-sets])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup m__1575651__auto__))))))
(clojure.core/defn map->RecordSetGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup" [{:keys [comment hosted-zone-id hosted-zone-name record-sets]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSets] [comment hosted-zone-id hosted-zone-name record-sets])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53/RecordSetGroup (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSetGroup/RecordSets]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Subnets (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/CrossZone (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/SecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LoadBalancerName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Scheme (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AvailabilityZones (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Instances (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing)
(clojure.core/defn ->LoadBalancer "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer" [& [listeners access-logging-policy app-cookie-stickiness-policy availability-zones connection-draining-policy connection-settings cross-zone health-check instances lb-cookie-stickiness-policy load-balancer-name policies scheme security-groups subnets tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/CrossZone :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Instances :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LoadBalancerName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Scheme :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/SecurityGroups :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Subnets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Tags] [listeners access-logging-policy app-cookie-stickiness-policy availability-zones connection-draining-policy connection-settings cross-zone health-check instances lb-cookie-stickiness-policy load-balancer-name policies scheme security-groups subnets tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer m__1575651__auto__))))))
(clojure.core/defn map->LoadBalancer "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer" [{:keys [listeners access-logging-policy app-cookie-stickiness-policy availability-zones connection-draining-policy connection-settings cross-zone health-check instances lb-cookie-stickiness-policy load-balancer-name policies scheme security-groups subnets tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/CrossZone :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Instances :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LoadBalancerName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Scheme :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/SecurityGroups :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Subnets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Tags] [listeners access-logging-policy app-cookie-stickiness-policy availability-zones connection-draining-policy connection-settings cross-zone health-check instances lb-cookie-stickiness-policy load-balancer-name policies scheme security-groups subnets tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing/LoadBalancer (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Listeners] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AccessLoggingPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AppCookieStickinessPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionDrainingPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/ConnectionSettings :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/CrossZone :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/HealthCheck :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Instances :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LBCookieStickinessPolicy :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/LoadBalancerName :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Policies :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Scheme :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/SecurityGroups :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Subnets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancing.LoadBalancer/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/FilterPattern (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/LogGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformation) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs)
(clojure.core/defn ->MetricFilter "Constructor for a :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter" [& [filter-pattern log-group-name metric-transformations]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/FilterPattern :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformations] [filter-pattern log-group-name metric-transformations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter m__1575651__auto__))))))
(clojure.core/defn map->MetricFilter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter" [{:keys [filter-pattern log-group-name metric-transformations]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/FilterPattern :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformations] [filter-pattern log-group-name metric-transformations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs/MetricFilter (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/FilterPattern :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.MetricFilter/MetricTransformations] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/LogGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/RetentionInDays (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs)
(clojure.core/defn ->LogGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup" [& [log-group-name retention-in-days]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/RetentionInDays] [log-group-name retention-in-days])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup m__1575651__auto__))))))
(clojure.core/defn map->LogGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup" [{:keys [log-group-name retention-in-days]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/RetentionInDays] [log-group-name retention-in-days])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs.LogGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs/LogGroup (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.LogGroup/RetentionInDays]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Shortname (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnableSsl (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Domains (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Attributes (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSources (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSource) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/StackId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Environment (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnvironmentVariable) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks)
(clojure.core/defn ->App "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks/App" [& [name stack-id type app-source attributes data-sources description domains enable-ssl environment shortname ssl-configuration]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/AppSource :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSources :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Description :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Domains :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnableSsl :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Environment :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Shortname :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration] [name stack-id type app-source attributes data-sources description domains enable-ssl environment shortname ssl-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/App m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/App) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/App m__1575651__auto__))))))
(clojure.core/defn map->App "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks/App" [{:keys [name stack-id type app-source attributes data-sources description domains enable-ssl environment shortname ssl-configuration]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/AppSource :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSources :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Description :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Domains :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnableSsl :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Environment :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Shortname :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration] [name stack-id type app-source attributes data-sources description domains enable-ssl environment shortname ssl-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/App m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/App) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/App m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.App)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks/App (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Type] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.App/AppSource :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/DataSources :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Description :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Domains :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/EnableSsl :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Environment :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/Shortname :crucible.generated.ap-northeast-1.AWS.OpsWorks.App/SslConfiguration]))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront)
(clojure.core/defn ->Distribution "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution" [& [distribution-config]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig] [distribution-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution m__1575651__auto__))))))
(clojure.core/defn map->Distribution "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution" [{:keys [distribution-config]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig] [distribution-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFront/Distribution (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFront.Distribution/DistributionConfig] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/Topics (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS)
(clojure.core/defn ->TopicPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy" [& [policy-document topics]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/Topics] [policy-document topics])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy m__1575651__auto__))))))
(clojure.core/defn map->TopicPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy" [{:keys [policy-document topics]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/Topics] [policy-document topics])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS/TopicPolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.SNS.TopicPolicy/Topics] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ApplicationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/AutoScalingGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentConfigName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilters (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilter) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilters (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilter) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ServiceRoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy)
(clojure.core/defn ->DeploymentGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup" [& [application-name service-role-arn auto-scaling-groups deployment deployment-config-name deployment-group-name ec-2-tag-filters on-premises-instance-tag-filters]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ApplicationName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ServiceRoleArn :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/AutoScalingGroups :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentConfigName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentGroupName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilters :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilters] [application-name service-role-arn auto-scaling-groups deployment deployment-config-name deployment-group-name ec-2-tag-filters on-premises-instance-tag-filters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup m__1575651__auto__))))))
(clojure.core/defn map->DeploymentGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup" [{:keys [application-name service-role-arn auto-scaling-groups deployment deployment-config-name deployment-group-name ec-2-tag-filters on-premises-instance-tag-filters]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ApplicationName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ServiceRoleArn :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/AutoScalingGroups :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentConfigName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentGroupName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilters :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilters] [application-name service-role-arn auto-scaling-groups deployment deployment-config-name deployment-group-name ec-2-tag-filters on-premises-instance-tag-filters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ApplicationName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/ServiceRoleArn] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/AutoScalingGroups :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Deployment :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentConfigName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/DeploymentGroupName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/Ec2TagFilters :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentGroup/OnPremisesInstanceTagFilters]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationCidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationIpv6CidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/GatewayId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/NatGatewayId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/NetworkInterfaceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/RouteTableId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Route/VpcPeeringConnectionId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->Route "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/Route" [& [destination-cidr-block route-table-id destination-ipv-6-cidr-block gateway-id instance-id nat-gateway-id network-interface-id vpc-peering-connection-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationCidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Route/RouteTableId :crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationIpv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Route/GatewayId :crucible.generated.ap-northeast-1.AWS.EC2.Route/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.Route/NatGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.Route/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.Route/VpcPeeringConnectionId] [destination-cidr-block route-table-id destination-ipv-6-cidr-block gateway-id instance-id nat-gateway-id network-interface-id vpc-peering-connection-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Route m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Route) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Route m__1575651__auto__))))))
(clojure.core/defn map->Route "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/Route" [{:keys [destination-cidr-block route-table-id destination-ipv-6-cidr-block gateway-id instance-id nat-gateway-id network-interface-id vpc-peering-connection-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationCidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Route/RouteTableId :crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationIpv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Route/GatewayId :crucible.generated.ap-northeast-1.AWS.EC2.Route/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.Route/NatGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.Route/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.Route/VpcPeeringConnectionId] [destination-cidr-block route-table-id destination-ipv-6-cidr-block gateway-id instance-id nat-gateway-id network-interface-id vpc-peering-connection-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Route m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Route) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Route m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Route)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/Route (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationCidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Route/RouteTableId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Route/DestinationIpv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Route/GatewayId :crucible.generated.ap-northeast-1.AWS.EC2.Route/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.Route/NatGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.Route/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.Route/VpcPeeringConnectionId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.Queue/DelaySeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MaximumMessageSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MessageRetentionPeriod (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.Queue/QueueName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.Queue/ReceiveMessageWaitTimeSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.Queue/RedrivePolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.Queue/VisibilityTimeout (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SQS)
(clojure.core/defn ->Queue "Constructor for a :crucible.generated.ap-northeast-1.AWS.SQS/Queue" [& [delay-seconds maximum-message-size message-retention-period queue-name receive-message-wait-time-seconds redrive-policy visibility-timeout]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SQS.Queue/DelaySeconds :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MaximumMessageSize :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MessageRetentionPeriod :crucible.generated.ap-northeast-1.AWS.SQS.Queue/QueueName :crucible.generated.ap-northeast-1.AWS.SQS.Queue/ReceiveMessageWaitTimeSeconds :crucible.generated.ap-northeast-1.AWS.SQS.Queue/RedrivePolicy :crucible.generated.ap-northeast-1.AWS.SQS.Queue/VisibilityTimeout] [delay-seconds maximum-message-size message-retention-period queue-name receive-message-wait-time-seconds redrive-policy visibility-timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SQS/Queue m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SQS/Queue) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SQS/Queue m__1575651__auto__))))))
(clojure.core/defn map->Queue "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SQS/Queue" [{:keys [delay-seconds maximum-message-size message-retention-period queue-name receive-message-wait-time-seconds redrive-policy visibility-timeout]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SQS.Queue/DelaySeconds :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MaximumMessageSize :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MessageRetentionPeriod :crucible.generated.ap-northeast-1.AWS.SQS.Queue/QueueName :crucible.generated.ap-northeast-1.AWS.SQS.Queue/ReceiveMessageWaitTimeSeconds :crucible.generated.ap-northeast-1.AWS.SQS.Queue/RedrivePolicy :crucible.generated.ap-northeast-1.AWS.SQS.Queue/VisibilityTimeout] [delay-seconds maximum-message-size message-retention-period queue-name receive-message-wait-time-seconds redrive-policy visibility-timeout])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SQS/Queue m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SQS/Queue) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SQS/Queue m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SQS.Queue)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS/Queue (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.SQS.Queue/DelaySeconds :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MaximumMessageSize :crucible.generated.ap-northeast-1.AWS.SQS.Queue/MessageRetentionPeriod :crucible.generated.ap-northeast-1.AWS.SQS.Queue/QueueName :crucible.generated.ap-northeast-1.AWS.SQS.Queue/ReceiveMessageWaitTimeSeconds :crucible.generated.ap-northeast-1.AWS.SQS.Queue/RedrivePolicy :crucible.generated.ap-northeast-1.AWS.SQS.Queue/VisibilityTimeout]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config)
(clojure.core/defn ->ConfigurationRecorder "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder" [& [role-arn name recording-group]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RoleArn :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/Name :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup] [role-arn name recording-group])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder m__1575651__auto__))))))
(clojure.core/defn map->ConfigurationRecorder "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder" [{:keys [role-arn name recording-group]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RoleArn :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/Name :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup] [role-arn name recording-group])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config/ConfigurationRecorder (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RoleArn] :opt [:crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/Name :crucible.generated.ap-northeast-1.AWS.Config.ConfigurationRecorder/RecordingGroup]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User/Groups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User/ManagedPolicyArns (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User/Path (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User/Policies (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.IAM.User/Policy) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.User/UserName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->User "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/User" [& [groups login-profile managed-policy-arns path policies user-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.User/Groups :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile :crucible.generated.ap-northeast-1.AWS.IAM.User/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.User/Path :crucible.generated.ap-northeast-1.AWS.IAM.User/Policies :crucible.generated.ap-northeast-1.AWS.IAM.User/UserName] [groups login-profile managed-policy-arns path policies user-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/User m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/User) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/User m__1575651__auto__))))))
(clojure.core/defn map->User "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/User" [{:keys [groups login-profile managed-policy-arns path policies user-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.User/Groups :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile :crucible.generated.ap-northeast-1.AWS.IAM.User/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.User/Path :crucible.generated.ap-northeast-1.AWS.IAM.User/Policies :crucible.generated.ap-northeast-1.AWS.IAM.User/UserName] [groups login-profile managed-policy-arns path policies user-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/User m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/User) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/User m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.User)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/User (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.IAM.User/Groups :crucible.generated.ap-northeast-1.AWS.IAM.User/LoginProfile :crucible.generated.ap-northeast-1.AWS.IAM.User/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.User/Path :crucible.generated.ap-northeast-1.AWS.IAM.User/Policies :crucible.generated.ap-northeast-1.AWS.IAM.User/UserName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/EnableLogFileValidation (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsLogGroupArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IncludeGlobalServiceEvents (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3BucketName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/KMSKeyId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsRoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3KeyPrefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/SnsTopicName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsLogging (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsMultiRegionTrail (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudTrail)
(clojure.core/defn ->Trail "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail" [& [is-logging s-3-bucket-name cloud-watch-logs-log-group-arn cloud-watch-logs-role-arn enable-log-file-validation include-global-service-events is-multi-region-trail kms-key-id s-3-key-prefix sns-topic-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsLogging :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3BucketName :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsLogGroupArn :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsRoleArn :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/EnableLogFileValidation :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IncludeGlobalServiceEvents :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsMultiRegionTrail :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/KMSKeyId :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3KeyPrefix :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/SnsTopicName] [is-logging s-3-bucket-name cloud-watch-logs-log-group-arn cloud-watch-logs-role-arn enable-log-file-validation include-global-service-events is-multi-region-trail kms-key-id s-3-key-prefix sns-topic-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail m__1575651__auto__))))))
(clojure.core/defn map->Trail "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail" [{:keys [is-logging s-3-bucket-name cloud-watch-logs-log-group-arn cloud-watch-logs-role-arn enable-log-file-validation include-global-service-events is-multi-region-trail kms-key-id s-3-key-prefix sns-topic-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsLogging :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3BucketName :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsLogGroupArn :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsRoleArn :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/EnableLogFileValidation :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IncludeGlobalServiceEvents :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsMultiRegionTrail :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/KMSKeyId :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3KeyPrefix :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/SnsTopicName] [is-logging s-3-bucket-name cloud-watch-logs-log-group-arn cloud-watch-logs-role-arn enable-log-file-validation include-global-service-events is-multi-region-trail kms-key-id s-3-key-prefix sns-topic-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudTrail/Trail (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsLogging :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3BucketName] :opt [:crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsLogGroupArn :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/CloudWatchLogsRoleArn :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/EnableLogFileValidation :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IncludeGlobalServiceEvents :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/IsMultiRegionTrail :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/KMSKeyId :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/S3KeyPrefix :crucible.generated.ap-northeast-1.AWS.CloudTrail.Trail/SnsTopicName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/CreateAlias (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/EnableSso (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Password (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/ShortName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService)
(clojure.core/defn ->MicrosoftAD "Constructor for a :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD" [& [name password vpc-settings create-alias enable-sso short-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Name :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Password :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/CreateAlias :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/EnableSso :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/ShortName] [name password vpc-settings create-alias enable-sso short-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD m__1575651__auto__))))))
(clojure.core/defn map->MicrosoftAD "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD" [{:keys [name password vpc-settings create-alias enable-sso short-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Name :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Password :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/CreateAlias :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/EnableSso :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/ShortName] [name password vpc-settings create-alias enable-sso short-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService/MicrosoftAD (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Name :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/Password :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/VpcSettings] :opt [:crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/CreateAlias :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/EnableSso :crucible.generated.ap-northeast-1.AWS.DirectoryService.MicrosoftAD/ShortName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift)
(clojure.core/defn ->Alias "Constructor for a :crucible.generated.ap-northeast-1.AWS.GameLift/Alias" [& [name routing-strategy description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Description] [name routing-strategy description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift/Alias m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift/Alias) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift/Alias m__1575651__auto__))))))
(clojure.core/defn map->Alias "Convert a map to a :crucible.generated.ap-northeast-1.AWS.GameLift/Alias" [{:keys [name routing-strategy description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Description] [name routing-strategy description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift/Alias m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift/Alias) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift/Alias m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Alias)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift/Alias (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Alias/RoutingStrategy] :opt [:crucible.generated.ap-northeast-1.AWS.GameLift.Alias/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/EventCategories (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SnsTopicArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->EventSubscription "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription" [& [sns-topic-arn enabled event-categories source-ids source-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SnsTopicArn :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/Enabled :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/EventCategories :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceIds :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceType] [sns-topic-arn enabled event-categories source-ids source-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription m__1575651__auto__))))))
(clojure.core/defn map->EventSubscription "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription" [{:keys [sns-topic-arn enabled event-categories source-ids source-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SnsTopicArn :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/Enabled :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/EventCategories :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceIds :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceType] [sns-topic-arn enabled event-categories source-ids source-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/EventSubscription (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SnsTopicArn] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/Enabled :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/EventCategories :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceIds :crucible.generated.ap-northeast-1.AWS.RDS.EventSubscription/SourceType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/BackupRetentionPeriod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/OptionGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/CharacterSetName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PubliclyAccessible (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DomainIAMRoleName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredMaintenanceWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AutoMinorVersionUpgrade (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/VPCSecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUserPassword (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/LicenseModel (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Domain (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllowMajorVersionUpgrade (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllocatedStorage (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/SourceDBInstanceIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringInterval (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Timezone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUsername (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/EngineVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSnapshotIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageEncrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSubnetGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Port (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/KmsKeyId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceClass (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Engine (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBParameterGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringRoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MultiAZ (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBClusterIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredBackupWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->DBInstance "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance" [& [db-instance-class allocated-storage allow-major-version-upgrade auto-minor-version-upgrade availability-zone backup-retention-period character-set-name db-cluster-identifier db-instance-identifier db-name db-parameter-group-name db-security-groups db-snapshot-identifier db-subnet-group-name domain domain-iam-role-name engine engine-version iops kms-key-id license-model master-user-password master-username monitoring-interval monitoring-role-arn multi-az option-group-name port preferred-backup-window preferred-maintenance-window publicly-accessible source-db-instance-identifier storage-encrypted storage-type tags timezone vpc-security-groups]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceClass :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllocatedStorage :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllowMajorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/BackupRetentionPeriod :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/CharacterSetName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBClusterIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBParameterGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSecurityGroups :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSubnetGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Domain :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DomainIAMRoleName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Engine :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/EngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Iops :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/KmsKeyId :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/LicenseModel :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUsername :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringInterval :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringRoleArn :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MultiAZ :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/OptionGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Port :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredBackupWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PubliclyAccessible :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/SourceDBInstanceIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageEncrypted :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageType :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Tags :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Timezone :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/VPCSecurityGroups] [db-instance-class allocated-storage allow-major-version-upgrade auto-minor-version-upgrade availability-zone backup-retention-period character-set-name db-cluster-identifier db-instance-identifier db-name db-parameter-group-name db-security-groups db-snapshot-identifier db-subnet-group-name domain domain-iam-role-name engine engine-version iops kms-key-id license-model master-user-password master-username monitoring-interval monitoring-role-arn multi-az option-group-name port preferred-backup-window preferred-maintenance-window publicly-accessible source-db-instance-identifier storage-encrypted storage-type tags timezone vpc-security-groups])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance m__1575651__auto__))))))
(clojure.core/defn map->DBInstance "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance" [{:keys [db-instance-class allocated-storage allow-major-version-upgrade auto-minor-version-upgrade availability-zone backup-retention-period character-set-name db-cluster-identifier db-instance-identifier db-name db-parameter-group-name db-security-groups db-snapshot-identifier db-subnet-group-name domain domain-iam-role-name engine engine-version iops kms-key-id license-model master-user-password master-username monitoring-interval monitoring-role-arn multi-az option-group-name port preferred-backup-window preferred-maintenance-window publicly-accessible source-db-instance-identifier storage-encrypted storage-type tags timezone vpc-security-groups]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceClass :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllocatedStorage :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllowMajorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/BackupRetentionPeriod :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/CharacterSetName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBClusterIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBParameterGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSecurityGroups :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSubnetGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Domain :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DomainIAMRoleName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Engine :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/EngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Iops :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/KmsKeyId :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/LicenseModel :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUsername :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringInterval :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringRoleArn :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MultiAZ :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/OptionGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Port :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredBackupWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PubliclyAccessible :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/SourceDBInstanceIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageEncrypted :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageType :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Tags :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Timezone :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/VPCSecurityGroups] [db-instance-class allocated-storage allow-major-version-upgrade auto-minor-version-upgrade availability-zone backup-retention-period character-set-name db-cluster-identifier db-instance-identifier db-name db-parameter-group-name db-security-groups db-snapshot-identifier db-subnet-group-name domain domain-iam-role-name engine engine-version iops kms-key-id license-model master-user-password master-username monitoring-interval monitoring-role-arn multi-az option-group-name port preferred-backup-window preferred-maintenance-window publicly-accessible source-db-instance-identifier storage-encrypted storage-type tags timezone vpc-security-groups])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBInstance)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/DBInstance (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceClass] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllocatedStorage :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AllowMajorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/BackupRetentionPeriod :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/CharacterSetName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBClusterIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBInstanceIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBParameterGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSecurityGroups :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DBSubnetGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Domain :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/DomainIAMRoleName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Engine :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/EngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Iops :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/KmsKeyId :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/LicenseModel :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MasterUsername :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringInterval :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MonitoringRoleArn :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/MultiAZ :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/OptionGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Port :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredBackupWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/PubliclyAccessible :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/SourceDBInstanceIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageEncrypted :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/StorageType :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Tags :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/Timezone :crucible.generated.ap-northeast-1.AWS.RDS.DBInstance/VPCSecurityGroups]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/ContentType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Schema (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->Model "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model" [& [rest-api-id content-type description name schema]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/ContentType :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Schema] [rest-api-id content-type description name schema])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model m__1575651__auto__))))))
(clojure.core/defn map->Model "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model" [{:keys [rest-api-id content-type description name schema]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/ContentType :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Schema] [rest-api-id content-type description name schema])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Model)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/Model (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/RestApiId] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/ContentType :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.Model/Schema]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeleteOnTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeviceIndex (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/NetworkInterfaceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->NetworkInterfaceAttachment "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment" [& [device-index instance-id network-interface-id delete-on-termination]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeviceIndex :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeleteOnTermination] [device-index instance-id network-interface-id delete-on-termination])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment m__1575651__auto__))))))
(clojure.core/defn map->NetworkInterfaceAttachment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment" [{:keys [device-index instance-id network-interface-id delete-on-termination]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeviceIndex :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeleteOnTermination] [device-index instance-id network-interface-id delete-on-termination])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterfaceAttachment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeviceIndex :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/NetworkInterfaceId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterfaceAttachment/DeleteOnTermination]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/CIDRIP (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/DBSecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupOwnerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->DBSecurityGroupIngress "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress" [& [db-security-group-name cidrip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/DBSecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/CIDRIP :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupOwnerId] [db-security-group-name cidrip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress m__1575651__auto__))))))
(clojure.core/defn map->DBSecurityGroupIngress "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress" [{:keys [db-security-group-name cidrip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/DBSecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/CIDRIP :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupOwnerId] [db-security-group-name cidrip ec-2-security-group-id ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroupIngress (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/DBSecurityGroupName] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/CIDRIP :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroupIngress/EC2SecurityGroupOwnerId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service/Cluster (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service/DesiredCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancers (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancer) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service/Role (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Service/TaskDefinition (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS)
(clojure.core/defn ->Service "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS/Service" [& [desired-count task-definition cluster deployment-configuration load-balancers role]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Service/DesiredCount :crucible.generated.ap-northeast-1.AWS.ECS.Service/TaskDefinition :crucible.generated.ap-northeast-1.AWS.ECS.Service/Cluster :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancers :crucible.generated.ap-northeast-1.AWS.ECS.Service/Role] [desired-count task-definition cluster deployment-configuration load-balancers role])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS/Service m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS/Service) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS/Service m__1575651__auto__))))))
(clojure.core/defn map->Service "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS/Service" [{:keys [desired-count task-definition cluster deployment-configuration load-balancers role]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Service/DesiredCount :crucible.generated.ap-northeast-1.AWS.ECS.Service/TaskDefinition :crucible.generated.ap-northeast-1.AWS.ECS.Service/Cluster :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancers :crucible.generated.ap-northeast-1.AWS.ECS.Service/Role] [desired-count task-definition cluster deployment-configuration load-balancers role])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS/Service m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS/Service) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS/Service m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.Service)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS/Service (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ECS.Service/DesiredCount :crucible.generated.ap-northeast-1.AWS.ECS.Service/TaskDefinition] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.Service/Cluster :crucible.generated.ap-northeast-1.AWS.ECS.Service/DeploymentConfiguration :crucible.generated.ap-northeast-1.AWS.ECS.Service/LoadBalancers :crucible.generated.ap-northeast-1.AWS.ECS.Service/Role]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainNameServers (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNameServers (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNodeType (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NtpServers (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->DHCPOptions "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions" [& [domain-name domain-name-servers netbios-name-servers netbios-node-type ntp-servers tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainName :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainNameServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNameServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNodeType :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NtpServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/Tags] [domain-name domain-name-servers netbios-name-servers netbios-node-type ntp-servers tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions m__1575651__auto__))))))
(clojure.core/defn map->DHCPOptions "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions" [{:keys [domain-name domain-name-servers netbios-name-servers netbios-node-type ntp-servers tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainName :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainNameServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNameServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNodeType :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NtpServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/Tags] [domain-name domain-name-servers netbios-name-servers netbios-node-type ntp-servers tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/DHCPOptions (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainName :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/DomainNameServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNameServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NetbiosNodeType :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/NtpServers :crucible.generated.ap-northeast-1.AWS.EC2.DHCPOptions/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.CustomResource/ServiceToken (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation)
(clojure.core/defn ->CustomResource "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource" [& [service-token]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFormation.CustomResource/ServiceToken] [service-token])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource m__1575651__auto__))))))
(clojure.core/defn map->CustomResource "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource" [{:keys [service-token]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFormation.CustomResource/ServiceToken] [service-token])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation.CustomResource)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation/CustomResource (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFormation.CustomResource/ServiceToken] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/CreateAlias (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/EnableSso (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Password (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/ShortName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Size (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService)
(clojure.core/defn ->SimpleAD "Constructor for a :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD" [& [name password size vpc-settings create-alias description enable-sso short-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Name :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Password :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Size :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/CreateAlias :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Description :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/EnableSso :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/ShortName] [name password size vpc-settings create-alias description enable-sso short-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD m__1575651__auto__))))))
(clojure.core/defn map->SimpleAD "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD" [{:keys [name password size vpc-settings create-alias description enable-sso short-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Name :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Password :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Size :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/CreateAlias :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Description :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/EnableSso :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/ShortName] [name password size vpc-settings create-alias description enable-sso short-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DirectoryService/SimpleAD (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Name :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Password :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Size :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/VpcSettings] :opt [:crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/CreateAlias :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/Description :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/EnableSso :crucible.generated.ap-northeast-1.AWS.DirectoryService.SimpleAD/ShortName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Group/GroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Group/ManagedPolicyArns (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Group/Path (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policies (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policy) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->Group "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/Group" [& [group-name managed-policy-arns path policies]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Group/GroupName :crucible.generated.ap-northeast-1.AWS.IAM.Group/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.Group/Path :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policies] [group-name managed-policy-arns path policies])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/Group m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/Group) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/Group m__1575651__auto__))))))
(clojure.core/defn map->Group "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/Group" [{:keys [group-name managed-policy-arns path policies]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Group/GroupName :crucible.generated.ap-northeast-1.AWS.IAM.Group/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.Group/Path :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policies] [group-name managed-policy-arns path policies])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/Group m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/Group) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/Group m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.Group)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/Group (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.IAM.Group/GroupName :crucible.generated.ap-northeast-1.AWS.IAM.Group/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.Group/Path :crucible.generated.ap-northeast-1.AWS.IAM.Group/Policies]))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->SpotFleet "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet" [& [spot-fleet-request-config-data]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData] [spot-fleet-request-config-data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet m__1575651__auto__))))))
(clojure.core/defn map->SpotFleet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet" [{:keys [spot-fleet-request-config-data]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData] [spot-fleet-request-config-data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/SpotFleet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SpotFleet/SpotFleetRequestConfigData] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Account/CloudWatchRoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->Account "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account" [& [cloud-watch-role-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Account/CloudWatchRoleArn] [cloud-watch-role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account m__1575651__auto__))))))
(clojure.core/defn map->Account "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account" [{:keys [cloud-watch-role-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Account/CloudWatchRoleArn] [cloud-watch-role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Account)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/Account (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Account/CloudWatchRoleArn]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Action (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/FunctionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Principal (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceAccount (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda)
(clojure.core/defn ->Permission "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda/Permission" [& [action function-name principal source-account source-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Action :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Principal :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceAccount :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceArn] [action function-name principal source-account source-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Permission m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Permission) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Permission m__1575651__auto__))))))
(clojure.core/defn map->Permission "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda/Permission" [{:keys [action function-name principal source-account source-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Action :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Principal :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceAccount :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceArn] [action function-name principal source-account source-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Permission m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Permission) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Permission m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Permission)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda/Permission (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Action :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/Principal] :opt [:crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceAccount :crucible.generated.ap-northeast-1.AWS.Lambda.Permission/SourceArn]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Path (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Roles (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->InstanceProfile "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile" [& [path roles]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Path :crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Roles] [path roles])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile m__1575651__auto__))))))
(clojure.core/defn map->InstanceProfile "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile" [{:keys [path roles]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Path :crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Roles] [path roles])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/InstanceProfile (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Path :crucible.generated.ap-northeast-1.AWS.IAM.InstanceProfile/Roles] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/Queues (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SQS)
(clojure.core/defn ->QueuePolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy" [& [policy-document queues]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/Queues] [policy-document queues])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy m__1575651__auto__))))))
(clojure.core/defn map->QueuePolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy" [{:keys [policy-document queues]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/Queues] [policy-document queues])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SQS/QueuePolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.SQS.QueuePolicy/Queues] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/DocumentVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/Parameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.SSM.Association/ParameterValues)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/ScheduleExpression (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Association/Targets (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.SSM.Association/Target) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM)
(clojure.core/defn ->Association "Constructor for a :crucible.generated.ap-northeast-1.AWS.SSM/Association" [& [name document-version instance-id parameters schedule-expression targets]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Association/Name :crucible.generated.ap-northeast-1.AWS.SSM.Association/DocumentVersion :crucible.generated.ap-northeast-1.AWS.SSM.Association/InstanceId :crucible.generated.ap-northeast-1.AWS.SSM.Association/Parameters :crucible.generated.ap-northeast-1.AWS.SSM.Association/ScheduleExpression :crucible.generated.ap-northeast-1.AWS.SSM.Association/Targets] [name document-version instance-id parameters schedule-expression targets])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM/Association m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM/Association) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM/Association m__1575651__auto__))))))
(clojure.core/defn map->Association "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SSM/Association" [{:keys [name document-version instance-id parameters schedule-expression targets]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Association/Name :crucible.generated.ap-northeast-1.AWS.SSM.Association/DocumentVersion :crucible.generated.ap-northeast-1.AWS.SSM.Association/InstanceId :crucible.generated.ap-northeast-1.AWS.SSM.Association/Parameters :crucible.generated.ap-northeast-1.AWS.SSM.Association/ScheduleExpression :crucible.generated.ap-northeast-1.AWS.SSM.Association/Targets] [name document-version instance-id parameters schedule-expression targets])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM/Association m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM/Association) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM/Association m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM.Association)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM/Association (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.SSM.Association/Name] :opt [:crucible.generated.ap-northeast-1.AWS.SSM.Association/DocumentVersion :crucible.generated.ap-northeast-1.AWS.SSM.Association/InstanceId :crucible.generated.ap-northeast-1.AWS.SSM.Association/Parameters :crucible.generated.ap-northeast-1.AWS.SSM.Association/ScheduleExpression :crucible.generated.ap-northeast-1.AWS.SSM.Association/Targets]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleAction (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/NetworkAclId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleNumber (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Egress (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/CidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Ipv6CidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Protocol (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->NetworkAclEntry "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry" [& [cidr-block network-acl-id protocol rule-action rule-number egress icmp ipv-6-cidr-block port-range]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/NetworkAclId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Protocol :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleAction :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleNumber :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Egress :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Ipv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange] [cidr-block network-acl-id protocol rule-action rule-number egress icmp ipv-6-cidr-block port-range])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry m__1575651__auto__))))))
(clojure.core/defn map->NetworkAclEntry "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry" [{:keys [cidr-block network-acl-id protocol rule-action rule-number egress icmp ipv-6-cidr-block port-range]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/NetworkAclId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Protocol :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleAction :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleNumber :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Egress :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Ipv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange] [cidr-block network-acl-id protocol rule-action rule-number egress icmp ipv-6-cidr-block port-range])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAclEntry (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/NetworkAclId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Protocol :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleAction :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/RuleNumber] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Egress :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Icmp :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/Ipv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAclEntry/PortRange]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/AutoScalingGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/DesiredCapacity (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/EndTime (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MaxSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MinSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/Recurrence (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/StartTime (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling)
(clojure.core/defn ->ScheduledAction "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction" [& [auto-scaling-group-name desired-capacity end-time max-size min-size recurrence start-time]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/AutoScalingGroupName :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/DesiredCapacity :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/EndTime :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MaxSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MinSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/Recurrence :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/StartTime] [auto-scaling-group-name desired-capacity end-time max-size min-size recurrence start-time])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction m__1575651__auto__))))))
(clojure.core/defn map->ScheduledAction "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction" [{:keys [auto-scaling-group-name desired-capacity end-time max-size min-size recurrence start-time]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/AutoScalingGroupName :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/DesiredCapacity :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/EndTime :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MaxSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MinSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/Recurrence :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/StartTime] [auto-scaling-group-name desired-capacity end-time max-size min-size recurrence start-time])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScheduledAction (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/AutoScalingGroupName] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/DesiredCapacity :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/EndTime :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MaxSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/MinSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/Recurrence :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScheduledAction/StartTime]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/MetricName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Rules (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/ActivatedRule) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF)
(clojure.core/defn ->WebACL "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF/WebACL" [& [default-action metric-name name rules]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL/DefaultAction :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/MetricName :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Name :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Rules] [default-action metric-name name rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/WebACL m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/WebACL) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/WebACL m__1575651__auto__))))))
(clojure.core/defn map->WebACL "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF/WebACL" [{:keys [default-action metric-name name rules]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL/DefaultAction :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/MetricName :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Name :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Rules] [default-action metric-name name rules])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/WebACL m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/WebACL) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/WebACL m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.WebACL)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF/WebACL (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL/DefaultAction :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/MetricName :crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Name] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.WebACL/Rules]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/RouteTableId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->SubnetRouteTableAssociation "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation" [& [route-table-id subnet-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/RouteTableId :crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/SubnetId] [route-table-id subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation m__1575651__auto__))))))
(clojure.core/defn map->SubnetRouteTableAssociation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation" [{:keys [route-table-id subnet-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/RouteTableId :crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/SubnetId] [route-table-id subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/SubnetRouteTableAssociation (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/RouteTableId :crucible.generated.ap-northeast-1.AWS.EC2.SubnetRouteTableAssociation/SubnetId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/RouteTableIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/ServiceName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPCEndpoint "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint" [& [service-name vpc-id policy-document route-table-ids]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/ServiceName :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/PolicyDocument :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/RouteTableIds] [service-name vpc-id policy-document route-table-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint m__1575651__auto__))))))
(clojure.core/defn map->VPCEndpoint "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint" [{:keys [service-name vpc-id policy-document route-table-ids]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/ServiceName :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/PolicyDocument :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/RouteTableIds] [service-name vpc-id policy-document route-table-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPCEndpoint (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/ServiceName :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/PolicyDocument :crucible.generated.ap-northeast-1.AWS.EC2.VPCEndpoint/RouteTableIds]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->RouteTable "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable" [& [vpc-id tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/Tags] [vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable m__1575651__auto__))))))
(clojure.core/defn map->RouteTable "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable" [{:keys [vpc-id tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/Tags] [vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.RouteTable)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/RouteTable (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.RouteTable/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Actions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Action) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Conditions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/RuleCondition) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/ListenerArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Priority (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2)
(clojure.core/defn ->ListenerRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule" [& [actions conditions listener-arn priority]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Actions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Conditions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/ListenerArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Priority] [actions conditions listener-arn priority])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule m__1575651__auto__))))))
(clojure.core/defn map->ListenerRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule" [{:keys [actions conditions listener-arn priority]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Actions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Conditions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/ListenerArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Priority] [actions conditions listener-arn priority])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/ListenerRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Actions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Conditions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/ListenerArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.ListenerRule/Priority] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/DBSecurityGroupIngress (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Ingress) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/EC2VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/GroupDescription (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->DBSecurityGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup" [& [db-security-group-ingress group-description ec-2-vpc-id tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/DBSecurityGroupIngress :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/GroupDescription :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/EC2VpcId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Tags] [db-security-group-ingress group-description ec-2-vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup m__1575651__auto__))))))
(clojure.core/defn map->DBSecurityGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup" [{:keys [db-security-group-ingress group-description ec-2-vpc-id tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/DBSecurityGroupIngress :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/GroupDescription :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/EC2VpcId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Tags] [db-security-group-ingress group-description ec-2-vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/DBSecurityGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/DBSecurityGroupIngress :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/GroupDescription] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/EC2VpcId :crucible.generated.ap-northeast-1.AWS.RDS.DBSecurityGroup/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryPolicyText (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECR)
(clojure.core/defn ->Repository "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECR/Repository" [& [repository-name repository-policy-text]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryName :crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryPolicyText] [repository-name repository-policy-text])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECR/Repository m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECR/Repository) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECR/Repository m__1575651__auto__))))))
(clojure.core/defn map->Repository "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECR/Repository" [{:keys [repository-name repository-policy-text]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryName :crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryPolicyText] [repository-name repository-policy-text])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECR/Repository m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECR/Repository) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECR/Repository m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECR.Repository)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECR/Repository (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryName :crucible.generated.ap-northeast-1.AWS.ECR.Repository/RepositoryPolicyText]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MaxCapacity (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MinCapacity (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ResourceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/RoleARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ScalableDimension (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ServiceNamespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling)
(clojure.core/defn ->ScalableTarget "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget" [& [max-capacity min-capacity resource-id role-arn scalable-dimension service-namespace]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MaxCapacity :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MinCapacity :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ResourceId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/RoleARN :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ScalableDimension :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ServiceNamespace] [max-capacity min-capacity resource-id role-arn scalable-dimension service-namespace])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget m__1575651__auto__))))))
(clojure.core/defn map->ScalableTarget "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget" [{:keys [max-capacity min-capacity resource-id role-arn scalable-dimension service-namespace]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MaxCapacity :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MinCapacity :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ResourceId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/RoleARN :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ScalableDimension :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ServiceNamespace] [max-capacity min-capacity resource-id role-arn scalable-dimension service-namespace])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalableTarget (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MaxCapacity :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/MinCapacity :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ResourceId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/RoleARN :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ScalableDimension :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalableTarget/ServiceNamespace] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/NetworkAclId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->SubnetNetworkAclAssociation "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation" [& [network-acl-id subnet-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/NetworkAclId :crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/SubnetId] [network-acl-id subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation m__1575651__auto__))))))
(clojure.core/defn map->SubnetNetworkAclAssociation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation" [{:keys [network-acl-id subnet-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/NetworkAclId :crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/SubnetId] [network-acl-id subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/SubnetNetworkAclAssociation (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/NetworkAclId :crucible.generated.ap-northeast-1.AWS.EC2.SubnetNetworkAclAssociation/SubnetId] :opt []))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation)
(clojure.core/defn ->WaitConditionHandle "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle" [& []] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [] [])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle m__1575651__auto__))))))
(clojure.core/defn map->WaitConditionHandle "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle" [{:keys []}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [] [])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitConditionHandle)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitConditionHandle (clojure.spec/keys :req [] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->NetworkAcl "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl" [& [vpc-id tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/Tags] [vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl m__1575651__auto__))))))
(clojure.core/defn map->NetworkAcl "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl" [{:keys [vpc-id tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/Tags] [vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/NetworkAcl (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkAcl/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Groups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Roles (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Users (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->Policy "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/Policy" [& [policy-document policy-name groups roles users]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyName :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Groups :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Roles :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Users] [policy-document policy-name groups roles users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/Policy m__1575651__auto__))))))
(clojure.core/defn map->Policy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/Policy" [{:keys [policy-document policy-name groups roles users]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyName :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Groups :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Roles :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Users] [policy-document policy-name groups roles users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/Policy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.Policy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/Policy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Policy/PolicyName] :opt [:crucible.generated.ap-northeast-1.AWS.IAM.Policy/Groups :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Roles :crucible.generated.ap-northeast-1.AWS.IAM.Policy/Users]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ApiKeyRequired (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestModels (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestParameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/boolean?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ResourceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizationType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/HttpMethod (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponse) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->Method "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method" [& [http-method api-key-required authorization-type authorizer-id integration method-responses request-models request-parameters resource-id rest-api-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ApiKeyRequired :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizationType :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizerId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponses :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestModels :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ResourceId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RestApiId] [http-method api-key-required authorization-type authorizer-id integration method-responses request-models request-parameters resource-id rest-api-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method m__1575651__auto__))))))
(clojure.core/defn map->Method "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method" [{:keys [http-method api-key-required authorization-type authorizer-id integration method-responses request-models request-parameters resource-id rest-api-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/HttpMethod :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ApiKeyRequired :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizationType :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizerId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponses :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestModels :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ResourceId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RestApiId] [http-method api-key-required authorization-type authorizer-id integration method-responses request-models request-parameters resource-id rest-api-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Method)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/Method (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/HttpMethod] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ApiKeyRequired :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizationType :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/AuthorizerId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/Integration :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/MethodResponses :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestModels :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RequestParameters :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/ResourceId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Method/RestApiId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.Cluster/ClusterName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS)
(clojure.core/defn ->Cluster "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS/Cluster" [& [cluster-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Cluster/ClusterName] [cluster-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS/Cluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS/Cluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS/Cluster m__1575651__auto__))))))
(clojure.core/defn map->Cluster "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS/Cluster" [{:keys [cluster-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.Cluster/ClusterName] [cluster-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS/Cluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS/Cluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS/Cluster m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.Cluster)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS/Cluster (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.Cluster/ClusterName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.Thing/ThingName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT)
(clojure.core/defn ->Thing "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT/Thing" [& [attribute-payload thing-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload :crucible.generated.ap-northeast-1.AWS.IoT.Thing/ThingName] [attribute-payload thing-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/Thing m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/Thing) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/Thing m__1575651__auto__))))))
(clojure.core/defn map->Thing "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT/Thing" [{:keys [attribute-payload thing-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload :crucible.generated.ap-northeast-1.AWS.IoT.Thing/ThingName] [attribute-payload thing-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/Thing m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/Thing) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/Thing m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.Thing)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT/Thing (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.Thing/AttributePayload :crucible.generated.ap-northeast-1.AWS.IoT.Thing/ThingName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/PlacementTenancy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KernelId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/AssociatePublicIpAddress (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceMonitoring (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ImageId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/EbsOptimized (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KeyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SpotPrice (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/RamDiskId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCSecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMappings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMapping) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/UserData (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/IamInstanceProfile (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling)
(clojure.core/defn ->LaunchConfiguration "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration" [& [image-id instance-type associate-public-ip-address block-device-mappings classic-link-vpc-id classic-link-vpc-security-groups ebs-optimized iam-instance-profile instance-id instance-monitoring kernel-id key-name placement-tenancy ram-disk-id security-groups spot-price user-data]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ImageId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceType :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCSecurityGroups :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/EbsOptimized :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceMonitoring :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KernelId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KeyName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/PlacementTenancy :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/RamDiskId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SecurityGroups :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SpotPrice :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/UserData] [image-id instance-type associate-public-ip-address block-device-mappings classic-link-vpc-id classic-link-vpc-security-groups ebs-optimized iam-instance-profile instance-id instance-monitoring kernel-id key-name placement-tenancy ram-disk-id security-groups spot-price user-data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration m__1575651__auto__))))))
(clojure.core/defn map->LaunchConfiguration "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration" [{:keys [image-id instance-type associate-public-ip-address block-device-mappings classic-link-vpc-id classic-link-vpc-security-groups ebs-optimized iam-instance-profile instance-id instance-monitoring kernel-id key-name placement-tenancy ram-disk-id security-groups spot-price user-data]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ImageId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceType :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCSecurityGroups :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/EbsOptimized :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceMonitoring :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KernelId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KeyName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/PlacementTenancy :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/RamDiskId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SecurityGroups :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SpotPrice :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/UserData] [image-id instance-type associate-public-ip-address block-device-mappings classic-link-vpc-id classic-link-vpc-security-groups ebs-optimized iam-instance-profile instance-id instance-monitoring kernel-id key-name placement-tenancy ram-disk-id security-groups spot-price user-data])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling/LaunchConfiguration (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ImageId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceType] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/AssociatePublicIpAddress :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/ClassicLinkVPCSecurityGroups :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/EbsOptimized :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/InstanceMonitoring :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KernelId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/KeyName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/PlacementTenancy :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/RamDiskId :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SecurityGroups :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/SpotPrice :crucible.generated.ap-northeast-1.AWS.AutoScaling.LaunchConfiguration/UserData]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ApplicationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/EnvironmentId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/OptionSettings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ConfigurationOptionSetting) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SolutionStackName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk)
(clojure.core/defn ->ConfigurationTemplate "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate" [& [application-name description environment-id option-settings solution-stack-name source-configuration]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/Description :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/EnvironmentId :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/OptionSettings :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SolutionStackName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration] [application-name description environment-id option-settings solution-stack-name source-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate m__1575651__auto__))))))
(clojure.core/defn map->ConfigurationTemplate "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate" [{:keys [application-name description environment-id option-settings solution-stack-name source-configuration]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/Description :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/EnvironmentId :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/OptionSettings :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SolutionStackName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration] [application-name description environment-id option-settings solution-stack-name source-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ConfigurationTemplate (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/ApplicationName] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/Description :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/EnvironmentId :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/OptionSettings :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SolutionStackName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ConfigurationTemplate/SourceConfiguration]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.Application/ApplicationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy)
(clojure.core/defn ->Application "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application" [& [application-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.Application/ApplicationName] [application-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application m__1575651__auto__))))))
(clojure.core/defn map->Application "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application" [{:keys [application-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.Application/ApplicationName] [application-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.Application)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy/Application (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.Application/ApplicationName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/PeerVpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPCPeeringConnection "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection" [& [peer-vpc-id vpc-id tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/PeerVpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/Tags] [peer-vpc-id vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection m__1575651__auto__))))))
(clojure.core/defn map->VPCPeeringConnection "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection" [{:keys [peer-vpc-id vpc-id tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/PeerVpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/Tags] [peer-vpc-id vpc-id tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPCPeeringConnection (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/PeerVpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.VPCPeeringConnection/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ClientCertificate/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->ClientCertificate "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate" [& [description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ClientCertificate/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate m__1575651__auto__))))))
(clojure.core/defn map->ClientCertificate "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate" [{:keys [description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ClientCertificate/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.ClientCertificate)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/ClientCertificate (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ClientCertificate/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->Deployment "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment" [& [rest-api-id description stage-description stage-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageName] [rest-api-id description stage-description stage-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment m__1575651__auto__))))))
(clojure.core/defn map->Deployment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment" [{:keys [rest-api-id description stage-description stage-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageName] [rest-api-id description stage-description stage-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/Deployment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/RestApiId] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageDescription :crucible.generated.ap-northeast-1.AWS.ApiGateway.Deployment/StageName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheNodeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSubnetGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AZMode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotArns (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredMaintenanceWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZones (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AutoMinorVersionUpgrade (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/VpcSecurityGroupIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NumCacheNodes (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/EngineVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NotificationTopicArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheParameterGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotRetentionLimit (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/ClusterName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Engine (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSecurityGroupNames (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache)
(clojure.core/defn ->CacheCluster "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster" [& [cache-node-type engine num-cache-nodes az-mode auto-minor-version-upgrade cache-parameter-group-name cache-security-group-names cache-subnet-group-name cluster-name engine-version notification-topic-arn port preferred-availability-zone preferred-availability-zones preferred-maintenance-window snapshot-arns snapshot-name snapshot-retention-limit snapshot-window tags vpc-security-group-ids]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheNodeType :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Engine :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NumCacheNodes :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AZMode :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheParameterGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSecurityGroupNames :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSubnetGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/ClusterName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/EngineVersion :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NotificationTopicArn :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Port :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZone :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotArns :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotRetentionLimit :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Tags :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/VpcSecurityGroupIds] [cache-node-type engine num-cache-nodes az-mode auto-minor-version-upgrade cache-parameter-group-name cache-security-group-names cache-subnet-group-name cluster-name engine-version notification-topic-arn port preferred-availability-zone preferred-availability-zones preferred-maintenance-window snapshot-arns snapshot-name snapshot-retention-limit snapshot-window tags vpc-security-group-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster m__1575651__auto__))))))
(clojure.core/defn map->CacheCluster "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster" [{:keys [cache-node-type engine num-cache-nodes az-mode auto-minor-version-upgrade cache-parameter-group-name cache-security-group-names cache-subnet-group-name cluster-name engine-version notification-topic-arn port preferred-availability-zone preferred-availability-zones preferred-maintenance-window snapshot-arns snapshot-name snapshot-retention-limit snapshot-window tags vpc-security-group-ids]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheNodeType :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Engine :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NumCacheNodes :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AZMode :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheParameterGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSecurityGroupNames :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSubnetGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/ClusterName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/EngineVersion :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NotificationTopicArn :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Port :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZone :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotArns :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotRetentionLimit :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Tags :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/VpcSecurityGroupIds] [cache-node-type engine num-cache-nodes az-mode auto-minor-version-upgrade cache-parameter-group-name cache-security-group-names cache-subnet-group-name cluster-name engine-version notification-topic-arn port preferred-availability-zone preferred-availability-zones preferred-maintenance-window snapshot-arns snapshot-name snapshot-retention-limit snapshot-window tags vpc-security-group-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache/CacheCluster (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheNodeType :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Engine :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NumCacheNodes] :opt [:crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AZMode :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/AutoMinorVersionUpgrade :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheParameterGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSecurityGroupNames :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/CacheSubnetGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/ClusterName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/EngineVersion :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/NotificationTopicArn :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Port :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZone :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredAvailabilityZones :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotArns :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotName :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotRetentionLimit :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/SnapshotWindow :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/Tags :crucible.generated.ap-northeast-1.AWS.ElastiCache.CacheCluster/VpcSecurityGroupIds]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS.Key/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS.Key/EnableKeyRotation (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS.Key/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyPolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyUsage (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KMS)
(clojure.core/defn ->Key "Constructor for a :crucible.generated.ap-northeast-1.AWS.KMS/Key" [& [key-policy description enable-key-rotation enabled key-usage]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyPolicy :crucible.generated.ap-northeast-1.AWS.KMS.Key/Description :crucible.generated.ap-northeast-1.AWS.KMS.Key/EnableKeyRotation :crucible.generated.ap-northeast-1.AWS.KMS.Key/Enabled :crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyUsage] [key-policy description enable-key-rotation enabled key-usage])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KMS/Key m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KMS/Key) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KMS/Key m__1575651__auto__))))))
(clojure.core/defn map->Key "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KMS/Key" [{:keys [key-policy description enable-key-rotation enabled key-usage]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyPolicy :crucible.generated.ap-northeast-1.AWS.KMS.Key/Description :crucible.generated.ap-northeast-1.AWS.KMS.Key/EnableKeyRotation :crucible.generated.ap-northeast-1.AWS.KMS.Key/Enabled :crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyUsage] [key-policy description enable-key-rotation enabled key-usage])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KMS/Key m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KMS/Key) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KMS/Key m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KMS.Key)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS/Key (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyPolicy] :opt [:crucible.generated.ap-northeast-1.AWS.KMS.Key/Description :crucible.generated.ap-northeast-1.AWS.KMS.Key/EnableKeyRotation :crucible.generated.ap-northeast-1.AWS.KMS.Key/Enabled :crucible.generated.ap-northeast-1.AWS.KMS.Key/KeyUsage]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/IpAddressType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttributes (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttribute) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Scheme (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/SecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Subnets (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2)
(clojure.core/defn ->LoadBalancer "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer" [& [ip-address-type load-balancer-attributes name scheme security-groups subnets tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/IpAddressType :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Name :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Scheme :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/SecurityGroups :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Subnets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Tags] [ip-address-type load-balancer-attributes name scheme security-groups subnets tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer m__1575651__auto__))))))
(clojure.core/defn map->LoadBalancer "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer" [{:keys [ip-address-type load-balancer-attributes name scheme security-groups subnets tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/IpAddressType :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Name :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Scheme :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/SecurityGroups :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Subnets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Tags] [ip-address-type load-balancer-attributes name scheme security-groups subnets tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/LoadBalancer (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/IpAddressType :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/LoadBalancerAttributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Name :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Scheme :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/SecurityGroups :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Subnets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.LoadBalancer/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Ec2VolumeId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/MountPoint (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/StackId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks)
(clojure.core/defn ->Volume "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume" [& [ec-2-volume-id stack-id mount-point name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Ec2VolumeId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/MountPoint :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Name] [ec-2-volume-id stack-id mount-point name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume m__1575651__auto__))))))
(clojure.core/defn map->Volume "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume" [{:keys [ec-2-volume-id stack-id mount-point name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Ec2VolumeId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/MountPoint :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Name] [ec-2-volume-id stack-id mount-point name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks/Volume (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Ec2VolumeId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/StackId] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/MountPoint :crucible.generated.ap-northeast-1.AWS.OpsWorks.Volume/Name]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/CIDRIP (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/ClusterSecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupOwnerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift)
(clojure.core/defn ->ClusterSecurityGroupIngress "Constructor for a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress" [& [cluster-security-group-name cidrip ec-2-security-group-name ec-2-security-group-owner-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/ClusterSecurityGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/CIDRIP :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupOwnerId] [cluster-security-group-name cidrip ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress m__1575651__auto__))))))
(clojure.core/defn map->ClusterSecurityGroupIngress "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress" [{:keys [cluster-security-group-name cidrip ec-2-security-group-name ec-2-security-group-owner-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/ClusterSecurityGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/CIDRIP :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupOwnerId] [cluster-security-group-name cidrip ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroupIngress (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/ClusterSecurityGroupName] :opt [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/CIDRIP :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroupIngress/EC2SecurityGroupOwnerId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPNGateway "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway" [& [type tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Type :crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Tags] [type tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway m__1575651__auto__))))))
(clojure.core/defn map->VPNGateway "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway" [{:keys [type tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Type :crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Tags] [type tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPNGateway (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Type] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.VPNGateway/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ServiceRoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/HostnameTheme (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSshKeyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultAvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/AgentVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseOpsworksSecurityGroups (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstances (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstance) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Attributes (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/SourceStackId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultRootDeviceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIps (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIp) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseCustomCookbooks (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultInstanceProfileArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CustomJson (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/EcsClusterArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CloneAppIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultOs (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ClonePermissions (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks)
(clojure.core/defn ->Stack "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack" [& [default-instance-profile-arn name service-role-arn agent-version attributes chef-configuration clone-app-ids clone-permissions configuration-manager custom-cookbooks-source custom-json default-availability-zone default-os default-root-device-type default-ssh-key-name default-subnet-id ecs-cluster-arn elastic-ips hostname-theme rds-db-instances source-stack-id use-custom-cookbooks use-opsworks-security-groups vpc-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultInstanceProfileArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ServiceRoleArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/AgentVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CloneAppIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ClonePermissions :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ConfigurationManager :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CustomCookbooksSource :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CustomJson :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultAvailabilityZone :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultOs :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultRootDeviceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSshKeyName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSubnetId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/EcsClusterArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/HostnameTheme :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstances :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/SourceStackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseCustomCookbooks :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseOpsworksSecurityGroups :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/VpcId] [default-instance-profile-arn name service-role-arn agent-version attributes chef-configuration clone-app-ids clone-permissions configuration-manager custom-cookbooks-source custom-json default-availability-zone default-os default-root-device-type default-ssh-key-name default-subnet-id ecs-cluster-arn elastic-ips hostname-theme rds-db-instances source-stack-id use-custom-cookbooks use-opsworks-security-groups vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack m__1575651__auto__))))))
(clojure.core/defn map->Stack "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack" [{:keys [default-instance-profile-arn name service-role-arn agent-version attributes chef-configuration clone-app-ids clone-permissions configuration-manager custom-cookbooks-source custom-json default-availability-zone default-os default-root-device-type default-ssh-key-name default-subnet-id ecs-cluster-arn elastic-ips hostname-theme rds-db-instances source-stack-id use-custom-cookbooks use-opsworks-security-groups vpc-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultInstanceProfileArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ServiceRoleArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/AgentVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CloneAppIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ClonePermissions :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ConfigurationManager :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CustomCookbooksSource :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CustomJson :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultAvailabilityZone :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultOs :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultRootDeviceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSshKeyName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSubnetId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/EcsClusterArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/HostnameTheme :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstances :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/SourceStackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseCustomCookbooks :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseOpsworksSecurityGroups :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/VpcId] [default-instance-profile-arn name service-role-arn agent-version attributes chef-configuration clone-app-ids clone-permissions configuration-manager custom-cookbooks-source custom-json default-availability-zone default-os default-root-device-type default-ssh-key-name default-subnet-id ecs-cluster-arn elastic-ips hostname-theme rds-db-instances source-stack-id use-custom-cookbooks use-opsworks-security-groups vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks/Stack (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultInstanceProfileArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ServiceRoleArn] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/AgentVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ChefConfiguration :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CloneAppIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ClonePermissions :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ConfigurationManager :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CustomCookbooksSource :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/CustomJson :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultAvailabilityZone :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultOs :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultRootDeviceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSshKeyName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/DefaultSubnetId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/EcsClusterArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/ElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/HostnameTheme :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/RdsDbInstances :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/SourceStackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseCustomCookbooks :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/UseOpsworksSecurityGroups :crucible.generated.ap-northeast-1.AWS.OpsWorks.Stack/VpcId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/DBSubnetGroupDescription (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/SubnetIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->DBSubnetGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup" [& [db-subnet-group-description subnet-ids tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/DBSubnetGroupDescription :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/SubnetIds :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/Tags] [db-subnet-group-description subnet-ids tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup m__1575651__auto__))))))
(clojure.core/defn map->DBSubnetGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup" [{:keys [db-subnet-group-description subnet-ids tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/DBSubnetGroupDescription :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/SubnetIds :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/Tags] [db-subnet-group-description subnet-ids tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/DBSubnetGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/DBSubnetGroupDescription :crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/SubnetIds] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBSubnetGroup/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/SubnetIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift)
(clojure.core/defn ->ClusterSubnetGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup" [& [description subnet-ids]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/Description :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/SubnetIds] [description subnet-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup m__1575651__auto__))))))
(clojure.core/defn map->ClusterSubnetGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup" [{:keys [description subnet-ids]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/Description :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/SubnetIds] [description subnet-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSubnetGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/Description :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSubnetGroup/SubnetIds] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Groups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Path (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Roles (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Users (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->ManagedPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy" [& [description groups path policy-document roles users]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Description :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Groups :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Path :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Roles :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Users] [description groups path policy-document roles users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy m__1575651__auto__))))))
(clojure.core/defn map->ManagedPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy" [{:keys [description groups path policy-document roles users]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Description :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Groups :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Path :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Roles :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Users] [description groups path policy-document roles users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/ManagedPolicy (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Description :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Groups :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Path :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Roles :crucible.generated.ap-northeast-1.AWS.IAM.ManagedPolicy/Users]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InboundPermissions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/IpPermission) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchPath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchParameters (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/DesiredEC2Instances (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MinSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MaxSize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/LogPaths (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/BuildId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift)
(clojure.core/defn ->Fleet "Constructor for a :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet" [& [build-id desired-ec-2-instances ec-2-instance-type name server-launch-path description ec-2-inbound-permissions log-paths max-size min-size server-launch-parameters]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/BuildId :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/DesiredEC2Instances :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InstanceType :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchPath :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Description :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InboundPermissions :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/LogPaths :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MaxSize :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MinSize :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchParameters] [build-id desired-ec-2-instances ec-2-instance-type name server-launch-path description ec-2-inbound-permissions log-paths max-size min-size server-launch-parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet m__1575651__auto__))))))
(clojure.core/defn map->Fleet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet" [{:keys [build-id desired-ec-2-instances ec-2-instance-type name server-launch-path description ec-2-inbound-permissions log-paths max-size min-size server-launch-parameters]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/BuildId :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/DesiredEC2Instances :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InstanceType :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchPath :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Description :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InboundPermissions :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/LogPaths :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MaxSize :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MinSize :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchParameters] [build-id desired-ec-2-instances ec-2-instance-type name server-launch-path description ec-2-inbound-permissions log-paths max-size min-size server-launch-parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Fleet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift/Fleet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/BuildId :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/DesiredEC2Instances :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InstanceType :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchPath] :opt [:crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/Description :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/EC2InboundPermissions :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/LogPaths :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MaxSize :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/MinSize :crucible.generated.ap-northeast-1.AWS.GameLift.Fleet/ServerLaunchParameters]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53)
(clojure.core/defn ->HealthCheck "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck" [& [health-check-config health-check-tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTags] [health-check-config health-check-tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck m__1575651__auto__))))))
(clojure.core/defn map->HealthCheck "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck" [{:keys [health-check-config health-check-tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig :crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTags] [health-check-config health-check-tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53/HealthCheck (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckConfig] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.HealthCheck/HealthCheckTags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/GroupDescription (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupEgress (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupIngress (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Rule) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->SecurityGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup" [& [group-description security-group-egress security-group-ingress tags vpc-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/GroupDescription :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupEgress :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupIngress :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Tags :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/VpcId] [group-description security-group-egress security-group-ingress tags vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup m__1575651__auto__))))))
(clojure.core/defn map->SecurityGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup" [{:keys [group-description security-group-egress security-group-ingress tags vpc-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/GroupDescription :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupEgress :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupIngress :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Tags :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/VpcId] [group-description security-group-egress security-group-ingress tags vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/GroupDescription] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupEgress :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/SecurityGroupIngress :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/Tags :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroup/VpcId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/BidPrice (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceRole (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configuration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/JobFlowId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Market (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR)
(clojure.core/defn ->InstanceGroupConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig" [& [instance-count instance-role instance-type job-flow-id bid-price configurations ebs-configuration market name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceRole :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/JobFlowId :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/BidPrice :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Market :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Name] [instance-count instance-role instance-type job-flow-id bid-price configurations ebs-configuration market name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig m__1575651__auto__))))))
(clojure.core/defn map->InstanceGroupConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig" [{:keys [instance-count instance-role instance-type job-flow-id bid-price configurations ebs-configuration market name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceRole :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/JobFlowId :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/BidPrice :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Market :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Name] [instance-count instance-role instance-type job-flow-id bid-price configurations ebs-configuration market name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR/InstanceGroupConfig (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceCount :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceRole :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/InstanceType :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/JobFlowId] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/BidPrice :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/EbsConfiguration :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Market :crucible.generated.ap-northeast-1.AWS.EMR.InstanceGroupConfig/Name]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/DhcpOptionsId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPCDHCPOptionsAssociation "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation" [& [dhcp-options-id vpc-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/DhcpOptionsId :crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/VpcId] [dhcp-options-id vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation m__1575651__auto__))))))
(clojure.core/defn map->VPCDHCPOptionsAssociation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation" [{:keys [dhcp-options-id vpc-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/DhcpOptionsId :crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/VpcId] [dhcp-options-id vpc-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPCDHCPOptionsAssociation (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/DhcpOptionsId :crucible.generated.ap-northeast-1.AWS.EC2.VPCDHCPOptionsAssociation/VpcId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Document/Content (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM.Document/DocumentType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM)
(clojure.core/defn ->Document "Constructor for a :crucible.generated.ap-northeast-1.AWS.SSM/Document" [& [content document-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Document/Content :crucible.generated.ap-northeast-1.AWS.SSM.Document/DocumentType] [content document-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM/Document m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM/Document) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM/Document m__1575651__auto__))))))
(clojure.core/defn map->Document "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SSM/Document" [{:keys [content document-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SSM.Document/Content :crucible.generated.ap-northeast-1.AWS.SSM.Document/DocumentType] [content document-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SSM/Document m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SSM/Document) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SSM/Document m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SSM.Document)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SSM/Document (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.SSM.Document/Content] :opt [:crucible.generated.ap-northeast-1.AWS.SSM.Document/DocumentType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPCs (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPC) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53)
(clojure.core/defn ->HostedZone "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone" [& [name hosted-zone-config hosted-zone-tags vp-cs]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/Name :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTags :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPCs] [name hosted-zone-config hosted-zone-tags vp-cs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone m__1575651__auto__))))))
(clojure.core/defn map->HostedZone "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone" [{:keys [name hosted-zone-config hosted-zone-tags vp-cs]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/Name :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTags :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPCs] [name hosted-zone-config hosted-zone-tags vp-cs])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.HostedZone)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53/HostedZone (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/Name] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneConfig :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/HostedZoneTags :crucible.generated.ap-northeast-1.AWS.Route53.HostedZone/VPCs]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/Principal (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT)
(clojure.core/defn ->PolicyPrincipalAttachment "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment" [& [policy-name principal]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/PolicyName :crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/Principal] [policy-name principal])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment m__1575651__auto__))))))
(clojure.core/defn map->PolicyPrincipalAttachment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment" [{:keys [policy-name principal]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/PolicyName :crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/Principal] [policy-name principal])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT/PolicyPrincipalAttachment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/PolicyName :crucible.generated.ap-northeast-1.AWS.IoT.PolicyPrincipalAttachment/Principal] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/BundleId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/DirectoryId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/RootVolumeEncryptionEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserVolumeEncryptionEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/VolumeEncryptionKey (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WorkSpaces)
(clojure.core/defn ->Workspace "Constructor for a :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace" [& [bundle-id directory-id user-name root-volume-encryption-enabled user-volume-encryption-enabled volume-encryption-key]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/BundleId :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/DirectoryId :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserName :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/RootVolumeEncryptionEnabled :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserVolumeEncryptionEnabled :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/VolumeEncryptionKey] [bundle-id directory-id user-name root-volume-encryption-enabled user-volume-encryption-enabled volume-encryption-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace m__1575651__auto__))))))
(clojure.core/defn map->Workspace "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace" [{:keys [bundle-id directory-id user-name root-volume-encryption-enabled user-volume-encryption-enabled volume-encryption-key]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/BundleId :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/DirectoryId :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserName :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/RootVolumeEncryptionEnabled :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserVolumeEncryptionEnabled :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/VolumeEncryptionKey] [bundle-id directory-id user-name root-volume-encryption-enabled user-volume-encryption-enabled volume-encryption-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WorkSpaces/Workspace (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/BundleId :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/DirectoryId :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserName] :opt [:crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/RootVolumeEncryptionEnabled :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/UserVolumeEncryptionEnabled :crucible.generated.ap-northeast-1.AWS.WorkSpaces.Workspace/VolumeEncryptionKey]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIp (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIpv6 (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationPrefixListId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationSecurityGroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/FromPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/GroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/IpProtocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/ToPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->SecurityGroupEgress "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress" [& [group-id ip-protocol cidr-ip cidr-ipv-6 destination-prefix-list-id destination-security-group-id from-port to-port]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/GroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/IpProtocol :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIpv6 :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationPrefixListId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/ToPort] [group-id ip-protocol cidr-ip cidr-ipv-6 destination-prefix-list-id destination-security-group-id from-port to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress m__1575651__auto__))))))
(clojure.core/defn map->SecurityGroupEgress "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress" [{:keys [group-id ip-protocol cidr-ip cidr-ipv-6 destination-prefix-list-id destination-security-group-id from-port to-port]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/GroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/IpProtocol :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIpv6 :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationPrefixListId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/ToPort] [group-id ip-protocol cidr-ip cidr-ipv-6 destination-prefix-list-id destination-security-group-id from-port to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupEgress (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/GroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/IpProtocol] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/CidrIpv6 :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationPrefixListId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/DestinationSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupEgress/ToPort]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogStreamName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs)
(clojure.core/defn ->LogStream "Constructor for a :crucible.generated.ap-northeast-1.AWS.Logs/LogStream" [& [log-group-name log-stream-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogStreamName] [log-group-name log-stream-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/LogStream m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/LogStream) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/LogStream m__1575651__auto__))))))
(clojure.core/defn map->LogStream "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Logs/LogStream" [{:keys [log-group-name log-stream-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogStreamName] [log-group-name log-stream-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/LogStream m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/LogStream) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/LogStream m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs.LogStream)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs/LogStream (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogGroupName] :opt [:crucible.generated.ap-northeast-1.AWS.Logs.LogStream/LogStreamName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/CacheParameterGroupFamily (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Properties (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache)
(clojure.core/defn ->ParameterGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup" [& [cache-parameter-group-family description properties]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/CacheParameterGroupFamily :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Properties] [cache-parameter-group-family description properties])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup m__1575651__auto__))))))
(clojure.core/defn map->ParameterGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup" [{:keys [cache-parameter-group-family description properties]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/CacheParameterGroupFamily :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Properties] [cache-parameter-group-family description properties])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache/ParameterGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/CacheParameterGroupFamily :crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Description] :opt [:crucible.generated.ap-northeast-1.AWS.ElastiCache.ParameterGroup/Properties]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/FunctionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Timeout (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Handler (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Runtime (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/KmsKeyArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/MemorySize (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Role (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda)
(clojure.core/defn ->Function "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda/Function" [& [code handler role runtime description environment function-name kms-key-arn memory-size timeout vpc-config]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Handler :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Role :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Runtime :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Description :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment :crucible.generated.ap-northeast-1.AWS.Lambda.Function/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Function/KmsKeyArn :crucible.generated.ap-northeast-1.AWS.Lambda.Function/MemorySize :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Timeout :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig] [code handler role runtime description environment function-name kms-key-arn memory-size timeout vpc-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Function m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Function) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Function m__1575651__auto__))))))
(clojure.core/defn map->Function "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda/Function" [{:keys [code handler role runtime description environment function-name kms-key-arn memory-size timeout vpc-config]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Handler :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Role :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Runtime :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Description :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment :crucible.generated.ap-northeast-1.AWS.Lambda.Function/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Function/KmsKeyArn :crucible.generated.ap-northeast-1.AWS.Lambda.Function/MemorySize :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Timeout :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig] [code handler role runtime description environment function-name kms-key-arn memory-size timeout vpc-config])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Function m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Function) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Function m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Function)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda/Function (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Lambda.Function/Code :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Handler :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Role :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Runtime] :opt [:crucible.generated.ap-northeast-1.AWS.Lambda.Function/Description :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Environment :crucible.generated.ap-northeast-1.AWS.Lambda.Function/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Function/KmsKeyArn :crucible.generated.ap-northeast-1.AWS.Lambda.Function/MemorySize :crucible.generated.ap-northeast-1.AWS.Lambda.Function/Timeout :crucible.generated.ap-northeast-1.AWS.Lambda.Function/VpcConfig]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/ConfigRuleName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/InputParameters (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/MaximumExecutionFrequency (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config)
(clojure.core/defn ->ConfigRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule" [& [source config-rule-name description input-parameters maximum-execution-frequency scope]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/ConfigRuleName :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Description :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/InputParameters :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/MaximumExecutionFrequency :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope] [source config-rule-name description input-parameters maximum-execution-frequency scope])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule m__1575651__auto__))))))
(clojure.core/defn map->ConfigRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule" [{:keys [source config-rule-name description input-parameters maximum-execution-frequency scope]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/ConfigRuleName :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Description :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/InputParameters :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/MaximumExecutionFrequency :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope] [source config-rule-name description input-parameters maximum-execution-frequency scope])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.ConfigRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config/ConfigRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Source] :opt [:crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/ConfigRuleName :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Description :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/InputParameters :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/MaximumExecutionFrequency :crucible.generated.ap-northeast-1.AWS.Config.ConfigRule/Scope]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/Bucket (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3)
(clojure.core/defn ->BucketPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy" [& [bucket policy-document]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/Bucket :crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/PolicyDocument] [bucket policy-document])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy m__1575651__auto__))))))
(clojure.core/defn map->BucketPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy" [{:keys [bucket policy-document]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/Bucket :crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/PolicyDocument] [bucket policy-document])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3/BucketPolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/Bucket :crucible.generated.ap-northeast-1.AWS.S3.BucketPolicy/PolicyDocument] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/DeploymentConfigName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy)
(clojure.core/defn ->DeploymentConfig "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig" [& [deployment-config-name minimum-healthy-hosts]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/DeploymentConfigName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts] [deployment-config-name minimum-healthy-hosts])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig m__1575651__auto__))))))
(clojure.core/defn map->DeploymentConfig "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig" [{:keys [deployment-config-name minimum-healthy-hosts]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/DeploymentConfigName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts] [deployment-config-name minimum-healthy-hosts])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodeDeploy/DeploymentConfig (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/DeploymentConfigName :crucible.generated.ap-northeast-1.AWS.CodeDeploy.DeploymentConfig/MinimumHealthyHosts]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPC/CidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsHostnames (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsSupport (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPC/InstanceTenancy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPC/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.VPC/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPC "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPC" [& [cidr-block enable-dns-hostnames enable-dns-support instance-tenancy tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPC/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsHostnames :crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsSupport :crucible.generated.ap-northeast-1.AWS.EC2.VPC/InstanceTenancy :crucible.generated.ap-northeast-1.AWS.EC2.VPC/Tags] [cidr-block enable-dns-hostnames enable-dns-support instance-tenancy tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPC m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPC) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPC m__1575651__auto__))))))
(clojure.core/defn map->VPC "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPC" [{:keys [cidr-block enable-dns-hostnames enable-dns-support instance-tenancy tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPC/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsHostnames :crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsSupport :crucible.generated.ap-northeast-1.AWS.EC2.VPC/InstanceTenancy :crucible.generated.ap-northeast-1.AWS.EC2.VPC/Tags] [cidr-block enable-dns-hostnames enable-dns-support instance-tenancy tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPC m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPC) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPC m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPC)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPC (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPC/CidrBlock] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsHostnames :crucible.generated.ap-northeast-1.AWS.EC2.VPC/EnableDnsSupport :crucible.generated.ap-northeast-1.AWS.EC2.VPC/InstanceTenancy :crucible.generated.ap-northeast-1.AWS.EC2.VPC/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role/AssumeRolePolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role/ManagedPolicyArns (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role/Path (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policies (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policy) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.Role/RoleName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->Role "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/Role" [& [assume-role-policy-document managed-policy-arns path policies role-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Role/AssumeRolePolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Role/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.Role/Path :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policies :crucible.generated.ap-northeast-1.AWS.IAM.Role/RoleName] [assume-role-policy-document managed-policy-arns path policies role-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/Role m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/Role) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/Role m__1575651__auto__))))))
(clojure.core/defn map->Role "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/Role" [{:keys [assume-role-policy-document managed-policy-arns path policies role-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.Role/AssumeRolePolicyDocument :crucible.generated.ap-northeast-1.AWS.IAM.Role/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.Role/Path :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policies :crucible.generated.ap-northeast-1.AWS.IAM.Role/RoleName] [assume-role-policy-document managed-policy-arns path policies role-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/Role m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/Role) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/Role m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.Role)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/Role (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.Role/AssumeRolePolicyDocument] :opt [:crucible.generated.ap-northeast-1.AWS.IAM.Role/ManagedPolicyArns :crucible.generated.ap-northeast-1.AWS.IAM.Role/Path :crucible.generated.ap-northeast-1.AWS.IAM.Role/Policies :crucible.generated.ap-northeast-1.AWS.IAM.Role/RoleName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.InternetGateway/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.InternetGateway/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->InternetGateway "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway" [& [tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.InternetGateway/Tags] [tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway m__1575651__auto__))))))
(clojure.core/defn map->InternetGateway "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway" [{:keys [tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.InternetGateway/Tags] [tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.InternetGateway)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/InternetGateway (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.InternetGateway/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/Device (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/VolumeId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VolumeAttachment "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment" [& [device instance-id volume-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/Device :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/VolumeId] [device instance-id volume-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment m__1575651__auto__))))))
(clojure.core/defn map->VolumeAttachment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment" [{:keys [device instance-id volume-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/Device :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/VolumeId] [device instance-id volume-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VolumeAttachment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/Device :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.VolumeAttachment/VolumeId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Comment (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/TTL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/SetIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Weight (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HealthCheckId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/ResourceRecords (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Failover (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Region (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53)
(clojure.core/defn ->RecordSet "Constructor for a :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet" [& [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Name :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Type :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Failover :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HealthCheckId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Region :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/ResourceRecords :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/SetIdentifier :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/TTL :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Weight] [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet m__1575651__auto__))))))
(clojure.core/defn map->RecordSet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet" [{:keys [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Name :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Type :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Failover :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HealthCheckId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Region :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/ResourceRecords :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/SetIdentifier :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/TTL :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Weight] [name type alias-target comment failover geo-location health-check-id hosted-zone-id hosted-zone-name region resource-records set-identifier ttl weight])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Route53.RecordSet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Route53/RecordSet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Name :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Type] :opt [:crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/AliasTarget :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Comment :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Failover :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/GeoLocation :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HealthCheckId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneId :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/HostedZoneName :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Region :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/ResourceRecords :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/SetIdentifier :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/TTL :crucible.generated.ap-northeast-1.AWS.Route53.RecordSet/Weight]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/ShardCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Kinesis)
(clojure.core/defn ->Stream "Constructor for a :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream" [& [shard-count name tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/ShardCount :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Name :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Tags] [shard-count name tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream m__1575651__auto__))))))
(clojure.core/defn map->Stream "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream" [{:keys [shard-count name tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/ShardCount :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Name :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Tags] [shard-count name tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Kinesis.Stream)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Kinesis/Stream (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/ShardCount] :opt [:crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Name :crucible.generated.ap-northeast-1.AWS.Kinesis.Stream/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AutoScalingGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MinAdjustmentMagnitude (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/ScalingAdjustment (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/Cooldown (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/EstimatedInstanceWarmup (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustments (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustment) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AdjustmentType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MetricAggregationType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/PolicyType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling)
(clojure.core/defn ->ScalingPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy" [& [adjustment-type auto-scaling-group-name cooldown estimated-instance-warmup metric-aggregation-type min-adjustment-magnitude policy-type scaling-adjustment step-adjustments]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AdjustmentType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AutoScalingGroupName :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/Cooldown :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/EstimatedInstanceWarmup :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MetricAggregationType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MinAdjustmentMagnitude :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/PolicyType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/ScalingAdjustment :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustments] [adjustment-type auto-scaling-group-name cooldown estimated-instance-warmup metric-aggregation-type min-adjustment-magnitude policy-type scaling-adjustment step-adjustments])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy m__1575651__auto__))))))
(clojure.core/defn map->ScalingPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy" [{:keys [adjustment-type auto-scaling-group-name cooldown estimated-instance-warmup metric-aggregation-type min-adjustment-magnitude policy-type scaling-adjustment step-adjustments]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AdjustmentType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AutoScalingGroupName :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/Cooldown :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/EstimatedInstanceWarmup :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MetricAggregationType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MinAdjustmentMagnitude :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/PolicyType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/ScalingAdjustment :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustments] [adjustment-type auto-scaling-group-name cooldown estimated-instance-warmup metric-aggregation-type min-adjustment-magnitude policy-type scaling-adjustment step-adjustments])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling/ScalingPolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AdjustmentType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/AutoScalingGroupName] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/Cooldown :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/EstimatedInstanceWarmup :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MetricAggregationType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/MinAdjustmentMagnitude :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/PolicyType :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/ScalingAdjustment :crucible.generated.ap-northeast-1.AWS.AutoScaling.ScalingPolicy/StepAdjustments]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Shortname (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomSecurityGroupIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/EnableAutoHealing (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/UseEbsOptimizedInstances (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignPublicIps (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Attributes (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/StackId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignElasticIps (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Packages (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomJson (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/InstallUpdatesOnBoot (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfigurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfiguration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomInstanceProfileArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks)
(clojure.core/defn ->Layer "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer" [& [auto-assign-elastic-ips auto-assign-public-ips enable-auto-healing name shortname stack-id type attributes custom-instance-profile-arn custom-json custom-recipes custom-security-group-ids install-updates-on-boot lifecycle-event-configuration load-based-auto-scaling packages use-ebs-optimized-instances volume-configurations]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignPublicIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/EnableAutoHealing :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Shortname :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomInstanceProfileArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomJson :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomRecipes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomSecurityGroupIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/InstallUpdatesOnBoot :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Packages :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/UseEbsOptimizedInstances :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfigurations] [auto-assign-elastic-ips auto-assign-public-ips enable-auto-healing name shortname stack-id type attributes custom-instance-profile-arn custom-json custom-recipes custom-security-group-ids install-updates-on-boot lifecycle-event-configuration load-based-auto-scaling packages use-ebs-optimized-instances volume-configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer m__1575651__auto__))))))
(clojure.core/defn map->Layer "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer" [{:keys [auto-assign-elastic-ips auto-assign-public-ips enable-auto-healing name shortname stack-id type attributes custom-instance-profile-arn custom-json custom-recipes custom-security-group-ids install-updates-on-boot lifecycle-event-configuration load-based-auto-scaling packages use-ebs-optimized-instances volume-configurations]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignPublicIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/EnableAutoHealing :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Shortname :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Type :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomInstanceProfileArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomJson :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomRecipes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomSecurityGroupIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/InstallUpdatesOnBoot :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Packages :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/UseEbsOptimizedInstances :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfigurations] [auto-assign-elastic-ips auto-assign-public-ips enable-auto-healing name shortname stack-id type attributes custom-instance-profile-arn custom-json custom-recipes custom-security-group-ids install-updates-on-boot lifecycle-event-configuration load-based-auto-scaling packages use-ebs-optimized-instances volume-configurations])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks/Layer (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/AutoAssignPublicIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/EnableAutoHealing :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Name :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Shortname :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Type] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Attributes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomInstanceProfileArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomJson :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomRecipes :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/CustomSecurityGroupIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/InstallUpdatesOnBoot :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LifecycleEventConfiguration :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/LoadBasedAutoScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/Packages :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/UseEbsOptimizedInstances :crucible.generated.ap-northeast-1.AWS.OpsWorks.Layer/VolumeConfigurations]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/DeliveryStreamName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose)
(clojure.core/defn ->DeliveryStream "Constructor for a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream" [& [delivery-stream-name elasticsearch-destination-configuration redshift-destination-configuration s-3-destination-configuration]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/DeliveryStreamName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration] [delivery-stream-name elasticsearch-destination-configuration redshift-destination-configuration s-3-destination-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream m__1575651__auto__))))))
(clojure.core/defn map->DeliveryStream "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream" [{:keys [delivery-stream-name elasticsearch-destination-configuration redshift-destination-configuration s-3-destination-configuration]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/DeliveryStreamName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration] [delivery-stream-name elasticsearch-destination-configuration redshift-destination-configuration s-3-destination-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KinesisFirehose/DeliveryStream (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/DeliveryStreamName :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/ElasticsearchDestinationConfiguration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/RedshiftDestinationConfiguration :crucible.generated.ap-northeast-1.AWS.KinesisFirehose.DeliveryStream/S3DestinationConfiguration]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/BgpAsn (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/IpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->CustomerGateway "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway" [& [bgp-asn ip-address type tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/BgpAsn :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/IpAddress :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Type :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Tags] [bgp-asn ip-address type tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway m__1575651__auto__))))))
(clojure.core/defn map->CustomerGateway "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway" [{:keys [bgp-asn ip-address type tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/BgpAsn :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/IpAddress :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Type :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Tags] [bgp-asn ip-address type tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/CustomerGateway (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/BgpAsn :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/IpAddress :crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Type] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.CustomerGateway/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ResourceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalableDimension (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalingTargetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ServiceNamespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling)
(clojure.core/defn ->ScalingPolicy "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy" [& [policy-name policy-type resource-id scalable-dimension scaling-target-id service-namespace step-scaling-policy-configuration]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyName :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ResourceId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalableDimension :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalingTargetId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ServiceNamespace :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration] [policy-name policy-type resource-id scalable-dimension scaling-target-id service-namespace step-scaling-policy-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy m__1575651__auto__))))))
(clojure.core/defn map->ScalingPolicy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy" [{:keys [policy-name policy-type resource-id scalable-dimension scaling-target-id service-namespace step-scaling-policy-configuration]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyName :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyType :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ResourceId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalableDimension :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalingTargetId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ServiceNamespace :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration] [policy-name policy-type resource-id scalable-dimension scaling-target-id service-namespace step-scaling-policy-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling/ScalingPolicy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyName :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/PolicyType] :opt [:crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ResourceId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalableDimension :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ScalingTargetId :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/ServiceNamespace :crucible.generated.ap-northeast-1.AWS.ApplicationAutoScaling.ScalingPolicy/StepScalingPolicyConfiguration]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.Rule/MetricName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicates (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicate) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF)
(clojure.core/defn ->Rule "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF/Rule" [& [metric-name name predicates]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.Rule/MetricName :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Name :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicates] [metric-name name predicates])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/Rule m__1575651__auto__))))))
(clojure.core/defn map->Rule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF/Rule" [{:keys [metric-name name predicates]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.Rule/MetricName :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Name :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicates] [metric-name name predicates])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/Rule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.Rule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF/Rule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.Rule/MetricName :crucible.generated.ap-northeast-1.AWS.WAF.Rule/Name] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.Rule/Predicates]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/CidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/MapPublicIpOnLaunch (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->Subnet "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/Subnet" [& [cidr-block vpc-id availability-zone map-public-ip-on-launch tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Subnet/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/MapPublicIpOnLaunch :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/Tags] [cidr-block vpc-id availability-zone map-public-ip-on-launch tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Subnet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Subnet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Subnet m__1575651__auto__))))))
(clojure.core/defn map->Subnet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/Subnet" [{:keys [cidr-block vpc-id availability-zone map-public-ip-on-launch tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Subnet/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/MapPublicIpOnLaunch :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/Tags] [cidr-block vpc-id availability-zone map-public-ip-on-launch tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Subnet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Subnet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Subnet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Subnet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/Subnet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Subnet/CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Subnet/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/MapPublicIpOnLaunch :crucible.generated.ap-northeast-1.AWS.EC2.Subnet/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/BasePath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/DomainName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/Stage (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->BasePathMapping "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping" [& [base-path domain-name rest-api-id stage]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/BasePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/DomainName :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/Stage] [base-path domain-name rest-api-id stage])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping m__1575651__auto__))))))
(clojure.core/defn map->BasePathMapping "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping" [{:keys [base-path domain-name rest-api-id stage]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/BasePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/DomainName :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/Stage] [base-path domain-name rest-api-id stage])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/BasePathMapping (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/BasePath :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/DomainName :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.BasePathMapping/Stage]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupOwnerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/ToPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/IpProtocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIpv6 (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/FromPort (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIp (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->SecurityGroupIngress "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress" [& [ip-protocol cidr-ip cidr-ipv-6 from-port group-id group-name source-security-group-id source-security-group-name source-security-group-owner-id to-port]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/IpProtocol :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIpv6 :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupOwnerId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/ToPort] [ip-protocol cidr-ip cidr-ipv-6 from-port group-id group-name source-security-group-id source-security-group-name source-security-group-owner-id to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress m__1575651__auto__))))))
(clojure.core/defn map->SecurityGroupIngress "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress" [{:keys [ip-protocol cidr-ip cidr-ipv-6 from-port group-id group-name source-security-group-id source-security-group-name source-security-group-owner-id to-port]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/IpProtocol :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIpv6 :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupOwnerId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/ToPort] [ip-protocol cidr-ip cidr-ipv-6 from-port group-id group-name source-security-group-id source-security-group-name source-security-group-owner-id to-port])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/SecurityGroupIngress (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/IpProtocol] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIp :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/CidrIpv6 :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/FromPort :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/GroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupName :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/SourceSecurityGroupOwnerId :crucible.generated.ap-northeast-1.AWS.EC2.SecurityGroupIngress/ToPort]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.PlacementGroup/Strategy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->PlacementGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup" [& [strategy]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.PlacementGroup/Strategy] [strategy])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup m__1575651__auto__))))))
(clojure.core/defn map->PlacementGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup" [{:keys [strategy]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.PlacementGroup/Strategy] [strategy])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.PlacementGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/PlacementGroup (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.PlacementGroup/Strategy]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ServiceRole (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowRole (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/LogUri (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configuration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VisibleToAllUsers (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/AdditionalInfo (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Applications (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Application) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ReleaseLabel (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActionConfig) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR)
(clojure.core/defn ->Cluster "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR/Cluster" [& [instances job-flow-role name service-role additional-info applications bootstrap-actions configurations log-uri release-label tags visible-to-all-users]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Instances :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowRole :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ServiceRole :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Applications :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActions :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/LogUri :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ReleaseLabel :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Tags :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VisibleToAllUsers] [instances job-flow-role name service-role additional-info applications bootstrap-actions configurations log-uri release-label tags visible-to-all-users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR/Cluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR/Cluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR/Cluster m__1575651__auto__))))))
(clojure.core/defn map->Cluster "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR/Cluster" [{:keys [instances job-flow-role name service-role additional-info applications bootstrap-actions configurations log-uri release-label tags visible-to-all-users]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Instances :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowRole :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ServiceRole :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Applications :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActions :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/LogUri :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ReleaseLabel :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Tags :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VisibleToAllUsers] [instances job-flow-role name service-role additional-info applications bootstrap-actions configurations log-uri release-label tags visible-to-all-users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR/Cluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR/Cluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR/Cluster m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Cluster)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR/Cluster (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Instances :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/JobFlowRole :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Name :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ServiceRole] :opt [:crucible.generated.ap-northeast-1.AWS.EMR.Cluster/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Applications :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/BootstrapActions :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Configurations :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/LogUri :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/ReleaseLabel :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/Tags :crucible.generated.ap-northeast-1.AWS.EMR.Cluster/VisibleToAllUsers]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/RouteTableIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/VpnGatewayId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPNGatewayRoutePropagation "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation" [& [route-table-ids vpn-gateway-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/RouteTableIds :crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/VpnGatewayId] [route-table-ids vpn-gateway-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation m__1575651__auto__))))))
(clojure.core/defn map->VPNGatewayRoutePropagation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation" [{:keys [route-table-ids vpn-gateway-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/RouteTableIds :crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/VpnGatewayId] [route-table-ids vpn-gateway-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPNGatewayRoutePropagation (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/RouteTableIds :crucible.generated.ap-northeast-1.AWS.EC2.VPNGatewayRoutePropagation/VpnGatewayId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Unit (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Period (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Threshold (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/OKActions (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/InsufficientDataActions (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ComparisonOperator (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimensions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimension) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Namespace (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmActions (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmDescription (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/MetricName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/EvaluationPeriods (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Statistic (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ActionsEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudWatch)
(clojure.core/defn ->Alarm "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm" [& [comparison-operator evaluation-periods metric-name namespace period statistic threshold actions-enabled alarm-actions alarm-description alarm-name dimensions insufficient-data-actions ok-actions unit]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ComparisonOperator :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/EvaluationPeriods :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/MetricName :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Namespace :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Period :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Statistic :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Threshold :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ActionsEnabled :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmDescription :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmName :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimensions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/InsufficientDataActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/OKActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Unit] [comparison-operator evaluation-periods metric-name namespace period statistic threshold actions-enabled alarm-actions alarm-description alarm-name dimensions insufficient-data-actions ok-actions unit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm m__1575651__auto__))))))
(clojure.core/defn map->Alarm "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm" [{:keys [comparison-operator evaluation-periods metric-name namespace period statistic threshold actions-enabled alarm-actions alarm-description alarm-name dimensions insufficient-data-actions ok-actions unit]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ComparisonOperator :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/EvaluationPeriods :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/MetricName :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Namespace :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Period :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Statistic :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Threshold :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ActionsEnabled :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmDescription :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmName :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimensions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/InsufficientDataActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/OKActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Unit] [comparison-operator evaluation-periods metric-name namespace period statistic threshold actions-enabled alarm-actions alarm-description alarm-name dimensions insufficient-data-actions ok-actions unit])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudWatch/Alarm (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ComparisonOperator :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/EvaluationPeriods :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/MetricName :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Namespace :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Period :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Statistic :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Threshold] :opt [:crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/ActionsEnabled :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmDescription :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/AlarmName :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Dimensions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/InsufficientDataActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/OKActions :crucible.generated.ap-northeast-1.AWS.CloudWatch.Alarm/Unit]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/ElasticLoadBalancerName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/LayerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks)
(clojure.core/defn ->ElasticLoadBalancerAttachment "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment" [& [elastic-load-balancer-name layer-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/ElasticLoadBalancerName :crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/LayerId] [elastic-load-balancer-name layer-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment m__1575651__auto__))))))
(clojure.core/defn map->ElasticLoadBalancerAttachment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment" [{:keys [elastic-load-balancer-name layer-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/ElasticLoadBalancerName :crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/LayerId] [elastic-load-balancer-name layer-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks/ElasticLoadBalancerAttachment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/ElasticLoadBalancerName :crucible.generated.ap-northeast-1.AWS.OpsWorks.ElasticLoadBalancerAttachment/LayerId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3BucketName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3KeyPrefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/SnsTopicARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config)
(clojure.core/defn ->DeliveryChannel "Constructor for a :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel" [& [s-3-bucket-name config-snapshot-delivery-properties name s-3-key-prefix sns-topic-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3BucketName :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/Name :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3KeyPrefix :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/SnsTopicARN] [s-3-bucket-name config-snapshot-delivery-properties name s-3-key-prefix sns-topic-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel m__1575651__auto__))))))
(clojure.core/defn map->DeliveryChannel "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel" [{:keys [s-3-bucket-name config-snapshot-delivery-properties name s-3-key-prefix sns-topic-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3BucketName :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/Name :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3KeyPrefix :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/SnsTopicARN] [s-3-bucket-name config-snapshot-delivery-properties name s-3-key-prefix sns-topic-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Config/DeliveryChannel (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3BucketName] :opt [:crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/ConfigSnapshotDeliveryProperties :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/Name :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/S3KeyPrefix :crucible.generated.ap-northeast-1.AWS.Config.DeliveryChannel/SnsTopicARN]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraints (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraint) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF)
(clojure.core/defn ->SizeConstraintSet "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet" [& [name size-constraints]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraints] [name size-constraints])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet m__1575651__auto__))))))
(clojure.core/defn map->SizeConstraintSet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet" [{:keys [name size-constraints]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraints] [name size-constraints])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF/SizeConstraintSet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.SizeConstraintSet/SizeConstraints] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Endpoint (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/TopicArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS)
(clojure.core/defn ->Subscription "Constructor for a :crucible.generated.ap-northeast-1.AWS.SNS/Subscription" [& [endpoint protocol topic-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Endpoint :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Protocol :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/TopicArn] [endpoint protocol topic-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS/Subscription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS/Subscription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS/Subscription m__1575651__auto__))))))
(clojure.core/defn map->Subscription "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SNS/Subscription" [{:keys [endpoint protocol topic-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Endpoint :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Protocol :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/TopicArn] [endpoint protocol topic-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS/Subscription m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS/Subscription) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS/Subscription m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS.Subscription)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS/Subscription (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Endpoint :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/Protocol :crucible.generated.ap-northeast-1.AWS.SNS.Subscription/TopicArn]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/CustomerGatewayId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/StaticRoutesOnly (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/VpnGatewayId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPNConnection "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection" [& [customer-gateway-id type vpn-gateway-id static-routes-only tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/CustomerGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Type :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/VpnGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/StaticRoutesOnly :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Tags] [customer-gateway-id type vpn-gateway-id static-routes-only tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection m__1575651__auto__))))))
(clojure.core/defn map->VPNConnection "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection" [{:keys [customer-gateway-id type vpn-gateway-id static-routes-only tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/CustomerGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Type :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/VpnGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/StaticRoutesOnly :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Tags] [customer-gateway-id type vpn-gateway-id static-routes-only tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnection (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/CustomerGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Type :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/VpnGatewayId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/StaticRoutesOnly :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnection/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/VersionLabel (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/SolutionStackName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/EnvironmentName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/ApplicationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/CNAMEPrefix (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/TemplateName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk)
(clojure.core/defn ->Environment "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment" [& [application-name cname-prefix description environment-name option-settings solution-stack-name template-name tier version-label]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/CNAMEPrefix :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Description :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/EnvironmentName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/SolutionStackName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/TemplateName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/VersionLabel] [application-name cname-prefix description environment-name option-settings solution-stack-name template-name tier version-label])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment m__1575651__auto__))))))
(clojure.core/defn map->Environment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment" [{:keys [application-name cname-prefix description environment-name option-settings solution-stack-name template-name tier version-label]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/CNAMEPrefix :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Description :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/EnvironmentName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/SolutionStackName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/TemplateName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/VersionLabel] [application-name cname-prefix description environment-name option-settings solution-stack-name template-name tier version-label])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/Environment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/ApplicationName] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/CNAMEPrefix :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Description :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/EnvironmentName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/OptionSettings :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/SolutionStackName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/TemplateName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/Tier :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.Environment/VersionLabel]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/AutoScalingGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/DefaultResult (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/HeartbeatTimeout (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/LifecycleTransition (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationMetadata (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationTargetARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/RoleARN (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling)
(clojure.core/defn ->LifecycleHook "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook" [& [auto-scaling-group-name lifecycle-transition notification-target-arn role-arn default-result heartbeat-timeout notification-metadata]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/AutoScalingGroupName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/LifecycleTransition :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationTargetARN :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/RoleARN :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/DefaultResult :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/HeartbeatTimeout :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationMetadata] [auto-scaling-group-name lifecycle-transition notification-target-arn role-arn default-result heartbeat-timeout notification-metadata])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook m__1575651__auto__))))))
(clojure.core/defn map->LifecycleHook "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook" [{:keys [auto-scaling-group-name lifecycle-transition notification-target-arn role-arn default-result heartbeat-timeout notification-metadata]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/AutoScalingGroupName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/LifecycleTransition :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationTargetARN :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/RoleARN :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/DefaultResult :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/HeartbeatTimeout :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationMetadata] [auto-scaling-group-name lifecycle-transition notification-target-arn role-arn default-result heartbeat-timeout notification-metadata])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling/LifecycleHook (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/AutoScalingGroupName :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/LifecycleTransition :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationTargetARN :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/RoleARN] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/DefaultResult :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/HeartbeatTimeout :crucible.generated.ap-northeast-1.AWS.AutoScaling.LifecycleHook/NotificationMetadata]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/DestinationCidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/VpnConnectionId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPNConnectionRoute "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute" [& [destination-cidr-block vpn-connection-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/DestinationCidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/VpnConnectionId] [destination-cidr-block vpn-connection-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute m__1575651__auto__))))))
(clojure.core/defn map->VPNConnectionRoute "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute" [{:keys [destination-cidr-block vpn-connection-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/DestinationCidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/VpnConnectionId] [destination-cidr-block vpn-connection-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPNConnectionRoute (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/DestinationCidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.VPNConnectionRoute/VpnConnectionId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/AccessControl (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3.Bucket/BucketName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3)
(clojure.core/defn ->Bucket "Constructor for a :crucible.generated.ap-northeast-1.AWS.S3/Bucket" [& [access-control bucket-name cors-configuration lifecycle-configuration logging-configuration notification-configuration replication-configuration tags versioning-configuration website-configuration]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket/AccessControl :crucible.generated.ap-northeast-1.AWS.S3.Bucket/BucketName :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Tags :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration] [access-control bucket-name cors-configuration lifecycle-configuration logging-configuration notification-configuration replication-configuration tags versioning-configuration website-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3/Bucket m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3/Bucket) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3/Bucket m__1575651__auto__))))))
(clojure.core/defn map->Bucket "Convert a map to a :crucible.generated.ap-northeast-1.AWS.S3/Bucket" [{:keys [access-control bucket-name cors-configuration lifecycle-configuration logging-configuration notification-configuration replication-configuration tags versioning-configuration website-configuration]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.S3.Bucket/AccessControl :crucible.generated.ap-northeast-1.AWS.S3.Bucket/BucketName :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Tags :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration] [access-control bucket-name cors-configuration lifecycle-configuration logging-configuration notification-configuration replication-configuration tags versioning-configuration website-configuration])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.S3/Bucket m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.S3/Bucket) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.S3/Bucket m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.S3.Bucket)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.S3/Bucket (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.S3.Bucket/AccessControl :crucible.generated.ap-northeast-1.AWS.S3.Bucket/BucketName :crucible.generated.ap-northeast-1.AWS.S3.Bucket/CorsConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LifecycleConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/LoggingConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/NotificationConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/ReplicationConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/Tags :crucible.generated.ap-northeast-1.AWS.S3.Bucket/VersioningConfiguration :crucible.generated.ap-northeast-1.AWS.S3.Bucket/WebsiteConfiguration]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptors (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptor) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF)
(clojure.core/defn ->IPSet "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF/IPSet" [& [name ip-set-descriptors]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.IPSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptors] [name ip-set-descriptors])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/IPSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/IPSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/IPSet m__1575651__auto__))))))
(clojure.core/defn map->IPSet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF/IPSet" [{:keys [name ip-set-descriptors]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.IPSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptors] [name ip-set-descriptors])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/IPSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/IPSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/IPSet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.IPSet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF/IPSet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.IPSet/Name] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.IPSet/IPSetDescriptors]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/EngineName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/MajorEngineVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfigurations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfiguration) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionGroupDescription (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->OptionGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup" [& [engine-name major-engine-version option-configurations option-group-description tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/EngineName :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/MajorEngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfigurations :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionGroupDescription :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/Tags] [engine-name major-engine-version option-configurations option-group-description tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup m__1575651__auto__))))))
(clojure.core/defn map->OptionGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup" [{:keys [engine-name major-engine-version option-configurations option-group-description tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/EngineName :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/MajorEngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfigurations :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionGroupDescription :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/Tags] [engine-name major-engine-version option-configurations option-group-description tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/OptionGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/EngineName :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/MajorEngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionConfigurations :crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/OptionGroupDescription] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.OptionGroup/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift)
(clojure.core/defn ->ClusterSecurityGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup" [& [description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroup/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup m__1575651__auto__))))))
(clojure.core/defn map->ClusterSecurityGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup" [{:keys [description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroup/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterSecurityGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterSecurityGroup/Description] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuples (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuple) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF)
(clojure.core/defn ->ByteMatchSet "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet" [& [name byte-match-tuples]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuples] [name byte-match-tuples])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet m__1575651__auto__))))))
(clojure.core/defn map->ByteMatchSet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet" [{:keys [name byte-match-tuples]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuples] [name byte-match-tuples])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF/ByteMatchSet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/Name] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.ByteMatchSet/ByteMatchTuples]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Tenancy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/RootDeviceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsOptimized (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AgentVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Os (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/LayerIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Hostname (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AmiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/ElasticIps (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/StackId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMappings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMapping) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Architecture (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstallUpdatesOnBoot (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/VirtualizationType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AutoScalingType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SshKeyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Volumes (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks)
(clojure.core/defn ->Instance "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance" [& [instance-type layer-ids stack-id agent-version ami-id architecture auto-scaling-type availability-zone block-device-mappings ebs-optimized elastic-ips hostname install-updates-on-boot os root-device-type ssh-key-name subnet-id tenancy time-based-auto-scaling virtualization-type volumes]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstanceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/LayerIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AgentVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AmiId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Architecture :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AutoScalingType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsOptimized :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/ElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Hostname :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstallUpdatesOnBoot :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Os :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/RootDeviceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SshKeyName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SubnetId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Tenancy :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/VirtualizationType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Volumes] [instance-type layer-ids stack-id agent-version ami-id architecture auto-scaling-type availability-zone block-device-mappings ebs-optimized elastic-ips hostname install-updates-on-boot os root-device-type ssh-key-name subnet-id tenancy time-based-auto-scaling virtualization-type volumes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance m__1575651__auto__))))))
(clojure.core/defn map->Instance "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance" [{:keys [instance-type layer-ids stack-id agent-version ami-id architecture auto-scaling-type availability-zone block-device-mappings ebs-optimized elastic-ips hostname install-updates-on-boot os root-device-type ssh-key-name subnet-id tenancy time-based-auto-scaling virtualization-type volumes]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstanceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/LayerIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/StackId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AgentVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AmiId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Architecture :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AutoScalingType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsOptimized :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/ElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Hostname :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstallUpdatesOnBoot :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Os :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/RootDeviceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SshKeyName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SubnetId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Tenancy :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/VirtualizationType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Volumes] [instance-type layer-ids stack-id agent-version ami-id architecture auto-scaling-type availability-zone block-device-mappings ebs-optimized elastic-ips hostname install-updates-on-boot os root-device-type ssh-key-name subnet-id tenancy time-based-auto-scaling virtualization-type volumes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks/Instance (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstanceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/LayerIds :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/StackId] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AgentVersion :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AmiId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Architecture :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AutoScalingType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/EbsOptimized :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/ElasticIps :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Hostname :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/InstallUpdatesOnBoot :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Os :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/RootDeviceType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SshKeyName :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/SubnetId :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Tenancy :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/TimeBasedAutoScaling :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/VirtualizationType :crucible.generated.ap-northeast-1.AWS.OpsWorks.Instance/Volumes]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KernelId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6Addresses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceIpv6Address) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroupIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/ImageId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tenancy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Affinity (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/EbsOptimized (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/HostId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SourceDestCheck (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KeyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociations (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociation) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AdditionalInfo (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PlacementGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/DisableApiTermination (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Monitoring (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMappings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMapping) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/RamdiskId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volumes (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volume) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/UserData (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceInitiatedShutdownBehavior (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/IamInstanceProfile (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterfaces (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterface) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6AddressCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->Instance "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/Instance" [& [image-id additional-info affinity availability-zone block-device-mappings disable-api-termination ebs-optimized host-id iam-instance-profile instance-initiated-shutdown-behavior instance-type ipv-6-address-count ipv-6-addresses kernel-id key-name monitoring network-interfaces placement-group-name private-ip-address ramdisk-id security-group-ids security-groups source-dest-check ssm-associations subnet-id tags tenancy user-data volumes]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance/ImageId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Affinity :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.EC2.Instance/DisableApiTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance/EbsOptimized :crucible.generated.ap-northeast-1.AWS.EC2.Instance/HostId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceInitiatedShutdownBehavior :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceType :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KernelId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KeyName :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Monitoring :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterfaces :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PlacementGroupName :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance/RamdiskId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SourceDestCheck :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociations :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tags :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tenancy :crucible.generated.ap-northeast-1.AWS.EC2.Instance/UserData :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volumes] [image-id additional-info affinity availability-zone block-device-mappings disable-api-termination ebs-optimized host-id iam-instance-profile instance-initiated-shutdown-behavior instance-type ipv-6-address-count ipv-6-addresses kernel-id key-name monitoring network-interfaces placement-group-name private-ip-address ramdisk-id security-group-ids security-groups source-dest-check ssm-associations subnet-id tags tenancy user-data volumes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Instance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Instance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Instance m__1575651__auto__))))))
(clojure.core/defn map->Instance "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/Instance" [{:keys [image-id additional-info affinity availability-zone block-device-mappings disable-api-termination ebs-optimized host-id iam-instance-profile instance-initiated-shutdown-behavior instance-type ipv-6-address-count ipv-6-addresses kernel-id key-name monitoring network-interfaces placement-group-name private-ip-address ramdisk-id security-group-ids security-groups source-dest-check ssm-associations subnet-id tags tenancy user-data volumes]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Instance/ImageId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Affinity :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.EC2.Instance/DisableApiTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance/EbsOptimized :crucible.generated.ap-northeast-1.AWS.EC2.Instance/HostId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceInitiatedShutdownBehavior :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceType :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KernelId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KeyName :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Monitoring :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterfaces :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PlacementGroupName :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance/RamdiskId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SourceDestCheck :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociations :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tags :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tenancy :crucible.generated.ap-northeast-1.AWS.EC2.Instance/UserData :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volumes] [image-id additional-info affinity availability-zone block-device-mappings disable-api-termination ebs-optimized host-id iam-instance-profile instance-initiated-shutdown-behavior instance-type ipv-6-address-count ipv-6-addresses kernel-id key-name monitoring network-interfaces placement-group-name private-ip-address ramdisk-id security-group-ids security-groups source-dest-check ssm-associations subnet-id tags tenancy user-data volumes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Instance m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Instance) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Instance m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Instance)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/Instance (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Instance/ImageId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Instance/AdditionalInfo :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Affinity :crucible.generated.ap-northeast-1.AWS.EC2.Instance/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Instance/BlockDeviceMappings :crucible.generated.ap-northeast-1.AWS.EC2.Instance/DisableApiTermination :crucible.generated.ap-northeast-1.AWS.EC2.Instance/EbsOptimized :crucible.generated.ap-northeast-1.AWS.EC2.Instance/HostId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/IamInstanceProfile :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceInitiatedShutdownBehavior :crucible.generated.ap-northeast-1.AWS.EC2.Instance/InstanceType :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KernelId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/KeyName :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Monitoring :crucible.generated.ap-northeast-1.AWS.EC2.Instance/NetworkInterfaces :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PlacementGroupName :crucible.generated.ap-northeast-1.AWS.EC2.Instance/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.Instance/RamdiskId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroupIds :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SourceDestCheck :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SsmAssociations :crucible.generated.ap-northeast-1.AWS.EC2.Instance/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tags :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Tenancy :crucible.generated.ap-northeast-1.AWS.EC2.Instance/UserData :crucible.generated.ap-northeast-1.AWS.EC2.Instance/Volumes]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda)
(clojure.core/defn ->Alias "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda/Alias" [& [function-name function-version name description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionVersion :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Name :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Description] [function-name function-version name description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Alias m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Alias) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Alias m__1575651__auto__))))))
(clojure.core/defn map->Alias "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda/Alias" [{:keys [function-name function-version name description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionVersion :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Name :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Description] [function-name function-version name description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Alias m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Alias) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Alias m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Alias)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda/Alias (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/FunctionVersion :crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Name] :opt [:crucible.generated.ap-northeast-1.AWS.Lambda.Alias/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Build/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift.Build/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift)
(clojure.core/defn ->Build "Constructor for a :crucible.generated.ap-northeast-1.AWS.GameLift/Build" [& [name storage-location version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Build/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Build/StorageLocation :crucible.generated.ap-northeast-1.AWS.GameLift.Build/Version] [name storage-location version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift/Build m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift/Build) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift/Build m__1575651__auto__))))))
(clojure.core/defn map->Build "Convert a map to a :crucible.generated.ap-northeast-1.AWS.GameLift/Build" [{:keys [name storage-location version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.GameLift.Build/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Build/StorageLocation :crucible.generated.ap-northeast-1.AWS.GameLift.Build/Version] [name storage-location version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.GameLift/Build m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.GameLift/Build) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.GameLift/Build m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.GameLift.Build)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.GameLift/Build (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.GameLift.Build/Name :crucible.generated.ap-northeast-1.AWS.GameLift.Build/StorageLocation :crucible.generated.ap-northeast-1.AWS.GameLift.Build/Version]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Serial (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Status (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/UserName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->AccessKey "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey" [& [user-name serial status]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/UserName :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Serial :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Status] [user-name serial status])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey m__1575651__auto__))))))
(clojure.core/defn map->AccessKey "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey" [{:keys [user-name serial status]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/UserName :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Serial :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Status] [user-name serial status])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.AccessKey)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/AccessKey (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/UserName] :opt [:crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Serial :crucible.generated.ap-northeast-1.AWS.IAM.AccessKey/Status]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/CacheSubnetGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/SubnetIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache)
(clojure.core/defn ->SubnetGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup" [& [description subnet-ids cache-subnet-group-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/Description :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/SubnetIds :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/CacheSubnetGroupName] [description subnet-ids cache-subnet-group-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup m__1575651__auto__))))))
(clojure.core/defn map->SubnetGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup" [{:keys [description subnet-ids cache-subnet-group-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/Description :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/SubnetIds :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/CacheSubnetGroupName] [description subnet-ids cache-subnet-group-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache/SubnetGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/Description :crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/SubnetIds] :opt [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SubnetGroup/CacheSubnetGroupName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS.Alias/AliasName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS.Alias/TargetKeyId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KMS)
(clojure.core/defn ->Alias "Constructor for a :crucible.generated.ap-northeast-1.AWS.KMS/Alias" [& [alias-name target-key-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KMS.Alias/AliasName :crucible.generated.ap-northeast-1.AWS.KMS.Alias/TargetKeyId] [alias-name target-key-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KMS/Alias m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KMS/Alias) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KMS/Alias m__1575651__auto__))))))
(clojure.core/defn map->Alias "Convert a map to a :crucible.generated.ap-northeast-1.AWS.KMS/Alias" [{:keys [alias-name target-key-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.KMS.Alias/AliasName :crucible.generated.ap-northeast-1.AWS.KMS.Alias/TargetKeyId] [alias-name target-key-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.KMS/Alias m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.KMS/Alias) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.KMS/Alias m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.KMS.Alias)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.KMS/Alias (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.KMS.Alias/AliasName :crucible.generated.ap-northeast-1.AWS.KMS.Alias/TargetKeyId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.Certificate/CertificateSigningRequest (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.Certificate/Status (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT)
(clojure.core/defn ->Certificate "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT/Certificate" [& [certificate-signing-request status]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Certificate/CertificateSigningRequest :crucible.generated.ap-northeast-1.AWS.IoT.Certificate/Status] [certificate-signing-request status])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/Certificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/Certificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/Certificate m__1575651__auto__))))))
(clojure.core/defn map->Certificate "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT/Certificate" [{:keys [certificate-signing-request status]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Certificate/CertificateSigningRequest :crucible.generated.ap-northeast-1.AWS.IoT.Certificate/Status] [certificate-signing-request status])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/Certificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/Certificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/Certificate m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.Certificate)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT/Certificate (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.Certificate/CertificateSigningRequest :crucible.generated.ap-northeast-1.AWS.IoT.Certificate/Status] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/FileSystemId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/IpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EFS)
(clojure.core/defn ->MountTarget "Constructor for a :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget" [& [file-system-id security-groups subnet-id ip-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/FileSystemId :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SubnetId :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/IpAddress] [file-system-id security-groups subnet-id ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget m__1575651__auto__))))))
(clojure.core/defn map->MountTarget "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget" [{:keys [file-system-id security-groups subnet-id ip-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/FileSystemId :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SubnetId :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/IpAddress] [file-system-id security-groups subnet-id ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EFS.MountTarget)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS/MountTarget (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/FileSystemId :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SecurityGroups :crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/SubnetId] :opt [:crucible.generated.ap-northeast-1.AWS.EFS.MountTarget/IpAddress]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/EventPattern (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/ScheduleExpression (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/State (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events.Rule/Targets (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Events.Rule/Target) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Events)
(clojure.core/defn ->Rule "Constructor for a :crucible.generated.ap-northeast-1.AWS.Events/Rule" [& [description event-pattern name role-arn schedule-expression state targets]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Events.Rule/Description :crucible.generated.ap-northeast-1.AWS.Events.Rule/EventPattern :crucible.generated.ap-northeast-1.AWS.Events.Rule/Name :crucible.generated.ap-northeast-1.AWS.Events.Rule/RoleArn :crucible.generated.ap-northeast-1.AWS.Events.Rule/ScheduleExpression :crucible.generated.ap-northeast-1.AWS.Events.Rule/State :crucible.generated.ap-northeast-1.AWS.Events.Rule/Targets] [description event-pattern name role-arn schedule-expression state targets])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Events/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Events/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Events/Rule m__1575651__auto__))))))
(clojure.core/defn map->Rule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Events/Rule" [{:keys [description event-pattern name role-arn schedule-expression state targets]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Events.Rule/Description :crucible.generated.ap-northeast-1.AWS.Events.Rule/EventPattern :crucible.generated.ap-northeast-1.AWS.Events.Rule/Name :crucible.generated.ap-northeast-1.AWS.Events.Rule/RoleArn :crucible.generated.ap-northeast-1.AWS.Events.Rule/ScheduleExpression :crucible.generated.ap-northeast-1.AWS.Events.Rule/State :crucible.generated.ap-northeast-1.AWS.Events.Rule/Targets] [description event-pattern name role-arn schedule-expression state targets])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Events/Rule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Events/Rule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Events/Rule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Events.Rule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Events/Rule (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Events.Rule/Description :crucible.generated.ap-northeast-1.AWS.Events.Rule/EventPattern :crucible.generated.ap-northeast-1.AWS.Events.Rule/Name :crucible.generated.ap-northeast-1.AWS.Events.Rule/RoleArn :crucible.generated.ap-northeast-1.AWS.Events.Rule/ScheduleExpression :crucible.generated.ap-northeast-1.AWS.Events.Rule/State :crucible.generated.ap-northeast-1.AWS.Events.Rule/Targets]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuples (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuple) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF)
(clojure.core/defn ->XssMatchSet "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet" [& [name xss-match-tuples]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuples] [name xss-match-tuples])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet m__1575651__auto__))))))
(clojure.core/defn map->XssMatchSet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet" [{:keys [name xss-match-tuples]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuples] [name xss-match-tuples])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF/XssMatchSet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.XssMatchSet/XssMatchTuples] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/CacheSecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupOwnerId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache)
(clojure.core/defn ->SecurityGroupIngress "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress" [& [cache-security-group-name ec-2-security-group-name ec-2-security-group-owner-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/CacheSecurityGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupOwnerId] [cache-security-group-name ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress m__1575651__auto__))))))
(clojure.core/defn map->SecurityGroupIngress "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress" [{:keys [cache-security-group-name ec-2-security-group-name ec-2-security-group-owner-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/CacheSecurityGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupOwnerId] [cache-security-group-name ec-2-security-group-name ec-2-security-group-owner-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroupIngress (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/CacheSecurityGroupName :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupName] :opt [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroupIngress/EC2SecurityGroupOwnerId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Family (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Parameters (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->DBClusterParameterGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup" [& [description family parameters tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Family :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Parameters :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Tags] [description family parameters tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup m__1575651__auto__))))))
(clojure.core/defn map->DBClusterParameterGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup" [{:keys [description family parameters tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Family :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Parameters :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Tags] [description family parameters tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/DBClusterParameterGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Family :crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Parameters] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBClusterParameterGroup/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthyThresholdCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckTimeoutSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/UnhealthyThresholdCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckIntervalSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPort (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckProtocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Targets (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetDescription) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttributes (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttribute) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPath (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2)
(clojure.core/defn ->TargetGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup" [& [port protocol vpc-id health-check-interval-seconds health-check-path health-check-port health-check-protocol health-check-timeout-seconds healthy-threshold-count matcher name tags target-group-attributes targets unhealthy-threshold-count]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Port :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Protocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/VpcId :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckIntervalSeconds :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPath :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckProtocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckTimeoutSeconds :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthyThresholdCount :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Name :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Tags :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Targets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/UnhealthyThresholdCount] [port protocol vpc-id health-check-interval-seconds health-check-path health-check-port health-check-protocol health-check-timeout-seconds healthy-threshold-count matcher name tags target-group-attributes targets unhealthy-threshold-count])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup m__1575651__auto__))))))
(clojure.core/defn map->TargetGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup" [{:keys [port protocol vpc-id health-check-interval-seconds health-check-path health-check-port health-check-protocol health-check-timeout-seconds healthy-threshold-count matcher name tags target-group-attributes targets unhealthy-threshold-count]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Port :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Protocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/VpcId :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckIntervalSeconds :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPath :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckProtocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckTimeoutSeconds :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthyThresholdCount :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Name :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Tags :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Targets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/UnhealthyThresholdCount] [port protocol vpc-id health-check-interval-seconds health-check-path health-check-port health-check-protocol health-check-timeout-seconds healthy-threshold-count matcher name tags target-group-attributes targets unhealthy-threshold-count])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/TargetGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Port :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Protocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckIntervalSeconds :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPath :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckPort :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckProtocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthCheckTimeoutSeconds :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/HealthyThresholdCount :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Matcher :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Name :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Tags :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/TargetGroupAttributes :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/Targets :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.TargetGroup/UnhealthyThresholdCount]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AccessPolicies (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AdvancedOptions (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/DomainName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch)
(clojure.core/defn ->Domain "Constructor for a :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain" [& [access-policies advanced-options domain-name ebs-options elasticsearch-cluster-config elasticsearch-version snapshot-options tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AccessPolicies :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AdvancedOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/DomainName :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchVersion :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/Tags] [access-policies advanced-options domain-name ebs-options elasticsearch-cluster-config elasticsearch-version snapshot-options tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain m__1575651__auto__))))))
(clojure.core/defn map->Domain "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain" [{:keys [access-policies advanced-options domain-name ebs-options elasticsearch-cluster-config elasticsearch-version snapshot-options tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AccessPolicies :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AdvancedOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/DomainName :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchVersion :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/Tags] [access-policies advanced-options domain-name ebs-options elasticsearch-cluster-config elasticsearch-version snapshot-options tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Elasticsearch/Domain (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AccessPolicies :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/AdvancedOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/DomainName :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/EBSOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchClusterConfig :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/ElasticsearchVersion :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/SnapshotOptions :crucible.generated.ap-northeast-1.AWS.Elasticsearch.Domain/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/ParentId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/PathPart (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->Resource "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource" [& [parent-id path-part rest-api-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/ParentId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/PathPart :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/RestApiId] [parent-id path-part rest-api-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource m__1575651__auto__))))))
(clojure.core/defn map->Resource "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource" [{:keys [parent-id path-part rest-api-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/ParentId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/PathPart :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/RestApiId] [parent-id path-part rest-api-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/Resource (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/ParentId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/PathPart :crucible.generated.ap-northeast-1.AWS.ApiGateway.Resource/RestApiId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/GroupSet (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SourceDestCheck (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddresses (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddressSpecification) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SecondaryPrivateIpAddressCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Ipv6AddressCount (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->NetworkInterface "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface" [& [subnet-id description group-set ipv-6-address-count ipv-6-addresses private-ip-address private-ip-addresses secondary-private-ip-address-count source-dest-check tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Description :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/GroupSet :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SourceDestCheck :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Tags] [subnet-id description group-set ipv-6-address-count ipv-6-addresses private-ip-address private-ip-addresses secondary-private-ip-address-count source-dest-check tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface m__1575651__auto__))))))
(clojure.core/defn map->NetworkInterface "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface" [{:keys [subnet-id description group-set ipv-6-address-count ipv-6-addresses private-ip-address private-ip-addresses secondary-private-ip-address-count source-dest-check tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SubnetId :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Description :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/GroupSet :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SourceDestCheck :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Tags] [subnet-id description group-set ipv-6-address-count ipv-6-addresses private-ip-address private-ip-addresses secondary-private-ip-address-count source-dest-check tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/NetworkInterface (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SubnetId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Description :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/GroupSet :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Ipv6AddressCount :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Ipv6Addresses :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddress :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/PrivateIpAddresses :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SecondaryPrivateIpAddressCount :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/SourceDestCheck :crucible.generated.ap-northeast-1.AWS.EC2.NetworkInterface/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/Principal (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/ThingName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT)
(clojure.core/defn ->ThingPrincipalAttachment "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment" [& [principal thing-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/Principal :crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/ThingName] [principal thing-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment m__1575651__auto__))))))
(clojure.core/defn map->ThingPrincipalAttachment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment" [{:keys [principal thing-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/Principal :crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/ThingName] [principal thing-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT/ThingPrincipalAttachment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/Principal :crucible.generated.ap-northeast-1.AWS.IoT.ThingPrincipalAttachment/ThingName] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/AmazonProvidedIpv6CidrBlock (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPCCidrBlock "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock" [& [vpc-id amazon-provided-ipv-6-cidr-block]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/AmazonProvidedIpv6CidrBlock] [vpc-id amazon-provided-ipv-6-cidr-block])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock m__1575651__auto__))))))
(clojure.core/defn map->VPCCidrBlock "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock" [{:keys [vpc-id amazon-provided-ipv-6-cidr-block]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/AmazonProvidedIpv6CidrBlock] [vpc-id amazon-provided-ipv-6-cidr-block])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPCCidrBlock (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.VPCCidrBlock/AmazonProvidedIpv6CidrBlock]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStages (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStage) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/UsagePlanName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->UsagePlan "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan" [& [api-stages description quota throttle usage-plan-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStages :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Quota :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Throttle :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/UsagePlanName] [api-stages description quota throttle usage-plan-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan m__1575651__auto__))))))
(clojure.core/defn map->UsagePlan "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan" [{:keys [api-stages description quota throttle usage-plan-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStages :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Quota :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Throttle :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/UsagePlanName] [api-stages description quota throttle usage-plan-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/UsagePlan (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/ApiStages :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Quota :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/Throttle :crucible.generated.ap-northeast-1.AWS.ApiGateway.UsagePlan/UsagePlanName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Activate (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObjects (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObject) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValues (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValue) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObjects (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObject) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline)
(clojure.core/defn ->Pipeline "Constructor for a :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline" [& [name parameter-objects activate description parameter-values pipeline-objects pipeline-tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Name :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObjects :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Activate :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Description :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValues :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObjects :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTags] [name parameter-objects activate description parameter-values pipeline-objects pipeline-tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline m__1575651__auto__))))))
(clojure.core/defn map->Pipeline "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline" [{:keys [name parameter-objects activate description parameter-values pipeline-objects pipeline-tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Name :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObjects :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Activate :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Description :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValues :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObjects :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTags] [name parameter-objects activate description parameter-values pipeline-objects pipeline-tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DataPipeline/Pipeline (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Name :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterObjects] :opt [:crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Activate :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/Description :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/ParameterValues :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineObjects :crucible.generated.ap-northeast-1.AWS.DataPipeline.Pipeline/PipelineTags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/FileSystemTags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/ElasticFileSystemTag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/PerformanceMode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EFS)
(clojure.core/defn ->FileSystem "Constructor for a :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem" [& [file-system-tags performance-mode]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/FileSystemTags :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/PerformanceMode] [file-system-tags performance-mode])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem m__1575651__auto__))))))
(clojure.core/defn map->FileSystem "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem" [{:keys [file-system-tags performance-mode]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/FileSystemTags :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/PerformanceMode] [file-system-tags performance-mode])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EFS.FileSystem)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EFS/FileSystem (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/FileSystemTags :crucible.generated.ap-northeast-1.AWS.EFS.FileSystem/PerformanceMode]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuples (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuple) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF)
(clojure.core/defn ->SqlInjectionMatchSet "Constructor for a :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet" [& [name sql-injection-match-tuples]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuples] [name sql-injection-match-tuples])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet m__1575651__auto__))))))
(clojure.core/defn map->SqlInjectionMatchSet "Convert a map to a :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet" [{:keys [name sql-injection-match-tuples]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/Name :crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuples] [name sql-injection-match-tuples])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.WAF/SqlInjectionMatchSet (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/Name] :opt [:crucible.generated.ap-northeast-1.AWS.WAF.SqlInjectionMatchSet/SqlInjectionMatchTuples]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/Ipv6CidrBlock (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->SubnetCidrBlock "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock" [& [ipv-6-cidr-block subnet-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/Ipv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/SubnetId] [ipv-6-cidr-block subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock m__1575651__auto__))))))
(clojure.core/defn map->SubnetCidrBlock "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock" [{:keys [ipv-6-cidr-block subnet-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/Ipv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/SubnetId] [ipv-6-cidr-block subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/SubnetCidrBlock (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/Ipv6CidrBlock :crucible.generated.ap-northeast-1.AWS.EC2.SubnetCidrBlock/SubnetId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SDB.Domain/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SDB)
(clojure.core/defn ->Domain "Constructor for a :crucible.generated.ap-northeast-1.AWS.SDB/Domain" [& [description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SDB.Domain/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SDB/Domain m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SDB/Domain) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SDB/Domain m__1575651__auto__))))))
(clojure.core/defn map->Domain "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SDB/Domain" [{:keys [description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SDB.Domain/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SDB/Domain m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SDB/Domain) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SDB/Domain m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SDB.Domain)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SDB/Domain (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.SDB.Domain/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinitions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinition) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Family (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/NetworkMode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/TaskRoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volumes (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volume) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS)
(clojure.core/defn ->TaskDefinition "Constructor for a :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition" [& [container-definitions family network-mode task-role-arn volumes]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinitions :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Family :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/NetworkMode :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/TaskRoleArn :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volumes] [container-definitions family network-mode task-role-arn volumes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition m__1575651__auto__))))))
(clojure.core/defn map->TaskDefinition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition" [{:keys [container-definitions family network-mode task-role-arn volumes]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinitions :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Family :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/NetworkMode :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/TaskRoleArn :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volumes] [container-definitions family network-mode task-role-arn volumes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ECS/TaskDefinition (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/ContainerDefinitions :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Family :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/NetworkMode :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/TaskRoleArn :crucible.generated.ap-northeast-1.AWS.ECS.TaskDefinition/Volumes]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Type (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentityValidationExpression (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerCredentials (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentitySource (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/ProviderARNs (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerResultTtlInSeconds (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerUri (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->Authorizer "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer" [& [authorizer-credentials authorizer-result-ttl-in-seconds authorizer-uri identity-source identity-validation-expression name provider-ar-ns rest-api-id type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerCredentials :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerResultTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerUri :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentitySource :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentityValidationExpression :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/ProviderARNs :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Type] [authorizer-credentials authorizer-result-ttl-in-seconds authorizer-uri identity-source identity-validation-expression name provider-ar-ns rest-api-id type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer m__1575651__auto__))))))
(clojure.core/defn map->Authorizer "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer" [{:keys [authorizer-credentials authorizer-result-ttl-in-seconds authorizer-uri identity-source identity-validation-expression name provider-ar-ns rest-api-id type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerCredentials :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerResultTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerUri :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentitySource :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentityValidationExpression :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/ProviderARNs :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Type] [authorizer-credentials authorizer-result-ttl-in-seconds authorizer-uri identity-source identity-validation-expression name provider-ar-ns rest-api-id type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/Authorizer (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerCredentials :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerResultTtlInSeconds :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/AuthorizerUri :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentitySource :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/IdentityValidationExpression :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/ProviderARNs :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Authorizer/Type]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Host/AutoPlacement (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Host/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Host/InstanceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->Host "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/Host" [& [availability-zone instance-type auto-placement]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Host/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Host/InstanceType :crucible.generated.ap-northeast-1.AWS.EC2.Host/AutoPlacement] [availability-zone instance-type auto-placement])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Host m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Host) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Host m__1575651__auto__))))))
(clojure.core/defn map->Host "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/Host" [{:keys [availability-zone instance-type auto-placement]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Host/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Host/InstanceType :crucible.generated.ap-northeast-1.AWS.EC2.Host/AutoPlacement] [availability-zone instance-type auto-placement])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Host m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Host) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Host m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Host)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/Host (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Host/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Host/InstanceType] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Host/AutoPlacement]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationPolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.Destination/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.Destination/TargetArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs)
(clojure.core/defn ->Destination "Constructor for a :crucible.generated.ap-northeast-1.AWS.Logs/Destination" [& [destination-name destination-policy role-arn target-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationName :crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationPolicy :crucible.generated.ap-northeast-1.AWS.Logs.Destination/RoleArn :crucible.generated.ap-northeast-1.AWS.Logs.Destination/TargetArn] [destination-name destination-policy role-arn target-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/Destination m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/Destination) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/Destination m__1575651__auto__))))))
(clojure.core/defn map->Destination "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Logs/Destination" [{:keys [destination-name destination-policy role-arn target-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationName :crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationPolicy :crucible.generated.ap-northeast-1.AWS.Logs.Destination/RoleArn :crucible.generated.ap-northeast-1.AWS.Logs.Destination/TargetArn] [destination-name destination-policy role-arn target-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/Destination m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/Destination) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/Destination m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs.Destination)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs/Destination (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationName :crucible.generated.ap-northeast-1.AWS.Logs.Destination/DestinationPolicy :crucible.generated.ap-northeast-1.AWS.Logs.Destination/RoleArn :crucible.generated.ap-northeast-1.AWS.Logs.Destination/TargetArn] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Variables (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/ClientCertificateId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterSize (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterEnabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/DeploymentId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSettings (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSetting) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/StageName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/RestApiId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->Stage "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage" [& [cache-cluster-enabled cache-cluster-size client-certificate-id deployment-id description method-settings rest-api-id stage-name variables]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterSize :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/ClientCertificateId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/DeploymentId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSettings :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/StageName :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Variables] [cache-cluster-enabled cache-cluster-size client-certificate-id deployment-id description method-settings rest-api-id stage-name variables])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage m__1575651__auto__))))))
(clojure.core/defn map->Stage "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage" [{:keys [cache-cluster-enabled cache-cluster-size client-certificate-id deployment-id description method-settings rest-api-id stage-name variables]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterSize :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/ClientCertificateId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/DeploymentId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSettings :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/StageName :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Variables] [cache-cluster-enabled cache-cluster-size client-certificate-id deployment-id description method-settings rest-api-id stage-name variables])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/Stage (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterEnabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/CacheClusterSize :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/ClientCertificateId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/DeploymentId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/MethodSettings :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/RestApiId :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/StageName :crucible.generated.ap-northeast-1.AWS.ApiGateway.Stage/Variables]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Body (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/CloneFrom (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/FailOnWarnings (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Mode (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Parameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->RestApi "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi" [& [body body-s-3-location clone-from description fail-on-warnings mode name parameters]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Body :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/BodyS3Location :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/CloneFrom :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/FailOnWarnings :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Mode :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Parameters] [body body-s-3-location clone-from description fail-on-warnings mode name parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi m__1575651__auto__))))))
(clojure.core/defn map->RestApi "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi" [{:keys [body body-s-3-location clone-from description fail-on-warnings mode name parameters]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Body :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/BodyS3Location :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/CloneFrom :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/FailOnWarnings :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Mode :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Parameters] [body body-s-3-location clone-from description fail-on-warnings mode name parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/RestApi (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Body :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/BodyS3Location :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/CloneFrom :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/FailOnWarnings :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Mode :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.RestApi/Parameters]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Category (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Provider (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Version (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline)
(clojure.core/defn ->CustomActionType "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType" [& [category input-artifact-details output-artifact-details provider configuration-properties settings version]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Category :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/InputArtifactDetails :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/OutputArtifactDetails :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Provider :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Version] [category input-artifact-details output-artifact-details provider configuration-properties settings version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType m__1575651__auto__))))))
(clojure.core/defn map->CustomActionType "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType" [{:keys [category input-artifact-details output-artifact-details provider configuration-properties settings version]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Category :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/InputArtifactDetails :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/OutputArtifactDetails :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Provider :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Version] [category input-artifact-details output-artifact-details provider configuration-properties settings version])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline/CustomActionType (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Category :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/InputArtifactDetails :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/OutputArtifactDetails :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Provider] :opt [:crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/ConfigurationProperties :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Settings :crucible.generated.ap-northeast-1.AWS.CodePipeline.CustomActionType/Version]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LoadBalancerNames (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/VPCZoneIdentifier (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AsTags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TagProperty) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/Cooldown (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LaunchConfigurationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TargetGroupARNs (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MinSize (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AvailabilityZones (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TerminationPolicies (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MaxSize (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/PlacementGroup (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/DesiredCapacity (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckGracePeriod (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling)
(clojure.core/defn ->AutoScalingGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup" [& [max-size min-size as-tags availability-zones cooldown desired-capacity health-check-grace-period health-check-type instance-id launch-configuration-name load-balancer-names metrics-collection notification-configurations placement-group target-group-ar-ns termination-policies vpc-zone-identifier]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MaxSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MinSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AsTags :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/Cooldown :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/DesiredCapacity :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckGracePeriod :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckType :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/InstanceId :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LaunchConfigurationName :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LoadBalancerNames :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/PlacementGroup :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TargetGroupARNs :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TerminationPolicies :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/VPCZoneIdentifier] [max-size min-size as-tags availability-zones cooldown desired-capacity health-check-grace-period health-check-type instance-id launch-configuration-name load-balancer-names metrics-collection notification-configurations placement-group target-group-ar-ns termination-policies vpc-zone-identifier])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup m__1575651__auto__))))))
(clojure.core/defn map->AutoScalingGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup" [{:keys [max-size min-size as-tags availability-zones cooldown desired-capacity health-check-grace-period health-check-type instance-id launch-configuration-name load-balancer-names metrics-collection notification-configurations placement-group target-group-ar-ns termination-policies vpc-zone-identifier]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MaxSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MinSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AsTags :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/Cooldown :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/DesiredCapacity :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckGracePeriod :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckType :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/InstanceId :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LaunchConfigurationName :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LoadBalancerNames :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/PlacementGroup :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TargetGroupARNs :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TerminationPolicies :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/VPCZoneIdentifier] [max-size min-size as-tags availability-zones cooldown desired-capacity health-check-grace-period health-check-type instance-id launch-configuration-name load-balancer-names metrics-collection notification-configurations placement-group target-group-ar-ns termination-policies vpc-zone-identifier])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.AutoScaling/AutoScalingGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MaxSize :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MinSize] :opt [:crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AsTags :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/Cooldown :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/DesiredCapacity :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckGracePeriod :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/HealthCheckType :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/InstanceId :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LaunchConfigurationName :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/LoadBalancerNames :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/MetricsCollection :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/NotificationConfigurations :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/PlacementGroup :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TargetGroupARNs :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/TerminationPolicies :crucible.generated.ap-northeast-1.AWS.AutoScaling.AutoScalingGroup/VPCZoneIdentifier]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/DisableInboundStageTransitions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageTransition) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RestartExecutionOnUpdate (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Stages (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/StageDeclaration) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline)
(clojure.core/defn ->Pipeline "Constructor for a :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline" [& [artifact-store role-arn stages disable-inbound-stage-transitions name restart-execution-on-update]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RoleArn :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Stages :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/DisableInboundStageTransitions :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RestartExecutionOnUpdate] [artifact-store role-arn stages disable-inbound-stage-transitions name restart-execution-on-update])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline m__1575651__auto__))))))
(clojure.core/defn map->Pipeline "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline" [{:keys [artifact-store role-arn stages disable-inbound-stage-transitions name restart-execution-on-update]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RoleArn :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Stages :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/DisableInboundStageTransitions :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RestartExecutionOnUpdate] [artifact-store role-arn stages disable-inbound-stage-transitions name restart-execution-on-update])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CodePipeline/Pipeline (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/ArtifactStore :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RoleArn :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Stages] :opt [:crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/DisableInboundStageTransitions :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/Name :crucible.generated.ap-northeast-1.AWS.CodePipeline.Pipeline/RestartExecutionOnUpdate]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/InternetGatewayId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpcId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpnGatewayId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->VPCGatewayAttachment "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment" [& [vpc-id internet-gateway-id vpn-gateway-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/InternetGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpnGatewayId] [vpc-id internet-gateway-id vpn-gateway-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment m__1575651__auto__))))))
(clojure.core/defn map->VPCGatewayAttachment "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment" [{:keys [vpc-id internet-gateway-id vpn-gateway-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpcId :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/InternetGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpnGatewayId] [vpc-id internet-gateway-id vpn-gateway-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/VPCGatewayAttachment (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpcId] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/InternetGatewayId :crucible.generated.ap-northeast-1.AWS.EC2.VPCGatewayAttachment/VpnGatewayId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/NotificationARNs (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Parameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TemplateURL (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TimeoutInMinutes (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation)
(clojure.core/defn ->Stack "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack" [& [template-url notification-ar-ns parameters tags timeout-in-minutes]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TemplateURL :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/NotificationARNs :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Parameters :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Tags :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TimeoutInMinutes] [template-url notification-ar-ns parameters tags timeout-in-minutes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack m__1575651__auto__))))))
(clojure.core/defn map->Stack "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack" [{:keys [template-url notification-ar-ns parameters tags timeout-in-minutes]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TemplateURL :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/NotificationARNs :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Parameters :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Tags :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TimeoutInMinutes] [template-url notification-ar-ns parameters tags timeout-in-minutes])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation/Stack (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TemplateURL] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/NotificationARNs :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Parameters :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/Tags :crucible.generated.ap-northeast-1.AWS.CloudFormation.Stack/TimeoutInMinutes]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Encrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/KmsKeyId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Size (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Iops (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/AutoEnableIO (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/VolumeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.Volume/SnapshotId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->Volume "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/Volume" [& [availability-zone auto-enable-io encrypted iops kms-key-id size snapshot-id tags volume-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Volume/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Volume/AutoEnableIO :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Iops :crucible.generated.ap-northeast-1.AWS.EC2.Volume/KmsKeyId :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Size :crucible.generated.ap-northeast-1.AWS.EC2.Volume/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Tags :crucible.generated.ap-northeast-1.AWS.EC2.Volume/VolumeType] [availability-zone auto-enable-io encrypted iops kms-key-id size snapshot-id tags volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Volume m__1575651__auto__))))))
(clojure.core/defn map->Volume "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/Volume" [{:keys [availability-zone auto-enable-io encrypted iops kms-key-id size snapshot-id tags volume-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.Volume/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.EC2.Volume/AutoEnableIO :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Iops :crucible.generated.ap-northeast-1.AWS.EC2.Volume/KmsKeyId :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Size :crucible.generated.ap-northeast-1.AWS.EC2.Volume/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Tags :crucible.generated.ap-northeast-1.AWS.EC2.Volume/VolumeType] [availability-zone auto-enable-io encrypted iops kms-key-id size snapshot-id tags volume-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/Volume m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/Volume) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/Volume m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.Volume)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/Volume (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.Volume/AvailabilityZone] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.Volume/AutoEnableIO :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Encrypted :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Iops :crucible.generated.ap-northeast-1.AWS.EC2.Volume/KmsKeyId :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Size :crucible.generated.ap-northeast-1.AWS.EC2.Volume/SnapshotId :crucible.generated.ap-northeast-1.AWS.EC2.Volume/Tags :crucible.generated.ap-northeast-1.AWS.EC2.Volume/VolumeType]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PubliclyAccessible (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PreferredMaintenanceWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Encrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/OwnerAccount (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/HsmClientCertificateIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSubnetGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NumberOfNodes (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/DBName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/VpcSecurityGroupIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AvailabilityZone (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUserPassword (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSecurityGroups (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ElasticIp (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUsername (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/KmsKeyId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AutomatedSnapshotRetentionPeriod (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AllowVersionUpdate (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NodeType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotClusterIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterParameterGroupName (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift)
(clojure.core/defn ->Cluster "Constructor for a :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster" [& [cluster-type db-name master-user-password master-username node-type allow-version-update automated-snapshot-retention-period availability-zone cluster-parameter-group-name cluster-security-groups cluster-subnet-group-name cluster-version elastic-ip encrypted hsm-client-certificate-identifier kms-key-id number-of-nodes owner-account port preferred-maintenance-window publicly-accessible snapshot-cluster-identifier snapshot-identifier vpc-security-group-ids]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterType :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/DBName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUsername :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NodeType :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AllowVersionUpdate :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AutomatedSnapshotRetentionPeriod :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterParameterGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSecurityGroups :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSubnetGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterVersion :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ElasticIp :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Encrypted :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/HsmClientCertificateIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/KmsKeyId :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NumberOfNodes :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/OwnerAccount :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Port :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PubliclyAccessible :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotClusterIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/VpcSecurityGroupIds] [cluster-type db-name master-user-password master-username node-type allow-version-update automated-snapshot-retention-period availability-zone cluster-parameter-group-name cluster-security-groups cluster-subnet-group-name cluster-version elastic-ip encrypted hsm-client-certificate-identifier kms-key-id number-of-nodes owner-account port preferred-maintenance-window publicly-accessible snapshot-cluster-identifier snapshot-identifier vpc-security-group-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster m__1575651__auto__))))))
(clojure.core/defn map->Cluster "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster" [{:keys [cluster-type db-name master-user-password master-username node-type allow-version-update automated-snapshot-retention-period availability-zone cluster-parameter-group-name cluster-security-groups cluster-subnet-group-name cluster-version elastic-ip encrypted hsm-client-certificate-identifier kms-key-id number-of-nodes owner-account port preferred-maintenance-window publicly-accessible snapshot-cluster-identifier snapshot-identifier vpc-security-group-ids]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterType :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/DBName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUsername :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NodeType :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AllowVersionUpdate :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AutomatedSnapshotRetentionPeriod :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterParameterGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSecurityGroups :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSubnetGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterVersion :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ElasticIp :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Encrypted :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/HsmClientCertificateIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/KmsKeyId :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NumberOfNodes :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/OwnerAccount :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Port :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PubliclyAccessible :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotClusterIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/VpcSecurityGroupIds] [cluster-type db-name master-user-password master-username node-type allow-version-update automated-snapshot-retention-period availability-zone cluster-parameter-group-name cluster-security-groups cluster-subnet-group-name cluster-version elastic-ip encrypted hsm-client-certificate-identifier kms-key-id number-of-nodes owner-account port preferred-maintenance-window publicly-accessible snapshot-cluster-identifier snapshot-identifier vpc-security-group-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift.Cluster)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift/Cluster (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterType :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/DBName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/MasterUsername :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NodeType] :opt [:crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AllowVersionUpdate :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AutomatedSnapshotRetentionPeriod :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/AvailabilityZone :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterParameterGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSecurityGroups :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterSubnetGroupName :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ClusterVersion :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/ElasticIp :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Encrypted :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/HsmClientCertificateIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/KmsKeyId :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/NumberOfNodes :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/OwnerAccount :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/Port :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/PubliclyAccessible :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotClusterIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/SnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.Redshift.Cluster/VpcSecurityGroupIds]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache)
(clojure.core/defn ->SecurityGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup" [& [description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroup/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup m__1575651__auto__))))))
(clojure.core/defn map->SecurityGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup" [{:keys [description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroup/Description] [description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElastiCache/SecurityGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElastiCache.SecurityGroup/Description] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificates (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificate) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/DefaultActions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Action) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/LoadBalancerArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Protocol (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/SslPolicy (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2)
(clojure.core/defn ->Listener "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener" [& [default-actions load-balancer-arn port protocol certificates ssl-policy]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/DefaultActions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/LoadBalancerArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Port :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Protocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificates :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/SslPolicy] [default-actions load-balancer-arn port protocol certificates ssl-policy])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener m__1575651__auto__))))))
(clojure.core/defn map->Listener "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener" [{:keys [default-actions load-balancer-arn port protocol certificates ssl-policy]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/DefaultActions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/LoadBalancerArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Port :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Protocol :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificates :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/SslPolicy] [default-actions load-balancer-arn port protocol certificates ssl-policy])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2/Listener (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/DefaultActions :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/LoadBalancerArn :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Port :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Protocol] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/Certificates :crucible.generated.ap-northeast-1.AWS.ElasticLoadBalancingV2.Listener/SslPolicy]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/DeliverLogsPermissionArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/LogGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/TrafficType (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->FlowLog "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog" [& [deliver-logs-permission-arn log-group-name resource-id resource-type traffic-type]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/DeliverLogsPermissionArn :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/LogGroupName :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceId :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceType :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/TrafficType] [deliver-logs-permission-arn log-group-name resource-id resource-type traffic-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog m__1575651__auto__))))))
(clojure.core/defn map->FlowLog "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog" [{:keys [deliver-logs-permission-arn log-group-name resource-id resource-type traffic-type]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/DeliverLogsPermissionArn :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/LogGroupName :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceId :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceType :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/TrafficType] [deliver-logs-permission-arn log-group-name resource-id resource-type traffic-type])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.FlowLog)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/FlowLog (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/DeliverLogsPermissionArn :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/LogGroupName :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceId :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/ResourceType :crucible.generated.ap-northeast-1.AWS.EC2.FlowLog/TrafficType] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Family (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Parameters (clojure.spec/map-of clojure.core/string? (crucible.resources/spec-or-ref clojure.core/string?)))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->DBParameterGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup" [& [description family parameters tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Family :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Parameters :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Tags] [description family parameters tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup m__1575651__auto__))))))
(clojure.core/defn map->DBParameterGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup" [{:keys [description family parameters tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Family :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Parameters :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Tags] [description family parameters tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/DBParameterGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Family] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Parameters :crucible.generated.ap-northeast-1.AWS.RDS.DBParameterGroup/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Count (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Handle (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Timeout (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation)
(clojure.core/defn ->WaitCondition "Constructor for a :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition" [& [handle timeout count]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Handle :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Timeout :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Count] [handle timeout count])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition m__1575651__auto__))))))
(clojure.core/defn map->WaitCondition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition" [{:keys [handle timeout count]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Handle :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Timeout :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Count] [handle timeout count])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CloudFormation/WaitCondition (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Handle :crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Timeout] :opt [:crucible.generated.ap-northeast-1.AWS.CloudFormation.WaitCondition/Count]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.EIP/Domain (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.EIP/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->EIP "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/EIP" [& [domain instance-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.EIP/Domain :crucible.generated.ap-northeast-1.AWS.EC2.EIP/InstanceId] [domain instance-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/EIP m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/EIP) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/EIP m__1575651__auto__))))))
(clojure.core/defn map->EIP "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/EIP" [{:keys [domain instance-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.EIP/Domain :crucible.generated.ap-northeast-1.AWS.EC2.EIP/InstanceId] [domain instance-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/EIP m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/EIP) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/EIP m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.EIP)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/EIP (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.EIP/Domain :crucible.generated.ap-northeast-1.AWS.EC2.EIP/InstanceId]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinitions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinition) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndexes (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndex) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndexes (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndex) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/TableName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB)
(clojure.core/defn ->Table "Constructor for a :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table" [& [attribute-definitions key-schema provisioned-throughput global-secondary-indexes local-secondary-indexes stream-specification table-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinitions :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndexes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndexes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/TableName] [attribute-definitions key-schema provisioned-throughput global-secondary-indexes local-secondary-indexes stream-specification table-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table m__1575651__auto__))))))
(clojure.core/defn map->Table "Convert a map to a :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table" [{:keys [attribute-definitions key-schema provisioned-throughput global-secondary-indexes local-secondary-indexes stream-specification table-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinitions :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndexes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndexes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/TableName] [attribute-definitions key-schema provisioned-throughput global-secondary-indexes local-secondary-indexes stream-specification table-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.DynamoDB.Table)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.DynamoDB/Table (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/AttributeDefinitions :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/KeySchema :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/ProvisionedThroughput] :opt [:crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/GlobalSecondaryIndexes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/LocalSecondaryIndexes :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/StreamSpecification :crucible.generated.ap-northeast-1.AWS.DynamoDB.Table/TableName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/AllocationId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/SubnetId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->NatGateway "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway" [& [allocation-id subnet-id]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/AllocationId :crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/SubnetId] [allocation-id subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway m__1575651__auto__))))))
(clojure.core/defn map->NatGateway "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway" [{:keys [allocation-id subnet-id]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/AllocationId :crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/SubnetId] [allocation-id subnet-id])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.NatGateway)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/NatGateway (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/AllocationId :crucible.generated.ap-northeast-1.AWS.EC2.NatGateway/SubnetId] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/ParameterGroupFamily (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameters (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameter) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift)
(clojure.core/defn ->ClusterParameterGroup "Constructor for a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup" [& [description parameter-group-family parameters]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/ParameterGroupFamily :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameters] [description parameter-group-family parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup m__1575651__auto__))))))
(clojure.core/defn map->ClusterParameterGroup "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup" [{:keys [description parameter-group-family parameters]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/ParameterGroupFamily :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameters] [description parameter-group-family parameters])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Redshift/ClusterParameterGroup (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Description :crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/ParameterGroupFamily] :opt [:crucible.generated.ap-northeast-1.AWS.Redshift.ClusterParameterGroup/Parameters]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step/ActionOnFailure (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step/JobFlowId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR.Step/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR)
(clojure.core/defn ->Step "Constructor for a :crucible.generated.ap-northeast-1.AWS.EMR/Step" [& [action-on-failure hadoop-jar-step job-flow-id name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Step/ActionOnFailure :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStep :crucible.generated.ap-northeast-1.AWS.EMR.Step/JobFlowId :crucible.generated.ap-northeast-1.AWS.EMR.Step/Name] [action-on-failure hadoop-jar-step job-flow-id name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR/Step m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR/Step) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR/Step m__1575651__auto__))))))
(clojure.core/defn map->Step "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EMR/Step" [{:keys [action-on-failure hadoop-jar-step job-flow-id name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EMR.Step/ActionOnFailure :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStep :crucible.generated.ap-northeast-1.AWS.EMR.Step/JobFlowId :crucible.generated.ap-northeast-1.AWS.EMR.Step/Name] [action-on-failure hadoop-jar-step job-flow-id name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EMR/Step m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EMR/Step) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EMR/Step m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EMR.Step)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EMR/Step (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.EMR.Step/ActionOnFailure :crucible.generated.ap-northeast-1.AWS.EMR.Step/HadoopJarStep :crucible.generated.ap-northeast-1.AWS.EMR.Step/JobFlowId :crucible.generated.ap-northeast-1.AWS.EMR.Step/Name] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/DestinationArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/FilterPattern (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/LogGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/RoleArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs)
(clojure.core/defn ->SubscriptionFilter "Constructor for a :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter" [& [destination-arn filter-pattern log-group-name role-arn]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/DestinationArn :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/FilterPattern :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/RoleArn] [destination-arn filter-pattern log-group-name role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter m__1575651__auto__))))))
(clojure.core/defn map->SubscriptionFilter "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter" [{:keys [destination-arn filter-pattern log-group-name role-arn]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/DestinationArn :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/FilterPattern :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/LogGroupName :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/RoleArn] [destination-arn filter-pattern log-group-name role-arn])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Logs/SubscriptionFilter (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/DestinationArn :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/FilterPattern :crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/LogGroupName] :opt [:crucible.generated.ap-northeast-1.AWS.Logs.SubscriptionFilter/RoleArn]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Enabled (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Name (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKeys (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKey) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway)
(clojure.core/defn ->ApiKey "Constructor for a :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey" [& [description enabled name stage-keys]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Enabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKeys] [description enabled name stage-keys])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey m__1575651__auto__))))))
(clojure.core/defn map->ApiKey "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey" [{:keys [description enabled name stage-keys]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Enabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKeys] [description enabled name stage-keys])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ApiGateway/ApiKey (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Description :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Enabled :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/Name :crucible.generated.ap-northeast-1.AWS.ApiGateway.ApiKey/StageKeys]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyDocument (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT)
(clojure.core/defn ->Policy "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT/Policy" [& [policy-document policy-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/Policy m__1575651__auto__))))))
(clojure.core/defn map->Policy "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT/Policy" [{:keys [policy-document policy-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyDocument :crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyName] [policy-document policy-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/Policy m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/Policy) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/Policy m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.Policy)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT/Policy (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyDocument] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.Policy/PolicyName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Version/CodeSha256 (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Version/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda.Version/FunctionName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda)
(clojure.core/defn ->Version "Constructor for a :crucible.generated.ap-northeast-1.AWS.Lambda/Version" [& [function-name code-sha-256 description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Version/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Version/CodeSha256 :crucible.generated.ap-northeast-1.AWS.Lambda.Version/Description] [function-name code-sha-256 description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Version m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Version) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Version m__1575651__auto__))))))
(clojure.core/defn map->Version "Convert a map to a :crucible.generated.ap-northeast-1.AWS.Lambda/Version" [{:keys [function-name code-sha-256 description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.Lambda.Version/FunctionName :crucible.generated.ap-northeast-1.AWS.Lambda.Version/CodeSha256 :crucible.generated.ap-northeast-1.AWS.Lambda.Version/Description] [function-name code-sha-256 description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.Lambda/Version m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.Lambda/Version) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.Lambda/Version m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.Lambda.Version)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.Lambda/Version (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.Lambda.Version/FunctionName] :opt [:crucible.generated.ap-northeast-1.AWS.Lambda.Version/CodeSha256 :crucible.generated.ap-northeast-1.AWS.Lambda.Version/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/ApplicationName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/Description (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk)
(clojure.core/defn ->ApplicationVersion "Constructor for a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion" [& [application-name source-bundle description]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/Description] [application-name source-bundle description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion m__1575651__auto__))))))
(clojure.core/defn map->ApplicationVersion "Convert a map to a :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion" [{:keys [application-name source-bundle description]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/Description] [application-name source-bundle description])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk/ApplicationVersion (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/ApplicationName :crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/SourceBundle] :opt [:crucible.generated.ap-northeast-1.AWS.ElasticBeanstalk.ApplicationVersion/Description]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RuleName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT)
(clojure.core/defn ->TopicRule "Constructor for a :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule" [& [topic-rule-payload rule-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RuleName] [topic-rule-payload rule-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule m__1575651__auto__))))))
(clojure.core/defn map->TopicRule "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule" [{:keys [topic-rule-payload rule-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload :crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RuleName] [topic-rule-payload rule-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IoT.TopicRule)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IoT/TopicRule (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/TopicRulePayload] :opt [:crucible.generated.ap-northeast-1.AWS.IoT.TopicRule/RuleName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOptions (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOption) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/SubjectAlternativeNames (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/Tag) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CertificateManager)
(clojure.core/defn ->Certificate "Constructor for a :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate" [& [domain-name domain-validation-options subject-alternative-names tags]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainName :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOptions :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/SubjectAlternativeNames :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/Tags] [domain-name domain-validation-options subject-alternative-names tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate m__1575651__auto__))))))
(clojure.core/defn map->Certificate "Convert a map to a :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate" [{:keys [domain-name domain-validation-options subject-alternative-names tags]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainName :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOptions :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/SubjectAlternativeNames :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/Tags] [domain-name domain-validation-options subject-alternative-names tags])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.CertificateManager/Certificate (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainName] :opt [:crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/DomainValidationOptions :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/SubjectAlternativeNames :crucible.generated.ap-northeast-1.AWS.CertificateManager.Certificate/Tags]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/SnapshotIdentifier (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/BackupRetentionPeriod (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DatabaseName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredMaintenanceWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Tags (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Tag) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/VpcSecurityGroupIds (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBClusterParameterGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUserPassword (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUsername (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/EngineVersion (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/StorageEncrypted (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBSubnetGroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Port (crucible.resources/spec-or-ref clojure.core/integer?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/KmsKeyId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Engine (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/AvailabilityZones (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredBackupWindow (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS)
(clojure.core/defn ->DBCluster "Constructor for a :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster" [& [engine availability-zones backup-retention-period db-cluster-parameter-group-name db-subnet-group-name database-name engine-version kms-key-id master-user-password master-username port preferred-backup-window preferred-maintenance-window snapshot-identifier storage-encrypted tags vpc-security-group-ids]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Engine :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/BackupRetentionPeriod :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBClusterParameterGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBSubnetGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DatabaseName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/EngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/KmsKeyId :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUsername :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Port :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredBackupWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/SnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/StorageEncrypted :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Tags :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/VpcSecurityGroupIds] [engine availability-zones backup-retention-period db-cluster-parameter-group-name db-subnet-group-name database-name engine-version kms-key-id master-user-password master-username port preferred-backup-window preferred-maintenance-window snapshot-identifier storage-encrypted tags vpc-security-group-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster m__1575651__auto__))))))
(clojure.core/defn map->DBCluster "Convert a map to a :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster" [{:keys [engine availability-zones backup-retention-period db-cluster-parameter-group-name db-subnet-group-name database-name engine-version kms-key-id master-user-password master-username port preferred-backup-window preferred-maintenance-window snapshot-identifier storage-encrypted tags vpc-security-group-ids]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Engine :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/BackupRetentionPeriod :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBClusterParameterGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBSubnetGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DatabaseName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/EngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/KmsKeyId :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUsername :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Port :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredBackupWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/SnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/StorageEncrypted :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Tags :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/VpcSecurityGroupIds] [engine availability-zones backup-retention-period db-cluster-parameter-group-name db-subnet-group-name database-name engine-version kms-key-id master-user-password master-username port preferred-backup-window preferred-maintenance-window snapshot-identifier storage-encrypted tags vpc-security-group-ids])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.RDS.DBCluster)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.RDS/DBCluster (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Engine] :opt [:crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/AvailabilityZones :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/BackupRetentionPeriod :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBClusterParameterGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DBSubnetGroupName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/DatabaseName :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/EngineVersion :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/KmsKeyId :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUserPassword :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/MasterUsername :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Port :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredBackupWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/PreferredMaintenanceWindow :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/SnapshotIdentifier :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/StorageEncrypted :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/Tags :crucible.generated.ap-northeast-1.AWS.RDS.DBCluster/VpcSecurityGroupIds]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/AllocationId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/Eip (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/InstanceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/NetworkInterfaceId (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/PrivateIpAddress (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2)
(clojure.core/defn ->EIPAssociation "Constructor for a :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation" [& [allocation-id eip instance-id network-interface-id private-ip-address]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/AllocationId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/Eip :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/PrivateIpAddress] [allocation-id eip instance-id network-interface-id private-ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation m__1575651__auto__))))))
(clojure.core/defn map->EIPAssociation "Convert a map to a :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation" [{:keys [allocation-id eip instance-id network-interface-id private-ip-address]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/AllocationId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/Eip :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/PrivateIpAddress] [allocation-id eip instance-id network-interface-id private-ip-address])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.EC2/EIPAssociation (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/AllocationId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/Eip :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/InstanceId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/NetworkInterfaceId :crucible.generated.ap-northeast-1.AWS.EC2.EIPAssociation/PrivateIpAddress]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/GroupName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/Users (clojure.spec/coll-of (crucible.resources/spec-or-ref clojure.core/string?) :kind clojure.core/vector?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM)
(clojure.core/defn ->UserToGroupAddition "Constructor for a :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition" [& [group-name users]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/GroupName :crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/Users] [group-name users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition m__1575651__auto__))))))
(clojure.core/defn map->UserToGroupAddition "Convert a map to a :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition" [{:keys [group-name users]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/GroupName :crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/Users] [group-name users])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.IAM/UserToGroupAddition (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/GroupName :crucible.generated.ap-northeast-1.AWS.IAM.UserToGroupAddition/Users] :opt []))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Topic/DisplayName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription (clojure.spec/coll-of (crucible.resources/spec-or-ref :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription) :kind clojure.core/vector?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS.Topic/TopicName (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS)
(clojure.core/defn ->Topic "Constructor for a :crucible.generated.ap-northeast-1.AWS.SNS/Topic" [& [display-name subscription topic-name]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.Topic/DisplayName :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription :crucible.generated.ap-northeast-1.AWS.SNS.Topic/TopicName] [display-name subscription topic-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS/Topic m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS/Topic) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS/Topic m__1575651__auto__))))))
(clojure.core/defn map->Topic "Convert a map to a :crucible.generated.ap-northeast-1.AWS.SNS/Topic" [{:keys [display-name subscription topic-name]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.SNS.Topic/DisplayName :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription :crucible.generated.ap-northeast-1.AWS.SNS.Topic/TopicName] [display-name subscription topic-name])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.SNS/Topic m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.SNS/Topic) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.SNS/Topic m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.SNS.Topic)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.SNS/Topic (clojure.spec/keys :req [] :opt [:crucible.generated.ap-northeast-1.AWS.SNS.Topic/DisplayName :crucible.generated.ap-northeast-1.AWS.SNS.Topic/Subscription :crucible.generated.ap-northeast-1.AWS.SNS.Topic/TopicName]))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/AllowSelfManagement (crucible.resources/spec-or-ref clojure.core/boolean?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/IamUserArn (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/SshPublicKey (crucible.resources/spec-or-ref clojure.core/string?))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks)
(clojure.core/defn ->UserProfile "Constructor for a :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile" [& [iam-user-arn allow-self-management ssh-public-key]] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/IamUserArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/AllowSelfManagement :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/SshPublicKey] [iam-user-arn allow-self-management ssh-public-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile m__1575651__auto__))))))
(clojure.core/defn map->UserProfile "Convert a map to a :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile" [{:keys [iam-user-arn allow-self-management ssh-public-key]}] (clojure.core/let [m__1575651__auto__ (clojure.core/zipmap [:crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/IamUserArn :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/AllowSelfManagement :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/SshPublicKey] [iam-user-arn allow-self-management ssh-public-key])] (if (clojure.spec/valid? :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile m__1575651__auto__) m__1575651__auto__ (throw (clojure.core/ex-info (clojure.core/str "Not a valid " :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile) (clojure.spec/explain-data :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile m__1575651__auto__))))))
(clojure.core/ns crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile)
(clojure.spec/def :crucible.generated.ap-northeast-1.AWS.OpsWorks/UserProfile (clojure.spec/keys :req [:crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/IamUserArn] :opt [:crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/AllowSelfManagement :crucible.generated.ap-northeast-1.AWS.OpsWorks.UserProfile/SshPublicKey]))
